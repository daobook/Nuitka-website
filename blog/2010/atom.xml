<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://nuitka.net</id>
  <title>Nuitka Blog - Posted in 2010</title>
  <updated>2022-02-10T03:53:47.480663+00:00</updated>
  <link href="https://nuitka.net"/>
  <link href="https://nuitka.net/blog/2010/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <entry>
    <id>https://nuitka.net/posts/starting-to-blog-who-and-why.html</id>
    <title>Starting to blog, who and why?</title>
    <updated>2010-08-05T22:06:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="starting-to-blog-who-and-why"&gt;

&lt;p&gt;My name is Kay Hayen, I was born in 1972 in the very northern part of
Germany very close to the North Sea.&lt;/p&gt;
&lt;p&gt;I am privately a developer of Free Software, and currently preparing the
release of my Python compiler. The name of the project will be “Nuitka”
chosen to honor my Russian wife Anna. We are a happy family with 2 sons,
born 2004 and 2007.&lt;/p&gt;
&lt;p&gt;I am starting this blog mostly to report about the new compiler. I don’t
think I will share much about my private life here, but I sure will
share a couple of photos with you occasionally. But mostly I will be
excited to report on the compiler progress.&lt;/p&gt;
&lt;p&gt;So far I didn’t feel like I had anything to say, but the compiler is
approaching its release later this month, and I will need a forum to
talk about it.&lt;/p&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/starting-to-blog-who-and-why.html" rel="alternate"/>
    <summary>My name is Kay Hayen, I was born in 1972 in the very northern part of
Germany very close to the North Sea.</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2010-08-05T22:06:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/releasing-nuitka-to-the-world.html</id>
    <title>Releasing Nuitka to the World</title>
    <updated>2010-08-18T07:49:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="releasing-nuitka-to-the-world"&gt;

&lt;p&gt;Obviously this is very exciting step for me. I am releasing Nuitka
today. Finally. For a long time I knew I would, but actually doing it,
is a different beast. Reaching my goals for release turned out to be
less far away than I hope, so instead of end of August, I can already
release it now.&lt;/p&gt;
&lt;p&gt;Currently it’s not more than 4% faster than CPython. No surprise there,
if all you did, is removing the bytecode interpretation so far. It’s not
impressive at all. It’s not even a reason to use it. But it’s also only
a start. Clearly, once I get into optimizing the code generation of
Nuitka, it will only get better, and then probably in sometimes dramatic
steps. But I see this as a long term goal.&lt;/p&gt;
&lt;p&gt;I want to have infrastructure in the code place, before doing lots of
possible optimizations that just make Nuitka unmaintainable. And I will
want to have a look at what others did so far in the domain of type
inference and how to apply that for my project.&lt;/p&gt;
&lt;p&gt;I look forward to the reactions about getting this far. The supported
language volume is amazing, and I have a set of nice tricks used. For
example the way generator functions are done is a clever hack.&lt;/p&gt;
&lt;p&gt;Where to go from here? Well, I guess, I am going to judge it by the
feedback I receive. I personally see “constant propagation” as a
laudable first low hanging fruit, that could be solved.&lt;/p&gt;
&lt;p&gt;Consider this readable code on the module level:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;meters_per_nautical_mile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1852&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertMetersToNauticalMiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;meters_per_nautical_mile&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertNauticalMilesToMeters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;miles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;miles&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;meters_per_nautical_mile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now imagine you are using this very frequently in code. Quickly you
determine that the following will be much faster:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertMetersToNauticalMiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1852&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convertNauticalMilesToMeters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;miles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;miles&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1852&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Still good? Well, probably next step you are going to inline the
function calls entirely. For optimization, you are making your code less
readable. I do not all appreciate that. My first goal is there to make
the more readable code perform as well or better as the less readable
variant.&lt;/p&gt;
&lt;p&gt;But yes, lets see what happens. Oh, and you will find its &lt;a class="reference external" href="/pages/download.html"&gt;latest
version here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/releasing-nuitka-to-the-world.html" rel="alternate"/>
    <summary>Obviously this is very exciting step for me. I am releasing Nuitka
today. Finally. For a long time I knew I would, but actually doing it,
is a different beast. Reaching my goals for release turned out to be
less far away than I hope, so instead of end of August, I can already
release it now.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2010-08-18T07:49:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/minor-release-nuitka-011.html</id>
    <title>Nuitka Release 0.1.1</title>
    <updated>2010-08-22T15:45:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-1-1"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I just have just updated Nuitka to version 0.1.1 which is a bug fix
release to 0.1, which corrects many of the small things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Updated the CPython test suite to 2.6.6rc and minimized much of
existing differences in the course.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compiles standalone executable that includes modules (with –deep
option), but packages are not yet included successfully.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reference leaks with exceptions are no more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.exc_info()&lt;/span&gt;&lt;/code&gt; works now mostly as expected (it’s not a stack of
exceptions).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More readable generated code, better organisation of C++ template
code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restored debug option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--g++-only&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The biggest thing probably is the progress with exception tracebacks
objects in exception handlers, which were not there before (always
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt;). Having these in place will make it much more compatible. Also
with manually raised exceptions and assertions, tracebacks will now be
more correct to the line.&lt;/p&gt;
&lt;p&gt;On a bad news, I discovered that the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;compiler&lt;/span&gt;&lt;/code&gt; module that I use to
create the AST from Python source code, is not only deprecated, but also
broken. I created the &lt;a class="reference external" href="http://bugs.python.org/issue9656"&gt;CPython bug&lt;/a&gt;
about it, basically it cannot distinguish some code of the form &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;d[1,]&lt;/span&gt;
&lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt; from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;d[1]&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt;. This will require a migration of the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ast&lt;/span&gt;&lt;/code&gt; module, which should not be too challenging, but will take some
time.&lt;/p&gt;
&lt;p&gt;I am aiming at it for a 0.2 release. Generating wrong code (Nuitka sees
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;d[1]&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt; in both cases) is a show blocker and needs a solution.&lt;/p&gt;
&lt;p&gt;So, yeah. It’s better, it’s there, but still experimental. You will find
its latest version here. Please try it out and let me know what you
think in the comments section.&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/minor-release-nuitka-011.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-08-22T15:45:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/new-git-repository-to-sync-with-nuitka-releases.html</id>
    <title>New git repository to sync with Nuitka releases</title>
    <updated>2010-08-26T23:06:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="new-git-repository-to-sync-with-nuitka-releases"&gt;

&lt;p&gt;For you git fans out there I have just added a new method to download
Nuitka from something I call the release git repository:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nuitka&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Nuitka&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then do your own modifications, and do:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;rebase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;each time there is a new release. You will be led through the merge
process as usual. To reduce your differences, feel free to send me the
patches you create with:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and I will incorporate useful stuff.&lt;/p&gt;
&lt;div class="admonition-please-note admonition"&gt;
&lt;p class="admonition-title"&gt;Please note&lt;/p&gt;
&lt;p&gt;If you publish your own git repository, please be so kind and name it
“Nuitka-unofficial” or similar, or else it might be mistaken with the
real thing, and drop me a line about it, just so I know.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/new-git-repository-to-sync-with-nuitka-releases.html" rel="alternate"/>
    <summary>For you git fans out there I have just added a new method to download
Nuitka from something I call the release git repository:</summary>
    <category term="git" label="git"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-08-26T23:06:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/release-nuitka-02.html</id>
    <title>Nuitka Release 0.2</title>
    <updated>2010-08-28T17:12:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-2"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Good day, this is a major step ahead, improvements everywhere.&lt;/p&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Migrated the Python parser from the deprecated and problematic
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;compiler&lt;/span&gt;&lt;/code&gt; module to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ast&lt;/span&gt;&lt;/code&gt; module which fixes the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;d[a,]&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt;
&lt;span class="pre"&gt;b&lt;/span&gt;&lt;/code&gt; parser problem. A pity it was not available at the time I
started, but the migration was relatively painless now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I found and fixed wrong encoding of binary data into C++ literals.
Now Nuitka uses C++0x raw strings, and these problems are gone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The decoding of constants was done with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;marshal&lt;/span&gt;&lt;/code&gt; module, but
that appears to not deeply care enough about unicode encoding it
seems. Using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cPickle&lt;/span&gt;&lt;/code&gt; now, which seems less efficient, but is more
correct.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another difference is gone: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;continue&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;break&lt;/span&gt;&lt;/code&gt; inside
loops do no longer prevent the execution of finally blocks inside the
loop.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I now maintain the “README.txt” in org-mode, and intend to use it as
the issue tracker, but I am still a beginner at that.&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;Turned out I never mastered it, and used ReStructured Text
instead.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a public git repository for you to track Nuitka releases.
Make your changes and then &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt; &lt;span class="pre"&gt;pull&lt;/span&gt; &lt;span class="pre"&gt;--rebase&lt;/span&gt;&lt;/code&gt;. If you encounter
conflicts in things you consider useful, please submit the patches
and a pull request. When you make your clones of Nuitka public, use
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka-unofficial&lt;/span&gt;&lt;/code&gt; or not the name &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Nuitka&lt;/span&gt;&lt;/code&gt; at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a now a mailing list (since closed).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reduced-differences"&gt;
&lt;h2&gt;Reduced Differences&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Did you know you could write &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lambda&lt;/span&gt; &lt;span class="pre"&gt;:&lt;/span&gt; &lt;span class="pre"&gt;(yield&lt;/span&gt; &lt;span class="pre"&gt;something)&lt;/span&gt;&lt;/code&gt; and it
gives you a lambda that creates a generator that produces that one
value? Well, now Nuitka has support for lambda generator functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;__future__&lt;/span&gt; &lt;span class="pre"&gt;import&lt;/span&gt; &lt;span class="pre"&gt;division&lt;/span&gt;&lt;/code&gt; statement works as expected
now, leading to some newly passing CPython tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Same for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;__future__&lt;/span&gt; &lt;span class="pre"&gt;import&lt;/span&gt; &lt;span class="pre"&gt;unicode_literals&lt;/span&gt;&lt;/code&gt; statement, these
work as expected now, removing many differences in the CPython tests
that use this already.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Python&lt;/span&gt;&lt;/code&gt; binary provided and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Nuitka.py&lt;/span&gt;&lt;/code&gt; are now capable of
accepting parameters for the program executed, in order to make it
even more of a drop-in replacement to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inlining of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; statements with constant expressions. These are
now compiled at compile time, not at run time anymore. I observed
that an increasing number of CPython tests use exec to do things in
isolation or to avoid warnings, and many more these tests will now be
more effective. I intend to do the same with eval expressions too,
probably in a minor release.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So give it a whirl. I consider it to be substantially better than
before, and the list of differences to CPython is getting small enough,
plus there is already a fair bit of polish to it. Just watch out that it
needs gcc-4.5 or higher now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/release-nuitka-02.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-08-28T17:12:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/release-nuitka-021.html</id>
    <title>Nuitka Release 0.2.1</title>
    <updated>2010-09-05T14:00:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-2-1"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The march goes on, this is another minor release with a bunch of
substantial improvements:&lt;/p&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Packages now also can be embedded with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--deep&lt;/span&gt;&lt;/code&gt; option too,
before they could not be imported from the executable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In-lined exec with their own future statements leaked these to the
surrounding code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reduced-differences"&gt;
&lt;h2&gt;Reduced Differences&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The future print function import is now supported too.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Independence of the compiled function type. When I started it was
merely &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyCFunction&lt;/span&gt;&lt;/code&gt; and then a copy of it patched at run time,
using increasingly less code from CPython. Now it’s nothing at all
anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This lead to major cleanup of run time compiled function creation
code, no more &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;methoddefs&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyCObject&lt;/span&gt;&lt;/code&gt; holding context, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PyLint was used to find the more important style issues and potential
bugs, also helping to identify some dead code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The major difference now is the lack of a throw method for generator
functions. I will try to address that in a 0.2.2 release if possible.
The plan is that the 0.2.x series will complete these tasks, and 0.3
could aim at some basic optimization finally.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/release-nuitka-021.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-09-05T14:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/family-photo.html</id>
    <title>Family Photo</title>
    <updated>2010-09-07T08:56:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="family-photo"&gt;

&lt;p&gt;As promised I will post some photos of the family occasionally.&lt;/p&gt;
&lt;p&gt;This is an artwork that I created with GIMP:&lt;/p&gt;
&lt;div class="figure align-default"&gt;
&lt;a class="reference external image-reference" href="/_images/Anna_Sonne_Andre_Michael.png"&gt;&lt;img alt="Photo of my family" src="../_images/Anna_Sonne_Andre_Michael.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;It’s a good family, and it’s mine. :-)&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/family-photo.html" rel="alternate"/>
    <summary>As promised I will post some photos of the family occasionally.</summary>
    <category term="family" label="family"/>
    <published>2010-09-07T08:56:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/release-nuitka-022.html</id>
    <title>Nuitka Release 0.2.2</title>
    <updated>2010-09-11T09:41:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-2-2"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is some significant progress, a lot of important things were
addressed.&lt;/p&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Scope analysis is now done during the tree building instead of
sometimes during code generation, this fixed a few issues that didn’t
show up in tests previously.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reference leaks of generator expressions that were not fishing, but
then deleted are not more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inlining of exec is more correct now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More accurate exception lines when iterator creation executes
compiled code, e.g. in a for loop&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The list of base classes of a class was evaluated in the context of
the class, now it is done in the context of the containing scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The first iterated of a generator expression was evaluated in its own
context, now it is done in the context of the containing scope.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reduced-differences"&gt;
&lt;h2&gt;Reduced Differences&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;With the enhanced scope analysis, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;UnboundLocalError&lt;/span&gt;&lt;/code&gt; is now
correctly supported.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generator expressions (but not yet functions) have a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;throw()&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;send()&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;close()&lt;/span&gt;&lt;/code&gt; method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exec can now write to local function namespace even if &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt; is
provided at run time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Relative imports inside packages are now correctly resolved at
compile time when using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--deep&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The compiled function type got further enhanced and cleaned up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The compiled generator expression function type lead to a massive
cleanup of the code for generator expressions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cleaned up namespaces, was still using old names, or “Py*” which is
reserved to core CPython.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overhaul of the code responsible for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eval&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt;, it has
been split, and it pushed the detection defaults to the C++ compiler
which means, we can do it at run time or compile time, depending on
circumstances.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Made &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyTemporaryObject&lt;/span&gt;&lt;/code&gt; safer to use, disabling copy constructor
it should be also a relief to the C++ compiler if it doesn’t have to
eliminate all its uses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The way delayed work is handled in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeBuilding&lt;/span&gt;&lt;/code&gt; step has been
changed to use closured functions, should be more readable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some more code templates have been created, making the code
generation more readable in some parts. More to come.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;As I start to consider announcing Nuitka, I moved the version logic
so that the version can now be queried with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Name lookups for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;True&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;False&lt;/span&gt;&lt;/code&gt; and now always
detected as constants, eliminating many useless module variable
lookups.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-tests"&gt;
&lt;h2&gt;New Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;More complete test of generator expressions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added test program for packages with relative imports inside the
package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The built-in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dir()&lt;/span&gt;&lt;/code&gt; in a function was not having fully
deterministic output list, now it does.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Overall, the amount of differences between CPython and Nuitka is heading
towards zero. Also most of the improvements done in this release were
very straightforward cleanups and not much work was required, mostly
things are about cleanups and then it becomes easily right. The new type
for the compiled generator expressions was simple to create, esp. as I
could check what CPython does in its source code.&lt;/p&gt;
&lt;p&gt;For optimization purposes, I decided that generator expressions and
generator functions will be separate compiled types, as most of their
behavior will not be shared. I believe optimizing generator expressions
to run well is an important enough goal to warrant that they have their
own implementation. Now that this is done, I will repeat it with
generator functions.&lt;/p&gt;
&lt;p&gt;Generator functions already work quite fine, but like generator
expressions did before this release, they can leak references if not
finished , and they don’t have the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;throw()&lt;/span&gt;&lt;/code&gt; method, which seems very
important to the correct operation of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;contextlib&lt;/span&gt;&lt;/code&gt;. So I will
introduce a decicated type for these too, possibly in the next release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/release-nuitka-022.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-09-11T09:41:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-scope-quiz.html</id>
    <title>Quiz Question</title>
    <updated>2010-09-12T16:01:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="quiz-question"&gt;

&lt;p&gt;Say you have the following module code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;some_class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;


&lt;span class="n"&gt;some_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What is going to happen? Well, think about it, the solution is in the
next paragraph.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;The correct answer is that the call “some_function()” is going to give
you a “UnboundLocalError” exception.&lt;/p&gt;
&lt;p&gt;This is because it in functions unlike in classes (or modules) do look
ahead for assigned to variable names. Python allocates a slot for local
variables of functions and that is a property that doesn’t change -
unless you say “global” of course. This slot is used for every access to
the variable name, which forbids you to make it local.&lt;/p&gt;
&lt;p&gt;Surprised? I was too! I only learned it while doing my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler
Nuitka&lt;/a&gt; and I made it a separate posting,
because it really surprised me how different function body and class
body work.&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/python-scope-quiz.html" rel="alternate"/>
    <summary>Say you have the following module code:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="quiz" label="quiz"/>
    <published>2010-09-12T16:01:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/release-nuitka-023.html</id>
    <title>Nuitka Release 0.2.3</title>
    <updated>2010-09-17T19:42:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-2-3"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This new release is marking a closing in on feature parity to CPython
2.6 which is an important mile stone. Once this is reached, a “Nuitka
0.3.x” series will strive for performance.&lt;/p&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Generator functions no longer leak references when started, but not
finished.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Yield can in fact be used as an expression and returns values that
the generator user &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;send()&lt;/span&gt;&lt;/code&gt; to it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="reduced-differences-new-features"&gt;
&lt;h2&gt;Reduced Differences / New Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Generator functions already worked quite fine, but now they have the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;throw()&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;send()&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;close()&lt;/span&gt;&lt;/code&gt; methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Yield is now an expression as is ought to be, it returns values put
in by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;send()&lt;/span&gt;&lt;/code&gt; on the generator user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for extended slices:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Strange&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tests-work"&gt;
&lt;h2&gt;Tests Work&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The “test_contextlib” is now working perfectly due to the generator
functions having a correct &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;throw()&lt;/span&gt;&lt;/code&gt;. Added that test back, so
context managers are now fully covered.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added a basic test for “overflow functions” has been added, these are
the ones which have an unknown number of locals due to the use of
language constructs &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;bla&lt;/span&gt; &lt;span class="pre"&gt;import&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; on the function
level. This one currently only highlights the failure to support it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reverted removals of extended slice syntax from some parts of the
CPython test suite.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The compiled generator types are using the new C++0x type safe enums
feature.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Resolved a circular dependency between &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeBuilding&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeTransforming&lt;/span&gt;&lt;/code&gt; modules.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/release-nuitka-023.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-09-17T19:42:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/python-exec-in-nested-functions-quiz.html</id>
    <title>Quiz Question</title>
    <updated>2010-09-20T20:51:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="quiz-question"&gt;

&lt;p&gt;Say you have the following module code:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a_global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deepExec&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;for_closure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execFunction&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;f=2&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# Can fool it to nest&lt;/span&gt;
        &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Locals now&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Closure was taken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;for_closure&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Globals still work&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_global&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Added local from code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

    &lt;span class="n"&gt;execFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;deepExec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Can you overcome the SyntaxError this gives in CPython? Normally exec
like this is not allowed for nested functions. Well, think about it, the
solution is in the next paragraph.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;The correct answer is that you need to add “in None, None” to the exec
and you are fine. The exec is now allowed and behaves as expected. You
can see it in the locals, “f” was indeed added to it, the closure value
is correct, and the global still works.&lt;/p&gt;
&lt;p&gt;It seems the “SyntaxError” tries to avoid such code, but on the other
hand, exec is not forbidden when it has parameters, and those imply
defaults when they are None.&lt;/p&gt;
&lt;p&gt;Now, I had this strange realization when implementing the “exec”
behaviour for my &lt;a class="reference external" href="/pages/overview.html"&gt;Python compiler Nuitka&lt;/a&gt; which
in its next version (due later this week) will be able to handle this
type code as well. :-)&lt;/p&gt;
&lt;p&gt;Kay Hayen&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/python-exec-in-nested-functions-quiz.html" rel="alternate"/>
    <summary>Say you have the following module code:</summary>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-09-20T20:51:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/release-nuitka-024.html</id>
    <title>Nuitka Release 0.2.4</title>
    <updated>2010-09-22T18:29:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-2-4"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release 0.2.4 is likely the last 0.2.x release, as it’s the one
that achieved feature parity with CPython 2.6, which was the whole point
of the release series, so time to celebrate. I have stayed away (mostly)
from any optimization, so as to not be premature.&lt;/p&gt;
&lt;p&gt;From now on speed optimization is going to be the focus though. Because
right now, frankly, there is not much of a point to use Nuitka yet, with
only a minor run time speed gain in trade for a long compile time. But
hopefully we can change that quickly now.&lt;/p&gt;
&lt;div class="section" id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The use of exec in a local function now adds local variables to scope
it is in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The same applies to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;from&lt;/span&gt; &lt;span class="pre"&gt;module_name&lt;/span&gt; &lt;span class="pre"&gt;import&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; which is now
compiled correctly and adds variables to the local variables.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Raises &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;UnboundLocalError&lt;/span&gt;&lt;/code&gt; when deleting a local variable with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;del&lt;/span&gt;&lt;/code&gt; twice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Raises &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NameError&lt;/span&gt;&lt;/code&gt; when deleting a global variable with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;del&lt;/span&gt;&lt;/code&gt;
twice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read of to uninitialized closure variables gave &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NameError&lt;/span&gt;&lt;/code&gt;, but
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;UnboundLocalError&lt;/span&gt;&lt;/code&gt; is correct and raised now.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;There is now a dedicated pass over the node tree right before code
generation starts, so that some analysis can be done as late as that.
Currently this is used for determining which functions should have a
dictionary of locals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Checking the exported symbols list, fixed all the cases where a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;static&lt;/span&gt;&lt;/code&gt; was missing. This reduces the “module.so” sizes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With gcc the “visibility=hidden” is used to avoid exporting the
helper classes. Also reduces the “module.so” sizes, because classes
cannot be made static otherwise.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-tests"&gt;
&lt;h2&gt;New Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added “DoubleDeletions” to cover behaviour of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;del&lt;/span&gt;&lt;/code&gt;. It seems that
this is not part of the CPython test suite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The “OverflowFunctions” (those with dynamic local variables) now has
an interesting test, exec on a local scope, effectively adding a
local variable while a closure variable is still accessible, and a
module variable too. This is also not in the CPython test suite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restored the parts of the CPython test suite that did local star
imports or exec to provide new variables. Previously these have been
removed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also “test_with.py” which covers PEP 343 has been reactivated, the
with statement works as expected.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/release-nuitka-024.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-09-22T18:29:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-030.html</id>
    <title>Nuitka Release 0.3.0</title>
    <updated>2010-09-26T17:38:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-3-0"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release 0.3.0 is the first release to focus on performance. In the
0.2.x series Nuitka achieved feature parity with CPython 2.6 and that
was very important, but now it is time to make it really useful.&lt;/p&gt;
&lt;p&gt;Optimization has been one of the main points, although I was also a bit
forward looking to Python 2.7 language constructs. This release is the
first where I really started to measure things and removed the most
important bottlenecks.&lt;/p&gt;
&lt;div class="section" id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Added option to control &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--debug&lt;/span&gt;&lt;/code&gt;. With this option the C++ debug
information is present in the file, otherwise it is not. This will
give much smaller “.so” and “.exe” files than before.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--no-optimization&lt;/span&gt;&lt;/code&gt; to disable all optimization.&lt;/p&gt;
&lt;p&gt;It enables C++ asserts and compiles with less aggressive C++ compiler
optimization, so it can be used for debugging purposes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for Python 2.7 set literals has been added.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="performance-enhancements"&gt;
&lt;h2&gt;Performance Enhancements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fast global variables: Reads of global variables were fast already.
This was due to a trick that is now also used to check them and to do
a much quicker update if they are already set.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fast &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;break&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;continue&lt;/span&gt;&lt;/code&gt; statements: To make sure these statements
execute the finally handlers if inside a try, these used C++
exceptions that were caught by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;try&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;finally&lt;/span&gt;&lt;/code&gt; in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;while&lt;/span&gt;&lt;/code&gt; or
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;for&lt;/span&gt;&lt;/code&gt; loops.&lt;/p&gt;
&lt;p&gt;This was very slow and had very bad performance. Now it is checked if
this is at all necessary and then it’s only done for the rare case
where a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;break&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;continue&lt;/span&gt;&lt;/code&gt; really is inside the tried block.
Otherwise it is now translated to a C++ &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;break&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;continue&lt;/span&gt;&lt;/code&gt; which
the C++ compiler handles more efficiently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unlikely()&lt;/span&gt;&lt;/code&gt; compiler hints to all errors handling cases to
allow the C++ compiler to generate more efficient branch code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The for loop code was using an exception handler to make sure the
iterated value was released, using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyObjectTemporary&lt;/span&gt;&lt;/code&gt; for that
instead now, which should lead to better generated code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using constant dictionaries and copy from them instead of building
them at run time even when contents was constant.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-tests"&gt;
&lt;h2&gt;New Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Merged some bits from the CPython 2.7 test suite that do not harm
2.6, but generally it’s a lot due to some &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unittest&lt;/span&gt;&lt;/code&gt; module
interface changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added CPython 2.7 tests &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;test_dictcomps.py&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;test_dictviews.py&lt;/span&gt;&lt;/code&gt; which both pass when using Python 2.7.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added another benchmark extract from “PyStone” which uses a while
loop with break.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="numbers"&gt;
&lt;h2&gt;Numbers&lt;/h2&gt;
&lt;p&gt;python 2.6:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.65&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mf"&gt;76923.1&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nuitka 0.3.0:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.52&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mf"&gt;96153.8&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s a 25% speedup now and a good start clearly. It’s not yet in the
range of where i want it to be, but there is always room for more. And
the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;break&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;continue&lt;/span&gt;&lt;/code&gt; exception was an important performance
regression fix.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-030.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-09-26T17:38:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-031.html</id>
    <title>Nuitka Release 0.3.1</title>
    <updated>2010-09-30T09:28:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-3-1"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release of Nuitka continues the focus on performance and contains
only cleanups and optimization. Most go into the direction of more
readable code, some aim at making the basic things faster, with good
results as to performance as you can see below.&lt;/p&gt;
&lt;div class="section" id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Constants in conditions of conditional expressions (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt; &lt;span class="pre"&gt;if&lt;/span&gt; &lt;span class="pre"&gt;cond&lt;/span&gt; &lt;span class="pre"&gt;else&lt;/span&gt;
&lt;span class="pre"&gt;d&lt;/span&gt;&lt;/code&gt;), &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;elif&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;while&lt;/span&gt;&lt;/code&gt; are now evaluated to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;true&lt;/span&gt;&lt;/code&gt; or
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;false&lt;/span&gt;&lt;/code&gt; directly. Before there would be temporary python object
created from it which was then checked if it had a truth value.&lt;/p&gt;
&lt;p&gt;All of that is obviously overhead only. And it hurts the typically
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;while&lt;/span&gt; &lt;span class="pre"&gt;1:&lt;/span&gt;&lt;/code&gt; infinite loop case badly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not generate code to catch &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;BreakException&lt;/span&gt;&lt;/code&gt; or
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ContinueException&lt;/span&gt;&lt;/code&gt; unless a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;break&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;continue&lt;/span&gt;&lt;/code&gt; statement
being in a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;try:&lt;/span&gt; &lt;span class="pre"&gt;finally:&lt;/span&gt;&lt;/code&gt; block inside that loop actually require
this.&lt;/p&gt;
&lt;p&gt;Even while uncaught exceptions are cheap, it is still an improvement
worthwhile and it clearly improves the readability for the normal
case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The compiler more aggressively prepares tuples, lists and dicts from
the source code as constants if their contents is “immutable” instead
of building at run time. An example of a “mutable” tuple would be
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;({},)&lt;/span&gt;&lt;/code&gt; which is not safe to share, and therefore will still be
built at run time.&lt;/p&gt;
&lt;p&gt;For dictionaries and lists, copies will be made, under the assumption
that copying a dictionary will always be faster, than making it from
scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The parameter parsing code was dynamically building the tuple of
argument names to check if an argument name was allowed by checking
the equivalent of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;name&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt; &lt;span class="pre"&gt;argument_names&lt;/span&gt;&lt;/code&gt;. This was of course
wasteful and now a pre-built constant is used for this, so it should
be much faster to call functions with keyword arguments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are new templates files and also actual templates now for the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;while&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;for&lt;/span&gt;&lt;/code&gt; loop code generation. And I started work on
having a template for assignments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Do not generate code for the else of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;while&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;for&lt;/span&gt;&lt;/code&gt; loops if
there is no such branch. This uncluttered the generated code
somewhat.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The indentation of the generated C++ was not very good and whitespace
was often trailing, or e.g. a real tab was used instead of “t”. Some
things didn’t play well together here.&lt;/p&gt;
&lt;p&gt;Now much of the generated C++ code is much more readable and white
space cleaner. For optimization to be done, the humans need to be
able to read the generated code too. Mind you, the aim is not to
produce usable C++, but on the other hand, it must be possible to
understand it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To the same end of readability, the empty &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;else&lt;/span&gt; &lt;span class="pre"&gt;{}&lt;/span&gt;&lt;/code&gt; branches are
avoided for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;while&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;for&lt;/span&gt;&lt;/code&gt; loops. While the C++
compiler can be expected to remove these, they seriously cluttered up
things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The constant management code in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Context&lt;/span&gt;&lt;/code&gt; was largely simplified.
Now the code is using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Constant&lt;/span&gt;&lt;/code&gt; class to find its way around
the problem that dicts, sets, etc. are not hashable, or that
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;complex&lt;/span&gt;&lt;/code&gt; is not being ordered; this was necessary to allow deeply
nested constants, but it is also a simpler code now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The C++ code generated for functions now has two entry points, one
for Python calls (arguments as a list and dictionary for parsing) and
one where this has happened successfully. In the future this should
allow for faster function calls avoiding the building of argument
tuples and dictionaries all-together.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For every function there was a “traceback adder” which was only used
in the C++ exception handling before exit to CPython to add to the
traceback object. This was now in-lined, as it won’t be shared ever.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="numbers"&gt;
&lt;h2&gt;Numbers&lt;/h2&gt;
&lt;p&gt;python 2.6:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.65&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mf"&gt;76923.1&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nuitka 0.3.1:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.41&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;121951&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is 58% for 0.3.1, up from the 25% before. So it’s getting
somewhere. As always you will find its latest version here.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-031.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-09-30T09:28:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-032.html</id>
    <title>Nuitka Release 0.3.2</title>
    <updated>2010-10-10T21:10:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-3-2"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release of Nuitka continues the focus on performance. But this
release also revisits the topic of feature parity. Before, feature
parity had been reached “only” with Python 2.6. This is of course a big
thing, but you know there is always more, e.g. Python 2.7.&lt;/p&gt;
&lt;p&gt;With the addition of set contractions and dict contractions in this very
release, Nuitka is approaching Python support for 2.7, and then there
are some bug fixes.&lt;/p&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling a function with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;**&lt;/span&gt;&lt;/code&gt; and using a non-dict for it was
leading to wrong behavior.&lt;/p&gt;
&lt;p&gt;Now a mapping is good enough as input for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;**&lt;/span&gt;&lt;/code&gt; parameter and
it’s checked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deeply nested packages “package.subpackage.module” were not found and
gave a warning from Nuitka, with the consequence that they were not
embedded in the executable. They now are.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some error messages for wrong parameters didn’t match literally. For
example “function got multiple…” as opposed to “function() got
multiple…” and alike.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Files that ended in line with a “#” but without a new line gave an
error from “ast.parse”. As a workaround, a new line is added to the
end of the file if it’s “missing”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More correct exception locations for complex code lines. I noted that
the current line indication should not only be restored when the call
at hand failed, but in any case. Otherwise sometimes the exception
stack would not be correct. It now is - more often. Right now, this
has no systematic test.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Re-raised exceptions didn’t appear on the stack if caught inside the
same function, these are now correct.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; the globals argument needs to have “__builtins__” added,
but the check was performed with the mapping interface.&lt;/p&gt;
&lt;p&gt;That is not how CPython does it, and so e.g. the mapping could use a
default value for “__builtins__” which could lead to incorrect
behavior. Clearly a corner case, but one that works fully compatible
now.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The local and shared local variable C++ classes have a flag
“free_value” to indicate if an “PY_DECREF” needs to be done when
releasing the object. But still the code used “Py_XDECREF” (which
allows for “NULL” values to be ignored.) when the releasing of the
object was done. Now the inconsistency of using “NULL” as “object”
value with “free_value” set to true was removed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tuple constants were copied before using them without a point. They
are immutable anyway.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Improved more of the indentation of the generated C++ which was not
very good for contractions so far. Now it is. Also assignments should
be better now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The generation of code for contractions was made more general and
templates split into multiple parts. This enabled reuse of the code
for list contractions in dictionary and set contractions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The with statement has its own template now and got cleaned up
regarding indentation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-tests"&gt;
&lt;h2&gt;New Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;There is now a script to extract the “doctests” from the CPython test
suite and it generates Python source code from them. This can be
compiled with Nuitka and output compared to CPython. Without this,
the doctest parts of the CPython test suite is mostly useless.
Solving this improved test coverage, leading to many small fixes. I
will dedicate a later posting to the tool, maybe it is useful in
other contexts as well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reference count tests have been expanded to cover assignment to
multiple assignment targets, and to attributes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The deep program test case, now also have a module in a sub-package
to cover this case as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;a class="reference external" href="https://nuitka.net/gitweb"&gt;gitweb interface&lt;/a&gt; (since disabled)
might be considered an alternative to downloading the source if you
want to provide a pointer, or want to take a quick glance at the
source code. You can already download with git, follow the link below
to the page explaining it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The “README.txt” has documented more of the differences and I
consequently updated the Differences page. There is now a distinction
between generally missing functionality and things that don’t work in
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--deep&lt;/span&gt;&lt;/code&gt; mode, where Nuitka is supposed to create one executable.&lt;/p&gt;
&lt;p&gt;I will make it a priority to remove the (minor) issues of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--deep&lt;/span&gt;&lt;/code&gt;
mode in the next release, as this is only relatively little work, and
not a good difference to have. We want these to be empty, right? But
for the time being, I document the known differences there.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="numbers"&gt;
&lt;h2&gt;Numbers&lt;/h2&gt;
&lt;p&gt;python 2.6:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.65&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mf"&gt;76923.1&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nuitka 0.3.2:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.39&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;128205&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is 66% for 0.3.2, slightly up from the 58% of 0.3.1 before. The
optimization done were somewhat fruitful, but as you can see, they were
also more cleanups, not the big things.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-032.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-10-10T21:10:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-033.html</id>
    <title>Nuitka Release 0.3.3</title>
    <updated>2010-11-15T00:17:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-3-3"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release of Nuitka continues the focus on performance. It also
cleans up a few open topics. One is “doctests”, these are now extracted
from the CPython 2.6 test suite more completely. The other is that the
CPython 2.7 test suite is now passed completely. There is some more work
ahead though, to extract all of the “doctests” and to do that for both
versions of the tests.&lt;/p&gt;
&lt;p&gt;This means an even higher level of compatibility has been achieved, then
there is performance improvements, and ever cleaner structure.&lt;/p&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;div class="section" id="generators"&gt;
&lt;h3&gt;Generators&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Generator functions tracked references to the common and the instance
context independently, now the common context is not released before
the instance contexts are.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generator functions didn’t check the arguments to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;throw()&lt;/span&gt;&lt;/code&gt; the way
they are in CPython, now they do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generator functions didn’t trace exceptions to “stderr” if they
occurred while closing unfinished ones in “del”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generator functions used the slightly different wordings for some
error messages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="function-calls"&gt;
&lt;h3&gt;Function Calls&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Extended call syntax with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;**&lt;/span&gt;&lt;/code&gt; allows that to use a mapping, and it
is now checked if it really is a mapping and if the contents has
string keys.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly, extended call syntax with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; allows a sequence, it is
now checked if it really is a sequence.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Error message for duplicate keyword arguments or too little arguments
now describe the duplicate parameter and the callable the same way
CPython does.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now checks to the keyword argument list first before considering the
parameter counts. This is slower in the error case, but more
compatible with CPython.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="classes"&gt;
&lt;h3&gt;Classes&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The “locals()” built-in when used in the class scope (not in a
method) now is correctly writable and writes to it change the
resulting class.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Name mangling for private identifiers was not always done entirely
correct.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="others"&gt;
&lt;h3&gt;Others&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Exceptions didn’t always have the correct stack reported.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The pickling of some tuples showed that “cPickle” can have
non-reproducible results, using “pickle” to stream constants now&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Access to instance attributes has become faster by writing specific
code for the case. This is done in JIT way, attempting at run time to
optimize attribute access for instances.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assignments now often consider what’s cheaper for the other side,
instead of taking a reference to a global variable, just to have to
release it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The function call code built argument tuples and dictionaries as
constants, now that is true for every tuple usage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The static helper classes, and the prelude code needed have been
moved to separate C++ files and are now accessed “#include”. This
makes the code inside C++ files as opposed to a Python string and
therefore easier to read and or change.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The generator functions and generator expressions have the attribute
“gi_running” now. These indicate if they are currently running.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-tests"&gt;
&lt;h2&gt;New Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The script to extract the “doctests” from the CPython test suite has
been rewritten entirely and works with more doctests now. Running
these tests created increased the test coverage a lot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Python 2.7 test suite has been added.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;One can now run multiple “compare_with_cpython” instances in
parallel, which enables background test runs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is now a new environment variable “NUITKA_INCLUDE” which needs
to point to the directory Nuitka’s C++ includes live in. Of course
the “create-environment.sh” script generates that for you easily.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="numbers"&gt;
&lt;h2&gt;Numbers&lt;/h2&gt;
&lt;p&gt;python 2.6:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.65&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mf"&gt;76923.1&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nuitka 0.3.3:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.36&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;138889&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is 80% for 0.3.3, up from 66% before.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-033.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-11-15T00:17:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-needs-you---a-call-for-help.html</id>
    <title>Nuitka needs you - a call for help</title>
    <updated>2010-11-23T16:11:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-needs-you-a-call-for-help"&gt;

&lt;p&gt;Hello everybody,&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;Python3 support was added, and has reached 3.3 in the mean time. The
doctests are extracted by a script indeed. But exception stack
correctness is an ongoing struggle.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;my Python compiler Nuitka has come a long way, and currently I have
little to no time to spend on it, due to day job reasons, so it’s going
to mostly stagnate for about 2 weeks from my side. But that’s coming to
an end, and still I would like to expand what we currently have, with
your help.&lt;/p&gt;
&lt;p&gt;Note: You can check the page &lt;a class="reference external" href="/pages/overview.html"&gt;What is Nuitka?&lt;/a&gt;
for clarification of what it is now and what it wants to be.&lt;/p&gt;
&lt;p&gt;As you will see, covering all the CPython 2.6 and 2.7 language features
is already something. Other projects are far, far away from that. But
going ahead, I want to secure that base. And this is where there are
several domains where you can help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python 3.1 or higher&lt;/p&gt;
&lt;p&gt;I did some early testing. The C/API changed in many ways, and my
current working state has a couple of fixes for it. I would like
somebody else to devote some time to fixing this up. Please contact
me if you can help here, esp. if you are competent in the C/API
changes of Python 3.1. Even if the CPython 3.1 doesn’t matter as much
to me, I believe the extended coverage from the new tests in its test
suite would be useful. The improved state is not yet released. I
would make an release to the person(s) that want to work on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Doctests support&lt;/p&gt;
&lt;p&gt;I have started to extract the doctests from the CPython 2.6 test
suite. There is a script that does it, and you basically only need to
expand it with more of the same. No big issue there, but it could
find issues with Nuitka that we would like to know. Of course, it
should also be expanded to CPython 2.7 test suite and ultimately also
CPython 3.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exception correctness&lt;/p&gt;
&lt;p&gt;I noted some issues with the stacks when developing with the CPython
2.7 tests, or now failing 2.6 tests, after some merge work. But what
would be needed would be tests to cover all the situations, where
exceptions could be raised, and stack traces should ideally be
identical for all. This is mostly only accuracy work and the CPython
test suite is bad at covering it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these areas would be significant help, and do not necessarily or at
all require any Nuitka inside knowledge. You should also subscribe the
mailing list (since closed) if you consider helping, so we can discuss
things in the open.&lt;/p&gt;
&lt;p&gt;If you choose to help me, before going even further into optimization,
in all likelihood it’s only going to make things more solid. The more
tests we have, the less wrong paths we can take. This is why I am asking
for things, which all point into that direction.&lt;/p&gt;
&lt;p&gt;Thanks in advance, Kay Hayen&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-needs-you---a-call-for-help.html" rel="alternate"/>
    <summary>Hello everybody,</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <published>2010-11-23T16:11:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-pre-release-034pre1.html</id>
    <title>Nuitka Pre-Release 0.3.4pre1</title>
    <updated>2010-12-06T23:27:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-pre-release-0-3-4pre1"&gt;

&lt;p&gt;This pre-release of Nuitka has a focus on re-organizing the Nuitka
generated source code. Please see the page &lt;a class="reference external" href="/pages/overview.html"&gt;“What is Nuitka?”&lt;/a&gt; for clarification of what it is now and what it
wants to be.&lt;/p&gt;
&lt;p&gt;For a long time, Nuitka has generated a single C++ file, even when
embedding many modules into one. And it has always showed that the GNU
g++ compiler clearly has exponential compile time behavior when
translating these into the executable.&lt;/p&gt;
&lt;p&gt;This is no more the case. So this pre-release is mainly about making the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--deep&lt;/span&gt;&lt;/code&gt; feature useful. Before the release, I may look into
optimizations for speed again. Right now time is very short due to day
job reasons, so this pre-release is also about allowing people to use
the improvements that I have made and get some feedback about it.&lt;/p&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;None at all. Although I am sure that there may be regressions on the
options side. The tests of CPython 2.7 all pass still, but you may
find some breakage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Static helpers source code has been moved to “.hpp” and “.cpp” files,
instead of being in “.py” files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generated generated code for each module is now a separate file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constants etc. go to their own file (although not named sensible yet)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Uses Scons to make the build.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-tests"&gt;
&lt;h2&gt;New Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I have added ExtremClosure from the Python quiz. I feel it was not
covered by existing tests yet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;There is now a new environment variable “NUITKA_SCONS” which should
point to the directory with the Scons file for Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;create-environment.sh&lt;/span&gt;&lt;/code&gt; can now be sourced (if you are in the
top level directory of Nuitka) or be used with eval. In either case
it also reports what it does.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="numbers"&gt;
&lt;h2&gt;Numbers&lt;/h2&gt;
&lt;p&gt;None at this time. It likely didn’t change much at all. And I am not yet
using the link time optimization feature of the g++ compiler, so
potentially it should be worse than before at max.&lt;/p&gt;
&lt;p&gt;This release will be inside the “git” repository only. Check out &lt;a class="reference external" href="/pages/download.html"&gt;latest
version here&lt;/a&gt; to get it.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Kay Hayen&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-pre-release-034pre1.html" rel="alternate"/>
    <summary>This pre-release of Nuitka has a focus on re-organizing the Nuitka
generated source code. Please see the page “What is Nuitka?” for clarification of what it is now and what it
wants to be.</summary>
    <category term="compiler" label="compiler"/>
    <category term="git" label="git"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="Python" label="Python"/>
    <published>2010-12-06T23:27:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-034.html</id>
    <title>Nuitka Release 0.3.4</title>
    <updated>2010-12-24T14:01:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;div class="section" id="nuitka-release-0-3-4"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This new release of Nuitka has a focus on re-organizing the Nuitka
generated source code and a modest improvement on the performance side.&lt;/p&gt;
&lt;p&gt;For a long time now, Nuitka has generated a single C++ file and asked
the C++ compiler to translate it to an executable or shared library for
CPython to load. This was done even when embedding many modules into one
(the “deep” compilation mode, option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--deep&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This was simple to do and in theory ought to allow the compiler to do
the most optimization. But for large programs, the resulting source code
could have exponential compile time behavior in the C++ compiler. At
least for the GNU g++ this was the case, others probably as well. This
is of course at the end a scalability issue of Nuitka, which now has
been addressed.&lt;/p&gt;
&lt;p&gt;So the major advancement of this release is to make the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--deep&lt;/span&gt;&lt;/code&gt;
option useful. But also there have been a performance improvements,
which end up giving us another boost for the “PyStone” benchmark.&lt;/p&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Imports of modules local to packages now work correctly, closing the
small compatibility gap that was there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modules with a “-” in their name are allowed in CPython through
dynamic imports. This lead to wrong C++ code created. (Thanks to Li
Xuan Ji for reporting and submitting a patch to fix it.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There were warnings about wrong format used for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Ssize_t&lt;/span&gt;&lt;/code&gt; type of
CPython. (Again, thanks to Li Xuan Ji for reporting and submitting
the patch to fix it.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a wrong exception type is raised, the traceback should still be
the one of the original one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set and dict contractions (Python 2.7 features) declared local
variables for global variables used. This went unnoticed, because
list contractions don’t generate code for local variables at all, as
they cannot have such.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;type()&lt;/span&gt;&lt;/code&gt; built-in to create a new class could attribute
it to the wrong module, this is now corrected.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Uses Scons to execute the actual C++ build, giving some immediate
improvements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now caches build results and Scons will only rebuild as needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The direct use of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__import__()&lt;/span&gt;&lt;/code&gt; with a constant module name as
parameter is also followed in “deep” mode. With time, non-constants
may still become predictable, right now it must be a real CPython
constant string.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added optimization for the built-ins &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ord()&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;chr()&lt;/span&gt;&lt;/code&gt;, these
require a module and built-in module lookup, then parameter parsing.
Now these are really quick with Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added optimization for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;type()&lt;/span&gt;&lt;/code&gt; built-in with one parameter. As
above, using from builtin module can be very slow. Now it is
instantaneous.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added optimization for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;type()&lt;/span&gt;&lt;/code&gt; built-in with three parameters.
It’s rarely used, but providing our own variant, allowed to fix the
bug mentioned above.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Using scons is a big cleanup for the way how C++ compiler related
options are applied. It also makes it easier to re-build without
Nuitka, e.g. if you were using Nuitka in your packages, you can
easily build in the same way than Nuitka does.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Static helpers source code has been moved to “.hpp” and “.cpp” files,
instead of being in “.py” files. This makes C++ compiler messages
more readable and allows us to use C++ mode in Emacs etc., making it
easier to write things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generated code for each module ends up in a separate file per module
or package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constants etc. go to their own file (although not named sensible yet,
likely going to change too)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Module variables are now created by the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CPythonModule&lt;/span&gt;&lt;/code&gt; node only
and are unique, this is to make optimization of these feasible. This
is a pre-step to module variable optimization.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="new-tests"&gt;
&lt;h2&gt;New Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added “ExtremeClosure” from my Python quiz, it was not covered by
existing tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added test case for program that imports a module with a dash in its
name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added test case for main program that starts with a dash.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extended the built-in tests to cover &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;type()&lt;/span&gt;&lt;/code&gt; as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There is now a new environment variable &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NUITKA_SCONS&lt;/span&gt;&lt;/code&gt; which should
point to the directory with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SingleExe.scons&lt;/span&gt;&lt;/code&gt; file for Nuitka.
The scons file could be named better, because it is actually one and
the same who builds extension modules and executables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is now a new environment variable &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NUITKA_CPP&lt;/span&gt;&lt;/code&gt; which should
point to the directory with the C++ helper code of Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script “create-environment.sh” can now be sourced (if you are in
the top level directory of Nuitka) or be used with eval. In either
case it also reports what it does.&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;The script has become obsolete now, as the environment variables
are no longer necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To cleanup the many “Program.build” directories, there is now a
“clean-up.sh” script for your use. Can be handy, but if you use git,
you may prefer its clean command.&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update&lt;/p&gt;
&lt;p&gt;The script has become obsolete now, as Nuitka test executions now
by default delete the build results.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="numbers"&gt;
&lt;h2&gt;Numbers&lt;/h2&gt;
&lt;p&gt;python 2.6:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.65&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mf"&gt;76923.1&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nuitka 0.3.4:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Pystone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.34&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;benchmarks&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;147059&lt;/span&gt; &lt;span class="n"&gt;pystones&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is 91% for 0.3.4, up from 80% before.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-034.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2010-12-24T14:01:00+00:00</published>
  </entry>
</feed>
