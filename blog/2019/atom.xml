<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://nuitka.net</id>
  <title>Nuitka Blog - Posted in 2019</title>
  <updated>2022-01-09T15:51:13.292788+00:00</updated>
  <link href="https://nuitka.net"/>
  <link href="https://nuitka.net/blog/2019/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-061.html</id>
    <title>Nuitka Release 0.6.1</title>
    <updated>2019-01-08T10:31:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-1"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release comes after a relatively long time, and contains important
new optimization work, and even more bug fixes.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fix, the options &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--[no]follow-import-to=package_name&lt;/span&gt;&lt;/code&gt; was supposed
to not follow into the given package, but the check was executed too
broadly, so that e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;package_name2&lt;/span&gt;&lt;/code&gt; was also affected. Fixed in
0.6.0.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, wasn’t detecting multiple recursions into the same package in
module mode, when attempting to compile a whole sub-package. Fixed in
0.6.0.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, constant values are used as C boolean values still for some of
the cases. Fixed in 0.6.0.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, referencing a function cannot raise an exception, but that was
not annotated. Fixed in 0.6.0.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Use standard include of C bool type instead of rolling our
own, which was not compatible with newest Clang. Fixed in 0.6.0.3
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bytes&lt;/span&gt;&lt;/code&gt; built-in type actually does have a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__float__&lt;/span&gt;&lt;/code&gt; slot. Fixed in 0.6.0.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.7: Types that are also sequences still need to call the
method &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__class_getitem__&lt;/span&gt;&lt;/code&gt; for consideration. Fixed in 0.6.0.4
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.7: Error exits from program exit could get lost on Windows
due to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__spec__&lt;/span&gt;&lt;/code&gt; handling not preserving errors. Fixed in 0.6.0.4
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Negative exit codes from Nuitka, e.g. due to a triggered
assertion in debug mode were not working. Fixed in 0.6.0.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, conditional &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;and&lt;/span&gt;&lt;/code&gt; expressions were mis-optimized when not used
to not execute the right hand side still. Fixed in 0.6.0.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.6: Fix, generators, coroutines, and asyncgen were not
properly supporting annotations for local variables. Fixed in 0.6.0.5
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.7: Fix, class declarations had memory leaks that were
untestable before 3.7.1 fixed reference count issues in CPython.
Fixed in 0.6.0.6 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.7: Fix, asyncgen expressions can be created in normal
functions without an immediate awaiting of the iterator. This new
feature was not correctly supported.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, star imports on the module level should disable built-in name
optimization except for the most critical ones, otherwise e.g. names
like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;all&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pow&lt;/span&gt;&lt;/code&gt; can become wrong. Previous workarounds for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pow&lt;/span&gt;&lt;/code&gt; were not good enough.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the scons for Python3 failed to properly report build errors due
to a regression of the Scons version used for it. This would mask
build errors on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.4: Fix, packages didn’t indicate that they are packages in
their &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__spec__&lt;/span&gt;&lt;/code&gt; value, causing issues with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;importlib_resources&lt;/span&gt;&lt;/code&gt;
module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.4: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__spec__&lt;/span&gt;&lt;/code&gt; values of compiled modules didn’t have
compatible &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;origin&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;has_location&lt;/span&gt;&lt;/code&gt; values preventing
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;importlib_resources&lt;/span&gt;&lt;/code&gt; module from working to load data files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, packages created from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pth&lt;/span&gt;&lt;/code&gt; files were also considered when
checking for sub-packages of a module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Handle cases of conflicting DLLs better. On Windows pick
the newest file version if different, and otherwise just report and
pick randomly because we cannot really decide which ought to be
loaded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Warn about collisions of DLLs on non-Windows only as this
can happen with wheels apparently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: For Windows Python extension modules &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pyd&lt;/span&gt;&lt;/code&gt; files,
remove the SxS configuration for cases where it causes problems, not
needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt; statement on file handles was not using the proper
filename when compiling, therefore breaking e.g.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;inspect.getsource&lt;/span&gt;&lt;/code&gt; on functions defined there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for OpenGL platform plugins to be included
automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added missing implicit dependency for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zmq&lt;/span&gt;&lt;/code&gt; module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.7: Fix, using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt; &lt;span class="pre"&gt;utf8&lt;/span&gt;&lt;/code&gt; flag on the calling
interpreter, aka &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=utf8_mode&lt;/span&gt;&lt;/code&gt; was not preserved in the
compiled binary in all cases.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Enabled C target type &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;void&lt;/span&gt;&lt;/code&gt; which will catch creating unused stuff
more immediately and give better code for expression only statements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabled in-place optimization for module variables, avoiding write
back to the module dict for unchanged values, accelerating these
operations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile time memory savings for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt;&lt;/code&gt; node of Python2, no
need to track if it is in an exception handler, not relevant there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using the single child node for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt;&lt;/code&gt; nodes gives memory
savings at compile time for these, while also making them operate
faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More kinds of in-place operations are now optimized, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt; &lt;span class="pre"&gt;+=&lt;/span&gt;
&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; and the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bytes&lt;/span&gt;&lt;/code&gt; ones were specialized to perform real
in-place extension where possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Loop variables no longer loose type information, but instead collect
the set of possible type shapes allowing optimization for them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Corrected download link for Arch AUR link of develop package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added repository for Ubuntu Cosmic (18.10) for download.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added repository for Fedora 29 for download.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Describe the exact format used for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clang-format&lt;/span&gt;&lt;/code&gt; in the Developer
Manual.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added description how to use CondaCC on Windows to the User Manual.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The operations used for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;async&lt;/span&gt; &lt;span class="pre"&gt;for&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;async&lt;/span&gt; &lt;span class="pre"&gt;with&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;await&lt;/span&gt;&lt;/code&gt;
were all doing a look-up of an awaitable, and then executing the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt; &lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; that awaitable as one thing. Now this is split into
two parts, with a new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ExpressionYieldFromAwaitable&lt;/span&gt;&lt;/code&gt; as a dedicated
node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yield&lt;/span&gt;&lt;/code&gt; node types, now 3 share a base class and common
computation for now, enhancing the one for awaitiable, which was not
fully annotating everything that can happen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In code generation avoid statement blocks that are not needed,
because there are no local C variables declared, and properly indent
them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fixups for the manual Valgrind runner and the UI changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test runner detects lock issue of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt; on Windows and
considers it a permission problem that causes a retry.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This addresses even more corner cases not working correctly, the out of
the box experience should be even better now.&lt;/p&gt;
&lt;p&gt;The push towards C level performance for integer operation was held up
by the realization that loop SSA was not yet there really, and that it
had to be implemented, which of course now makes a huge difference for
the cases where e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bool&lt;/span&gt;&lt;/code&gt; are being used. There is no C type for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; used yet, which limits the impact of optimization to only taking
shortcuts for the supported types. These are useful and faster of
course, but only building blocks for what is to come.&lt;/p&gt;
&lt;p&gt;Most of the effort went into specialized helpers that e.g. add a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt; and and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; value in a dedicated fashion, as well as
comparison operations, so we can fully operate some minimal examples
with specialized code. This is too limited still, and must be applied to
ever more operations.&lt;/p&gt;
&lt;p&gt;What’s more is that the benchmarking situation has not improved. Work
will be needed in this domain to make improvements more demonstrable. It
may well end up being the focus for the next release to improve Nuitka
speedcenter to give more fine grained insights across minor changes of
Nuitka and graphs with more history.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-061.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2019-01-08T10:31:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-12.html</id>
    <title>Nuitka this week #12</title>
    <updated>2019-02-08T14:09:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-12"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-12" id="id2"&gt;Nuitka this week #12&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#communication-vs-coding" id="id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#optimization-work" id="id4"&gt;Optimization Work&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#week-of-bugfixing" id="id5"&gt;Week of Bugfixing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#python-flag-o-and-oo" id="id6"&gt;Python flag -O and -OO&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#virtualenv-vs-venv" id="id7"&gt;Virtualenv vs. venv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#google-summer-of-code-for-nuitka" id="id8"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-organisation" id="id9"&gt;Nuitka Organisation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#windows-dependencies-from-pefile" id="id10"&gt;Windows Dependencies from pefile&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tkinter-plugin" id="id11"&gt;Tkinter Plugin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#numpy-plugin" id="id12"&gt;Numpy Plugin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id13"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id14"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id15"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="communication-vs-coding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Over the holiday season I sort of neglected these postings, but there
are other fields, where I have put my focus, but I think these postings
are now going to resume.&lt;/p&gt;
&lt;p&gt;A quick update in a while in an eternally fluent situation, and not too
polished.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="optimization-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Optimization Work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, the 0.6.2 optimization work has been not a lot yet. I started some
work on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;long&lt;/span&gt;&lt;/code&gt; C type and it looked good.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="week-of-bugfixing"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Week of Bugfixing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So I did this, and it turned out rather long. I continued fixing things
and finishing up open things to the point that it now is clean. I hate
to be falling behind. I am touching on a few more interesting topics.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-flag-o-and-oo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Python flag -O and -OO&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nuitka was supporting &lt;cite&gt;-O&lt;/cite&gt; but doing what should only the done for &lt;cite&gt;-OO&lt;/cite&gt;
which I only learned of now. So this is going to be supported both now.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="virtualenv-vs-venv"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Virtualenv vs. venv&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Accelerated binaries were not running with full &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.path&lt;/span&gt;&lt;/code&gt; in the
virtualenv, because &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;site&lt;/span&gt;&lt;/code&gt; module uses &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.prefix&lt;/span&gt;&lt;/code&gt; and that was not
propagated,but it now is.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="google-summer-of-code-for-nuitka"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Google Summer of Code for Nuitka&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So the GSoC 2019 page is shaping up, the pull request to list Nuitka on
the PSF project pages has been merged. More tweaking will be needed to
get into perfect shape, and that has been my main communication time
effort.&lt;/p&gt;
&lt;p&gt;Finally somebody had stepped up for mentor, which means a lot to me. Now
we need to see if students are willing to pick us.&lt;/p&gt;
&lt;p&gt;And because I publish this too late. Already a bunch of stundents are
showing interest and are hacking on Nuitka, which keeps me even more
busy, and makes me extremely happy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nuitka-organisation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Nuitka Organisation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Nuitka organisation on Github was introduced for my a while ago, and
I had transferred the ownership of the Nuitka repository to there.
Having moved the issue tracking to there, I was going more all in on it.&lt;/p&gt;
&lt;p&gt;Recently more people have submitted PRs and with incredible quality and
willingness to support it even after merge of their PR. No dry by
contribution, but people looking to actually improve Nuitka together
with me.&lt;/p&gt;
&lt;p&gt;Therefore I welcome Orsiris and Jorj on board and am really happy about
it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="windows-dependencies-from-pefile"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Windows Dependencies from pefile&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So Orsiris de Jong implemented a replacement for the dependency walker
based code to scan DLLs for Windows standalone using the &lt;cite&gt;pefile&lt;/cite&gt;
module, which is likely way better at this. For starters it’s
experimental in the next release, but I expect it to soon become the
default.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tkinter-plugin"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Tkinter Plugin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And Jorj X. McKie implemented a Windows Tkinter plug-in that deals with
copying of the TCL installation and integrating it with Nuitka
standalone for distribution.&lt;/p&gt;
&lt;p&gt;That is very nice and seems to affect a lot of people using that GUI
style it seems.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="numpy-plugin"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Numpy Plugin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And Jorj X. McKie also implemented a NumPy plug-in that deals with the
various acceleration methods there are, e.g. MKL, Blas, I have no idea.
It copies the needed DLLs along and makes sure that &lt;cite&gt;numpy&lt;/cite&gt; stays fast
in standalone mode.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to be very active there.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;p&gt;Adding Twitter more prominently to the web site is something that is
also going to happen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/nuitka-zh/nuitka-zh/doc/posts/nuitka-this-week-12.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very likely at least one &lt;em&gt;you&lt;/em&gt; can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-12.html" rel="alternate"/>
    <summary>Nuitka this week #12</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2019-02-08T14:09:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-062.html</id>
    <title>Nuitka Release 0.6.2</title>
    <updated>2019-02-20T11:03:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-2"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release has a huge focus on organisational things. Nuitka is
growing in terms of contributors and supported platforms.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fix, the Python flag &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=-O&lt;/span&gt;&lt;/code&gt; was removing doc strings,
but that should only be done with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=-OO&lt;/span&gt;&lt;/code&gt; which was
added too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, accelerated binaries failed to load packages from the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt; (not &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;venv&lt;/span&gt;&lt;/code&gt;) that they were created and ran with,
due to not propagating &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.prefix&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Do not include &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;plat-*&lt;/span&gt;&lt;/code&gt; directories as frozen code, and
also on some platforms they can also contain code that fails to
import without error.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added missing implicit dependency needed for newer NumPy
versions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Added support for Alpine Linux.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for MSYS2 based Python on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for Python flag &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python&lt;/span&gt; &lt;span class="pre"&gt;flag=-OO&lt;/span&gt;&lt;/code&gt;, which allows to
remove doc strings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added experimental support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pefile&lt;/span&gt;&lt;/code&gt; based dependency scans on
Windows, thanks to Orsiris for this contribution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added plugin for proper Tkinter standalone support on Windows, thanks
to Jorj for this contribution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is now a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__compiled__&lt;/span&gt;&lt;/code&gt; attribute for each module that Nuitka
has compiled. Should be like this now, and contains Nuitka version
information for you to use, similar to what &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.version_info&lt;/span&gt;&lt;/code&gt;
gives as a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;namedtuple&lt;/span&gt;&lt;/code&gt; for your checks.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__nuitka_version__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;micro&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;releaselevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;release&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Experimental code for variant types for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;long&lt;/span&gt;&lt;/code&gt; values,
that can be plain C value, as well as the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyObject&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt;. This is not
yet completed though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Minor refinements of specialized code variants reducing them more
often the actual needed code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The Nuitka Github Organisation that was created a while ago and owns
the Nuitka repo now, has gained members. Check out
&lt;a class="reference external" href="https://github.com/orgs/Nuitka/people"&gt;https://github.com/orgs/Nuitka/people&lt;/a&gt; for their list. This is an
exciting transformation for Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nuitka is participating in the GSoC 2019 under the PSF umbrella. We
hope to grow even further. Thanks to the mentors who volunteered for
this important task. Check out the &lt;a class="reference external" href="https://nuitka.net/pages/gsoc2019.html#mentors"&gt;GSoC 2019 page&lt;/a&gt; and thanks to the
students that are already helping out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added Nuitka internal &lt;a class="reference external" href="https://nuitka.net/apidoc"&gt;API documentation&lt;/a&gt; that will receive more love in the
future. It got some for this release, but a lot is missing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Nuitka code has been &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;black&lt;/span&gt;&lt;/code&gt;-ened and is formatted with an
automatic tool now all the way, which makes contributors lives
easier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added documentation for questions received as part of the GSoC
applications and ideas work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some proof reading pull requests were merged for the documentation,
thanks to everybody who addresses these kinds of errors. Sometimes
typos, sometimes broken links, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated inline copy of Scons used for Python3 to 3.0.4, which
hopefully means more bugs are fixed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This release is a sign of increasing adoption of Nuitka. The GSoC 2019
is showing early effects, as is more developers joining the effort.
These are great times for Nuitka.&lt;/p&gt;
&lt;p&gt;This release has not much on the optimization side that is user visible,
but the work that has begun is capable of producing glorious benchmarks
once it will be finished.&lt;/p&gt;
&lt;p&gt;The focus on this and coming releases is definitely to open up the
Nuitka development now that people are coming in as permanent or
temporary contributors in (relatively) high numbers.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-062.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2019-02-20T11:03:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-063.html</id>
    <title>Nuitka Release 0.6.3</title>
    <updated>2019-04-07T08:21:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-3"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This has a focus on organisational improvements. With more and more
people joining Nuitka, normal developers as well as many GSoC 2019
students, the main focus was to open up the development tools and
processes, and to improve documentation.&lt;/p&gt;
&lt;p&gt;That said, an impressive amount of bug fixes was contributed, but
optimization was on hold.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Windows: Added support for running compiled binaries in unicode path
names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for crytodomex and pycparser packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for OpenSSL support in PyQt on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for OpenGL support with QML in PyQt on
Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for SciPy and extended the NumPy plugin to
also handle it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: The option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--plugin-list&lt;/span&gt;&lt;/code&gt; still needed a positional argument
to work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.base_prefix&lt;/span&gt;&lt;/code&gt; is set correctly too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: Also make sure &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.exec_prefix&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.base_exec_prefix&lt;/span&gt;&lt;/code&gt; are set correctly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added platform plugins for PyQt to the default list of
sensible plugins to include.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix detection of standard library paths that include &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;..&lt;/span&gt;&lt;/code&gt; path
elements.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Avoid static C++ runtime library when using MinGW64.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Plugins: A plugin may now also generate data files on the fly for a
given module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for FreeBSD/PowerPC arch which still uses &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gcc&lt;/span&gt;&lt;/code&gt; and
not &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clang&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Nuitka is participating in the GSoC 2019.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added documentation on how to create or use Nuitka plugins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added more API doc to functions that were missing them as part of the
ongoing effort to complete it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated to latest PyLint 2.3.1 for checking the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scons: Using newer Scons inline copy with Python 2.7 as, the old one
remains only used with Python 2.6, making it easier to know the
relevant code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Autoformat was very much enhanced and handles C and ReST files too
now. For Python code it does pylint comment formatting, import
statement sorting, and blackening.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added script &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;misc/install-git-hooks.py&lt;/span&gt;&lt;/code&gt; that adds a commit hook
that runs autoformat on commit. Currently it commits unstaged content
and therefore is not yet ready for prime time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moved adapted CPython test suites to &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka-CPython-tests"&gt;Github repository under Nuitka
Organisation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moved Nuitka-website repository to &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka-website"&gt;Github repository under Nuitka
Organisation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moved Nuitka-speedcenter repository to &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka-speedcenter"&gt;Github repository under
Nuitka Organisation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is now a &lt;a class="reference external" href="https://gitter.im/Nuitka-chat/community"&gt;Gitter chat for Nuitka community&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many typo and spelling corrections on all the documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added short installation guide for Nuitka on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Moved commandline parsing helper functions from common code helpers
to the main program where of course their only usage is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moved post processing of the created standalone binary from main
control to the freezer code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;chmod&lt;/span&gt;&lt;/code&gt; binary to remove executable bit from created
extension modules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Avoid using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rt.exe&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mt.exe&lt;/span&gt;&lt;/code&gt; to deal with copying
the manifest from the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python.exe&lt;/span&gt;&lt;/code&gt; to created binaries. Instead use
new code that extracts and adds Windows resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixed many &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ResourceWarnings&lt;/span&gt;&lt;/code&gt; on Python3 by improved ways of
handling files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixed deprecation warnings related to not using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;collections.abc&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The runners in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bin&lt;/span&gt;&lt;/code&gt; directory are now formatted with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;black&lt;/span&gt;&lt;/code&gt;
too.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Detect Windows permission errors for two step execution of Nuitka as
well, leading to retries should they occur.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The salt value for CPython cached results was improved to take more
things into account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tests: Added more trick assignments and generally added more tests
that were so far missing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;With the many organisational changes in place, my normal work is
expected to resume for after and yield quicker improvements now.&lt;/p&gt;
&lt;p&gt;It is also important that people are now enabled to contribute to the
Nuitka web site and the Nuitka speedcenter. Hope is to see more
improvements on this otherwise neglected areas.&lt;/p&gt;
&lt;p&gt;And generally, it’s great to see that a community of people is now
looking at this release in excitement and pride. Thanks to everybody who
contributed!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-063.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2019-04-07T08:21:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-this-week-13.html</id>
    <title>Nuitka this week #13</title>
    <updated>2019-05-12T11:07:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-this-week-13"&gt;

&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-this-week-13" id="id2"&gt;Nuitka this week #13&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#communication-vs-coding" id="id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#google-summer-of-code-2019" id="id4"&gt;Google Summer of Code 2019&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#my-experience" id="id5"&gt;My Experience&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#accepted-students" id="id6"&gt;Accepted Students&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#optimization-work" id="id7"&gt;Optimization Work&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#core-stuff" id="id8"&gt;Core Stuff&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#faster-windows-dependencies" id="id9"&gt;Faster Windows Dependencies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#nuitka-organisation" id="id10"&gt;Nuitka Organisation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#plugin-work" id="id11"&gt;Plugin Work&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#opening-up" id="id12"&gt;Opening Up&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#twitter" id="id13"&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#help-wanted" id="id14"&gt;Help Wanted&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#donations" id="id15"&gt;Donations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;section id="communication-vs-coding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Communication vs. Coding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Communication was a lot more, just not these postings. Nuitka has
ventured into important realms.&lt;/p&gt;
&lt;p&gt;First, active developers have joined Nuitka. Second, as a consequence of
the later, Nuitka indeed was able to participate with a insanely
powerful offering of 4 mentors.&lt;/p&gt;
&lt;p&gt;This meant, that a lot of technical or project management debt hat to be
dealt with, and there was no time to make this kind of posting. This is
probably good news on all fronts, except that I feel they are missing,
and am glad to be able to resume them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="google-summer-of-code-2019"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Google Summer of Code 2019&lt;/a&gt;&lt;/h2&gt;
&lt;section id="my-experience"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;My Experience&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was the most crazy ride and fun. Became the admin of an active
sub-organisation under the PSF umbrella for GSoC 2019. So shortly after
the announcement of the project lists, students flooded in, and starting
working on things right away as early as February.&lt;/p&gt;
&lt;p&gt;They were working hard to prove themselves and get to know Nuitka,
asking many questions, with us having lots of email interviews, and even
a lot of video calls, where I personally talked to people about ideas.&lt;/p&gt;
&lt;p&gt;This happened simultaneously to more experienced developers joining the
project as well, making very important contributions.&lt;/p&gt;
&lt;p&gt;This basically meant, that many days 90%-100% of my Nuitka time was for
communication or working off technical debts I knew there were, or for
preparing things, I want to have with multiple people working on the
code base. This will be detailed in other sections.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="accepted-students"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Accepted Students&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All of this has paid of in that we now have 2 really good students to
work on 2 Nuitka projects over the summer. Let’s welcome Batakrishna and
Tommy in separate posts. They will introduce themselves and what they
are going to do shortly, in separate posts.&lt;/p&gt;
&lt;p&gt;Lets just say, this is fantastic news. We had so many good applications
and its a shame, but we knew right away, not everybody who deserved it
could be picked. But this is going to be a good chance for us to get to
be open and welcoming to new people.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="optimization-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Optimization Work&lt;/a&gt;&lt;/h2&gt;
&lt;section id="core-stuff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Core Stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, the 0.6.3 release (btw. on Windows, be sure to use the 0.6.3.1
hotfix), which was made as a consolidation effort to get the good work
of mostly other people out, didn’t contain much optimization work for
the core, as that is still my thing.&lt;/p&gt;
&lt;p&gt;However, this changed a lot. An idea that came to my mind for how to do
the massive amounts of specialized helpers needed beyond &lt;cite&gt;+&lt;/cite&gt; and &lt;cite&gt;+=&lt;/cite&gt;,
with which I had started for prior releases. And that is to use Jinja2
based templates for C, to generate the code.&lt;/p&gt;
&lt;p&gt;This was an important idea. Took a while, but soon the manual code for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; was already replaced with generated code, fixing a few bugs by the
way, and from there, the generation was expanded to cover &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;Currently, support for the 3 (!) different kinds of additions
(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TrueDiv&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FloorDir&lt;/span&gt;&lt;/code&gt; as well as Python2 default division,
dubbed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OldDiv&lt;/span&gt;&lt;/code&gt; in Nuitka was added along with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;The reason, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; were done first, is that they have special
treatment for sequences, using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sq_concat&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sq_repeat&lt;/span&gt;&lt;/code&gt;, where
the other operations will be more straightforward, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nb_subtract&lt;/span&gt;&lt;/code&gt;
(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/code&gt;) has a lot types supporting it and that makes those the easy
cases.&lt;/p&gt;
&lt;p&gt;I am saving a deeper explanation of 3 things we will need for the next
time. Basically we need optimization of these things at compile time,
and that is getting there, and code to use in the backend, and that is
getting there, and a third thing, that is to use optimization knowledge
to apply the special code as much as possible, and that is not yet fully
there.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="faster-windows-dependencies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Faster Windows Dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is going to excite Windows users. After Orsiris de Jong had done a
replacement for dependency walker that is faster, this had remained in
an experimental status, just due to lack of time.&lt;/p&gt;
&lt;p&gt;Recently however, I felt there is more time, after GSoC student
selection has happened, and that I could finally work a bit on open
issues like this. And when I wrote a dedicated tool, to analyse
dependences with either technology to compare the results, I found that
dendency walker founds a lot more things.&lt;/p&gt;
&lt;p&gt;That was a turn down, but turns out, nothing it finds is stuff that
should not be on the white list. In fact, it’s all core Windows things,
and from the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;System32&lt;/span&gt;&lt;/code&gt; folder. That made me question, why we take
anything from there (except maybe &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PythonXY.dll&lt;/span&gt;&lt;/code&gt;) at all, and after
that change the performance changed dramatically.&lt;/p&gt;
&lt;p&gt;The dependency walker now finishes a file in milliseconds. Actually the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pefile&lt;/span&gt;&lt;/code&gt; is now slow (surely it ought to be compiled), and takes some
seconds, for a file. That is amazing, and has lead to me to remove the
parallel usage, and since &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pefile&lt;/span&gt;&lt;/code&gt; allows for perfect caching, and is
Free Software, we will probably keep it.&lt;/p&gt;
&lt;p&gt;This will address a widespread complaint of many Windows users of the
standalone mode. This is now a relatively unnoticable part of the
overall experience.&lt;/p&gt;
&lt;p&gt;Currently I need to finish off some remaining problems with it, before
putting it out in the wild. Getting this into a release will solve many
newcomer issues.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="nuitka-organisation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Nuitka Organisation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Esp. for Google Summer of Code, Nuitka has sought and found mentors,
some of which are highly experienced for the task. I will let them
decide and write their own introduction, but I feel really blessed by
them helping me out in my desperate calls for help. Without them,
neither could Nuitka participate, nor could it even overachieve as much
as it does.&lt;/p&gt;
&lt;p&gt;Therefore I welcomed Kamran and Vaibhav into the organisation and they
are excited to work the the 2 accepted students, that are also added.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="plugin-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Plugin Work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jorj&lt;/span&gt;&lt;/code&gt; branch there is a lot of work from Jorj that aims at
adding support for more of the beasty stuff with hidden dependency and
plugin needs.&lt;/p&gt;
&lt;p&gt;He is also working at run time tracing of your program to be translated
to automatic imports of just that. I am going to highlight this later,
once I manage to cherry-pick the release ready parts from it for the
next release.&lt;/p&gt;
&lt;p&gt;But this definitely awesome stuff, and going to make Nuitka very easy to
use for some people, even with stranger software.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="opening-up"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Opening Up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is also a teaser. But we did so much work for the 0.6.3 release to
make sure information is there, and things are accessible and changeable
by everyone, or even the pre-commit hook that I am very proud of.&lt;/p&gt;
&lt;p&gt;But I shall save this for next week, otherwise it will be too much new
information.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="twitter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Twitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I continue to be active there, although often I fall prey to of not
wanting to talk about unfinished things. On Twitter of all things.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kayhayen?ref_src=twsrc%5Etfw"&gt;Follow &amp;#64;kayhayen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And lets not forget, having followers make me happy. So do re-tweets.&lt;/p&gt;
&lt;p&gt;Adding Twitter more prominently to the web site is something that is
also going to happen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-wanted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Help Wanted&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/nuitka-zh/nuitka-zh/doc/posts/nuitka-this-week-13.rst&lt;/span&gt;, line 7); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “help wanted”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are interested, I am tagging issues &lt;a class="reference external" href="https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help wanted&lt;/a&gt;
and there is a bunch, and very likely at least one &lt;em&gt;you&lt;/em&gt; can help with.&lt;/p&gt;
&lt;p&gt;Nuitka definitely needs more people to work on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="donations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Donations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to help, but cannot spend the time, please consider to
donate to Nuitka, and go here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/pages/donations.html"&gt;Donate to Nuitka&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-this-week-13.html" rel="alternate"/>
    <summary>Nuitka this week #13</summary>
    <category term="Python" label="Python"/>
    <category term="compiler" label="compiler"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="NTW" label="NTW"/>
    <published>2019-05-12T11:07:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/batakrishna-sahu-intro.html</id>
    <title>Batakrishna Sahu</title>
    <updated>2019-05-14T08:31:00+00:00</updated>
    <author>
      <name>Batakrishna Sahu</name>
    </author>
    <content type="html">&lt;section id="batakrishna-sahu"&gt;

&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;My name is Batakrishna Sahu and I am from India. I’m very grateful to be
one of the 2 selected students who will work with Nuitka during Google
Summer of Code 2019. My project is on &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#6183147857772544"&gt;“Optimizing Python 2 and Python 3
built-ins for Nuitka”&lt;/a&gt;
mentored by Vaibhav Tulsyan, Kamran Ghanaat, Kay Hayen.&lt;/p&gt;
&lt;p&gt;So far, ​there are a total of 69 built-ins in Python 3 and ​76 built-in
in Python 2 out of which 27 built-ins are yet to be optimized in
Nuitka​. My aim is to optimize those missing built-ins in Nuitka. This
will make Nuitka a lot faster while working with built-ins.&lt;/p&gt;
&lt;p&gt;I’m really excited to gain new experience while working on this project
this summer.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Batakrishna&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/batakrishna-sahu-intro.html" rel="alternate"/>
    <summary>Hello everyone!</summary>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="portrait" label="portrait"/>
    <published>2019-05-14T08:31:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/tommy-gsoc-intro.html</id>
    <title>Tommy’s Google Summer of Code Intro</title>
    <updated>2019-05-15T10:00:00+00:00</updated>
    <author>
      <name>Taofeng(Tommy) Li</name>
    </author>
    <content type="html">&lt;section id="tommy-s-google-summer-of-code-intro"&gt;

&lt;p&gt;Hi all! :)&lt;/p&gt;
&lt;p&gt;My name is Taofeng Li and I go by the nickname of Tommy, github handle
&lt;a class="reference external" href="https://github.com/tommyli3318"&gt;tommyli3318&lt;/a&gt;. I’m a Computer Science
major at the University of California, Irvine in the United States. I am
very excited to announce that I’ll be contributing to Nuitka this summer
under the Google Summer of Code program!&lt;/p&gt;
&lt;p&gt;My project is “Nuitka support for PyPI top 50”, it ensures Nuitka’s
compatibility with the 50 most popular PyPI packages by setting up
automated testing for each package. These automated tests will serve to
be very important tools for the development of Nuitka, as they will be
used to assure Nuitka’s compatibility with the most used Python packages
every time Nuitka receives a new update.&lt;/p&gt;
&lt;p&gt;My mentors will be Vaibhav Tulsyan, Kamran Ghanaat, and Kay Hayen. My
project abstract can be seen &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#4874692681269248"&gt;here&lt;/a&gt; and
the full details of my project can be found &lt;a class="reference external" href="https://docs.google.com/document/d/1tdbXyMy5xjVEeWociI_t2f6tlmge6czT0xmfCLyDXYg/edit?usp=sharing"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am greatly looking forward to the many things that I’ll learn this
summer!&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/tommy-gsoc-intro.html" rel="alternate"/>
    <summary>Hi all! :)</summary>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="tests" label="tests"/>
    <category term="standalone" label="standalone"/>
    <category term="portrait" label="portrait"/>
    <published>2019-05-15T10:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/jorj-x-mckie.html</id>
    <title>Jorj X. McKie</title>
    <updated>2019-05-18T11:00:00+00:00</updated>
    <author>
      <name>Jorj X. McKie</name>
    </author>
    <content type="html">&lt;p&gt;Self-Introduction Jorj McKie&lt;/p&gt;
&lt;section id="jorj-x-mckie"&gt;

&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;I am Jorj X. McKie (this is &lt;strong&gt;not&lt;/strong&gt; my real name!) and I am an
enthusiastic supporter of Nuitka. For the time being, my focus area
within this package is standalone compilation and maintenance of the
plugin feature.&lt;/p&gt;
&lt;p&gt;Apart from extending Nuitka’s support to virtually all Python packages
living out there, my driving motivation in this respect is keeping up
and improving the usability of Nuitka.&lt;/p&gt;
&lt;p&gt;You may want to look into the &lt;a class="reference external" href="https://github.com/Nuitka/NUITKA-Utilities"&gt;Nuitka Utilities&lt;/a&gt; repository, which
contains many things I am working on.&lt;/p&gt;
&lt;dl class="py class"&gt;
&lt;dt class="sig sig-object py"&gt;
&lt;span class="sig-name descname"&gt;&lt;span class="pre"&gt;alert&lt;/span&gt; &lt;span class="pre"&gt;alert-primary&lt;/span&gt; &lt;span class="pre"&gt;float-md-right&lt;/span&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;img alt="../_images/jorjmckie-harald-lieder.jpg" src="../_images/jorjmckie-harald-lieder.jpg" /&gt;
&lt;/dd&gt;&lt;/dl&gt;

&lt;section id="short-biography"&gt;
&lt;h2&gt;Short Biography&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Born 1951 as Harald Lieder near the city of Leipzig&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Studied Mathematics and Physics at the Frankfurt/M
Johann-Wolfgang-Goethe University from 10/1970 through 06/1976
(Diploma in Mathematics)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Professional career overview&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;insurance company (4 years): application and systems
programming (IBM mainframe, Cobol, Assembler), data center lead&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;book wholesaler (5 years): systems programming and data center
lead (IBM mainframe)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;consulting company (until 2009): leading of or participating in
numerous large and &lt;strong&gt;very&lt;/strong&gt; large projects mostly around
banking applications, banking mergers, data center optimization
and quality assurance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;since 2009: retirement, living on Isla Margarita, Venezuela.
Enjoying my beautiful house, pursuing my hobbies: mathematics,
science theory, biological evolution theory, science fiction
(my pseudonym comes from novels by one of my favorite authors
Frank Herbert) and of course programming (maintainer of
&lt;a class="reference external" href="https://github.com/pymupdf/PyMuPDF"&gt;PyMuPDF&lt;/a&gt;, and Nuitka).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="images-from-isla-margarita"&gt;
&lt;h2&gt;Images from Isla Margarita&lt;/h2&gt;
&lt;section id="house-frontview-with-guardians"&gt;
&lt;h3&gt;House Frontview with Guardians&lt;/h3&gt;
&lt;img alt="../_images/JMK-house-frontview-with-guardians.jpg" src="../_images/JMK-house-frontview-with-guardians.jpg" /&gt;
&lt;/section&gt;
&lt;section id="in-favorite-pizzeria-with-my-wife"&gt;
&lt;h3&gt;In favorite Pizzeria with my Wife&lt;/h3&gt;
&lt;img alt="../_images/JMK-in-favorite-pizzeria-with-my-wife.jpg" src="../_images/JMK-in-favorite-pizzeria-with-my-wife.jpg" /&gt;
&lt;/section&gt;
&lt;section id="seaview-from-my-terrace"&gt;
&lt;h3&gt;Seaview from my Terrace&lt;/h3&gt;
&lt;img alt="../_images/JMK-seaview-from-my-terrace.JPG" src="../_images/JMK-seaview-from-my-terrace.JPG" /&gt;
&lt;/section&gt;
&lt;section id="sunrise-view-from-house"&gt;
&lt;h3&gt;Sunrise view from House&lt;/h3&gt;
&lt;img alt="../_images/JMK-sunrise-view-from-house.jpg" src="../_images/JMK-sunrise-view-from-house.jpg" /&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/jorj-x-mckie.html" rel="alternate"/>
    <summary>Self-Introduction Jorj McKie</summary>
    <category term="Nuitka" label="Nuitka"/>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="portrait" label="portrait"/>
    <published>2019-05-18T11:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-064.html</id>
    <title>Nuitka Release 0.6.4</title>
    <updated>2019-06-10T19:28:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-4"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release contains many bug fixes all across the board. There is also
new optimization and many organisational improvements.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;When linking very large programs or packages, with gcc compiler,
Scons can produce commands that are too large for the OS. This
happens sooner on the Windows OS, but also on Linux. We now have a
workaround that avoids long command lines by using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;sources.tmp&lt;/span&gt;&lt;/code&gt;
syntax.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Remove temporary module after its use, instead of keeping
it in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.modules&lt;/span&gt;&lt;/code&gt; where e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Quart&lt;/span&gt;&lt;/code&gt; code tripped over its
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__file__&lt;/span&gt;&lt;/code&gt; value that is illegal on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixed non-usage of our enhanced detection of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gcc&lt;/span&gt;&lt;/code&gt; version for
compilers if given as a full path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixed non-detection of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gnu-cc&lt;/span&gt;&lt;/code&gt; as a form of gcc compiler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.4: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__spec__&lt;/span&gt;&lt;/code&gt; value corrections for compiled modules
was not taking into account that there was a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__spec__&lt;/span&gt;&lt;/code&gt; value,
which can happen if something is wrapping imported modules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added implicit dependencies for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;passlib&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Added workaround for OS command line length limit in
compilation with MinGW64.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2: Revive the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;enum&lt;/span&gt;&lt;/code&gt; plugin, there are backports of the buggy
code it tries to patch up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fixup handling of SxS with non zero language id, these occur
e.g. in Anaconda.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Handle multiple PyQt plugin paths, e.g. on openSUSE this is
done, also enhanced finding that path with Anaconda on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: For &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;multiprocessing&lt;/span&gt;&lt;/code&gt; on Windows, allow the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.exe&lt;/span&gt;&lt;/code&gt;
suffix to not be present, which can happen when ran from command
line.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Better version checks for DLLs on Python3, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ctypes&lt;/span&gt;&lt;/code&gt;
helper code needs more definitions to work properly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for both &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pycryptodome&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pycryptodomex&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;chr&lt;/span&gt;&lt;/code&gt; built-in was not giving fully compatible error on
non number input.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;id&lt;/span&gt;&lt;/code&gt; built-in doesn’t raise an exception, but said
otherwise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: Proper C identifiers for names that fit into &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;latin-1&lt;/span&gt;&lt;/code&gt;,
but are not &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ascii&lt;/span&gt;&lt;/code&gt; encodings.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Windows: Catch most common user error of using compiler from one
architecture against Python from another. We now check those and
compare it, and if they do not match, inform the user directly.
Previously the compilation could fail, or the linking, with cryptic
errors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Distutils: Using setuptools and its runners works now too, not merely
only pure distutils.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Distutils: Added more ways to pass Nuitka specific options via
distutils.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.8: Initial compatibility changes to get basic tests to work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Nuitka is participating in the GSoC 2019 with 2 students, Batakrishna
and Tommy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Point people creating PRs to using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt; hook in the
template. Due to making the style issues automatic, we can hope to
encounter less noise and resulting merge problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many improvements to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt; hook were done, hopefully
completing its development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated to latest &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pylint&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;black&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;isort&lt;/span&gt;&lt;/code&gt; versions, also
added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;codespell&lt;/span&gt;&lt;/code&gt; to check for typos in the source code, but that
is not automated yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added description of how to use experimental flags for your PRs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed mirroring from Bitbucket and Gitlab, as we increasingly use
the Github organisation features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for Ubuntu Disco, removed support for Ubuntu Artful
packages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Windows: Attach data blobs as Windows resource files directly for
programs and avoid using C data files for modules or MinGW64, which
can be slow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Specialization of helper codes for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt; is being done for more types
and more thoroughly and fully automatic with Jinja2 templating code.
This does replace previously manual code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added specialization of helper codes for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; operation which is
entirely new.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added specialization of helper codes for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/code&gt; operation which is
entirely new.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dedicated nodes for specialized operations now allow to save memory
and all use type shape based analysis to predict result types and
exception control flow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better code generation for boolean type values, removing error checks
when possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better static analysis for even more type operations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fixed many kinds of typos in the code base with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;codespell&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply automatic formatting to more test runner code, these were
previously not done.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;shutil.copytree&lt;/span&gt;&lt;/code&gt; which fails to work when directory
already exists, instead provide
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka.util.FileOperations.copyTree&lt;/span&gt;&lt;/code&gt; and use that exclusively.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added new mode of operation to test runners, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;only&lt;/span&gt;&lt;/code&gt; that executes
just one test and stops, useful during development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added new mechanism for standalone tests to expression modules that
need to be importable, or else to skip the test by a special comment
in the file, instead of by coded checks in the test runner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added also for more complex cases, another form of special comment,
that can be any expression, that decides if the test makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cover also setuptools in our distutils tests and made the execution
more robust against variable behavior of distutils and setuptools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added standalone test for Urllib3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added standalone test for rsa.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added standalone test for Pmw.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added standalone test for passlib.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Again this release is a sign of increasing adoption of Nuitka. The GSoC
2019 is also showing effects, definitely will in the next release.&lt;/p&gt;
&lt;p&gt;This release has a lot of new optimization, called specialization, but
for it to really used, in many instances, we need to get away from
working on C types for variables only, and get to them beig used for
expressions more often. Otherwise much of the new special code is not
used for most code.&lt;/p&gt;
&lt;p&gt;The focus of this release has been again to open up development further
and to incorporate findings from users. The number of fixes or new use
cases working is astounding.&lt;/p&gt;
&lt;p&gt;In upcoming releases, new built-ins will be optimized, and
specialization of operations will hit more and more code now that the
infrastructure for it is in place.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-064.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2019-06-10T19:28:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/urllib3-wheel-with-nuitka.html</id>
    <title>Intro</title>
    <updated>2019-06-19T16:00:00+00:00</updated>
    <author>
      <name>Taofeng(Tommy) Li</name>
    </author>
    <content type="html">&lt;section id="intro"&gt;

&lt;p&gt;This post compares the pytest results of urllib3 to its nuitka-built
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.whl&lt;/span&gt;&lt;/code&gt; counterpart.&lt;/p&gt;
&lt;p&gt;Urllib3 standalone test have already been covered. Manual testing is now
done to compare the pytest results of a nuitka wheel built using
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; to the regular pytest of the urllib3
package. Testing is done to ensure that nuitka is building the wheel
correctly. If the pytests pass/fail in the same way, that means Nuitka
built the wheel properly. Else if the tests differ, then something is
wrong. Virtualenv is used to create a clean environment with no outside
pollution.&lt;/p&gt;
&lt;p&gt;At first, the urllib3 nuitka-wheel pytest was crashing because of the
unsafe assumption that imports will always exist (which is not the case
if exceptions are thrown). &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/413"&gt;Issue 413&lt;/a&gt; was filed to record and
fix this bug.&lt;/p&gt;
&lt;p&gt;After the fixes, the pytests were ran again and the results were very
similar:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Regular&lt;/span&gt; &lt;span class="n"&gt;pytests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;836&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt; &lt;span class="n"&gt;warnings&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;47.54&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=======&lt;/span&gt;
&lt;span class="n"&gt;Nuitka&lt;/span&gt; &lt;span class="n"&gt;wheel&lt;/span&gt; &lt;span class="n"&gt;pytests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;838&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt; &lt;span class="n"&gt;warnings&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;47.59&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=======&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The extra passes are suspicious and require more investigation into why
they happen. To make that easy, we are going to fully automate the
process and compare outputs with verbose pytest modes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="steps-to-reproduce"&gt;
&lt;h1&gt;Steps to Reproduce&lt;/h1&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Clone urllib3 and nuitka into a new folder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the urllib3 folder, issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt; &lt;span class="pre"&gt;-r&lt;/span&gt;
&lt;span class="pre"&gt;dev-requirements.txt&lt;/span&gt;&lt;/code&gt; to install its requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt;, this runs the regular
pytest for urllib3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change into the nuitka folder and issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change back into urllib3 and issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt;
to build the urllib3 wheel using nuitka. The newly built wheel should
be found in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dist&lt;/span&gt;&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use pip to uninstall the existing urllib3, then issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pip&lt;/span&gt;
&lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; followed by the newly built &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.whl&lt;/span&gt;&lt;/code&gt; filename.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt;, this runs the
nuitka-built wheel pytest for urllib3.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="uncompile-python"&gt;
&lt;h1&gt;Uncompile Python&lt;/h1&gt;
&lt;p&gt;urllib3 regular pytest:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m pytest --disable-warnings
============================= test session starts =============================
platform win32 -- Python 3.7.0, pytest-4.0.0, py-1.8.0, pluggy-0.11.0
rootdir: C:\Users\Tommy\pipenv-testing\urllib3-testing\urllib3, inifile: setup.cfg
plugins: timeout-1.3.1
collected 1295 items

test\test_collections.py ....................................s           [  2%]
test\test_compatibility.py ...                                           [  3%]
test\test_connection.py .....                                            [  3%]
test\test_connectionpool.py ............................................ [  6%]
...........................                                              [  8%]
test\test_exceptions.py .............                                    [  9%]
test\test_fields.py ...............                                      [ 11%]
test\test_filepost.py ...........                                        [ 11%]
test\test_no_ssl.py ..                                                   [ 12%]
test\test_poolmanager.py .........................                       [ 14%]
test\test_proxymanager.py ...                                            [ 14%]
test\test_queue_monkeypatch.py .                                         [ 14%]
test\test_response.py ..................sss............................. [ 18%]
...........                                                              [ 19%]
test\test_retry.py ..............................F.F.F..                 [ 21%]
test\test_ssl.py ...............................                         [ 24%]
test\test_util.py ...................................................... [ 28%]
........................................................................ [ 34%]
....................ss.s...s............................................ [ 39%]
............                                                             [ 40%]
test\test_wait.py ...ssssss                                              [ 41%]
test\contrib\test_pyopenssl.py sssssssssssssssssssssssssssssssssssssssss [ 44%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssss                                                     [ 57%]
test\contrib\test_pyopenssl_dependencies.py ss                           [ 57%]
test\contrib\test_securetransport.py sssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
sssssssssssssssssss                                                      [ 72%]
test\contrib\test_socks.py ..................                            [ 73%]
test\with_dummyserver\test_chunked_transfer.py ........                  [ 74%]
test\with_dummyserver\test_connectionpool.py ........................... [ 76%]
.......................................                                  [ 79%]
test\with_dummyserver\test_https.py .....................s....s......... [ 82%]
.................................................Uncaught exception, closing connection.
........................................................................ [ 87%]
................................sssssssssssssssssssssssssssssssssss....  [ 93%]
test\with_dummyserver\test_no_ssl.py ..                                  [ 93%]
test\with_dummyserver\test_poolmanager.py ...............                [ 94%]
test\with_dummyserver\test_proxy_poolmanager.py ................         [ 95%]
test\with_dummyserver\test_socketlevel.py .............................. [ 98%]
......................                                                   [100%]
====== 3 failed, 836 passed, 456 skipped, 113 warnings in 47.54 seconds =======
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="compiled-with-nuitka"&gt;
&lt;h1&gt;Compiled with Nuitka&lt;/h1&gt;
&lt;p&gt;nuitka wheel pytest:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m pytest --disable-warnings
============================= test session starts =============================
platform win32 -- Python 3.7.0, pytest-4.0.0, py-1.8.0, pluggy-0.11.0
rootdir: C:\Users\Tommy\pipenv-testing\urllib3-testing\urllib3, inifile: setup.cfg
plugins: timeout-1.3.1
collected 1295 items

test\test_collections.py ....................................s           [  2%]
test\test_compatibility.py ...                                           [  3%]
test\test_connection.py .....                                            [  3%]
test\test_connectionpool.py ............................................ [  6%]
...........................                                              [  8%]
test\test_exceptions.py .............                                    [  9%]
test\test_fields.py ...............                                      [ 11%]
test\test_filepost.py ...........                                        [ 11%]
test\test_no_ssl.py .F                                                   [ 12%]
test\test_poolmanager.py .........................                       [ 14%]
test\test_proxymanager.py ...                                            [ 14%]
test\test_queue_monkeypatch.py .                                         [ 14%]
test\test_response.py ..................sss............................. [ 18%]
...........                                                              [ 19%]
test\test_retry.py .....................................                 [ 21%]
test\test_ssl.py ...............................                         [ 24%]
test\test_util.py ...................................................... [ 28%]
........................................................................ [ 34%]
....................ss.s...s............................................ [ 39%]
............                                                             [ 40%]
test\test_wait.py ...ssssss                                              [ 41%]
test\contrib\test_pyopenssl.py sssssssssssssssssssssssssssssssssssssssss [ 44%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 49%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 55%]
ssssssssssssssssssss                                                     [ 57%]
test\contrib\test_pyopenssl_dependencies.py ss                           [ 57%]
test\contrib\test_securetransport.py sssssssssssssssssssssssssssssssssss [ 59%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 65%]
ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 71%]
sssssssssssssssssss                                                      [ 72%]
test\contrib\test_socks.py ..................                            [ 73%]
test\with_dummyserver\test_chunked_transfer.py ........                  [ 74%]
test\with_dummyserver\test_connectionpool.py ........................... [ 76%]
.......................................                                  [ 79%]
test\with_dummyserver\test_https.py .....................s....s......... [ 82%]
........................................................................ [ 87%]
................................sssssssssssssssssssssssssssssssssss....  [ 93%]
test\with_dummyserver\test_no_ssl.py ..                                  [ 93%]
test\with_dummyserver\test_poolmanager.py ...............                [ 94%]
test\with_dummyserver\test_proxy_poolmanager.py ................         [ 95%]
test\with_dummyserver\test_socketlevel.py .............................. [ 98%]
......................                                                   [100%]
====== 1 failed, 838 passed, 456 skipped, 113 warnings in 47.59 seconds =======
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/urllib3-wheel-with-nuitka.html" rel="alternate"/>
    <summary>This post compares the pytest results of urllib3 to its nuitka-built
.whl counterpart.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="gsoc2019" label="gsoc2019"/>
    <published>2019-06-19T16:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/dateutil-wheel-with-nuitka.html</id>
    <title>Intro</title>
    <updated>2019-07-12T18:00:00+00:00</updated>
    <author>
      <name>Taofeng(Tommy) Li</name>
    </author>
    <content type="html">&lt;section id="intro"&gt;

&lt;p&gt;This post compares the pytest results of dateutil to its nuitka-built
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.whl&lt;/span&gt;&lt;/code&gt; counterpart.&lt;/p&gt;
&lt;p&gt;Dateutil standalone test have already been covered. Manual testing is
now done to compare the pytest results of a nuitka wheel built using
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; to the regular pytest of the dateutil
package. Testing is done to ensure that nuitka is building the wheel
correctly. If the pytests pass/fail in the same way, that means Nuitka
built the wheel properly. Else if the tests differ, then something is
wrong. Virtualenv is used to create a clean environment with no outside
pollution.&lt;/p&gt;
&lt;p&gt;The pytest results were very similar:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Regular&lt;/span&gt; &lt;span class="n"&gt;pytests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="mi"&gt;1977&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;xfailed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;7.99&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt;
&lt;span class="n"&gt;Nuitka&lt;/span&gt; &lt;span class="n"&gt;wheel&lt;/span&gt; &lt;span class="n"&gt;pytests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="mi"&gt;1976&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;xfailed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;7.89&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="steps-to-reproduce"&gt;
&lt;h1&gt;Steps to Reproduce&lt;/h1&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Clone dateutil and nuitka into a new folder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the dateutil folder, issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt; &lt;span class="pre"&gt;-r&lt;/span&gt;
&lt;span class="pre"&gt;requirements-dev.txt&lt;/span&gt;&lt;/code&gt; to install its requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt;, this runs the regular
pytest for dateutil.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change into the nuitka folder and issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;develop&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change back into dateutil and issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt;
to build the dateutil wheel using nuitka. The newly built wheel
should be found in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dist&lt;/span&gt;&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use pip to uninstall the existing dateutil, then issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt;
&lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; followed by the newly built &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.whl&lt;/span&gt;&lt;/code&gt; filename.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt;, this runs the
nuitka-built wheel pytest for dateutil.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="uncompile-python"&gt;
&lt;h1&gt;Uncompile Python&lt;/h1&gt;
&lt;p&gt;dateutil regular pytest:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;=============================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;=============================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;win32&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.7.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.6.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.8.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.12.0&lt;/span&gt;
&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Users&lt;/span&gt;\&lt;span class="n"&gt;Tommy&lt;/span&gt;\&lt;span class="n"&gt;pipenv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;\&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;\&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inifile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hypothesis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.24.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cov&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.7.1&lt;/span&gt;
&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;2074&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;

&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_easter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;...........................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;................................................&lt;/span&gt;                         &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_import_star&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                                      &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_imports&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.......................&lt;/span&gt;                    &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_internals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;                                     &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_isoparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;........................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.......&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;............................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.....................&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;                                                  &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;...........................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.................................&lt;/span&gt;&lt;span class="n"&gt;xxxxxxxxxxxxxsss&lt;/span&gt;&lt;span class="o"&gt;......&lt;/span&gt;                  &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_relativedelta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.............................................&lt;/span&gt;                            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_rrule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;............................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;................................................................&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.......&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;..............&lt;/span&gt;                                                           &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;............................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........&lt;/span&gt;&lt;span class="n"&gt;sssssss&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sssssssssssssssssssssssssssssssssssssssss&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;............................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;......................................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.......................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;..........&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sssssssssssss&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;..........&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.............&lt;/span&gt;                                                            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.......&lt;/span&gt;                                      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="nb"&gt;property&lt;/span&gt;\&lt;span class="n"&gt;test_isoparse_prop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                           &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dateutil&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="nb"&gt;property&lt;/span&gt;\&lt;span class="n"&gt;test_parser_prop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;                            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;docs&lt;/span&gt;\&lt;span class="n"&gt;exercises&lt;/span&gt;\&lt;span class="n"&gt;solutions&lt;/span&gt;\&lt;span class="n"&gt;mlk_day_rrule_solution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="mi"&gt;1977&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;xfailed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;7.99&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="compiled-with-nuitka"&gt;
&lt;h1&gt;Compiled with Nuitka&lt;/h1&gt;
&lt;p&gt;nuitka wheel pytest:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;=============================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;=============================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;win32&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.7.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.6.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.8.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.12.0&lt;/span&gt;
&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Users&lt;/span&gt;\&lt;span class="n"&gt;Tommy&lt;/span&gt;\&lt;span class="n"&gt;pipenv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;\&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;\&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inifile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hypothesis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.24.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cov&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.7.1&lt;/span&gt;
&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;2073&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_easter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.......................................&lt;/span&gt;                                  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_import_star&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                                               &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_imports&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.......................&lt;/span&gt;                             &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_internals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;                                              &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_isoparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;......................................................................&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.....................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;............&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;                                                           &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;....................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................&lt;/span&gt;&lt;span class="n"&gt;xxxxxxxxxxxxxsss&lt;/span&gt;&lt;span class="o"&gt;......&lt;/span&gt;                           &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_relativedelta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.............................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;....................................&lt;/span&gt;                                     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_rrule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.....................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.......................................................&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.....&lt;/span&gt;                                                                    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;............................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........&lt;/span&gt;&lt;span class="n"&gt;ssssssssssssssss&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ssssssssssssssssssssssssssssssss&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;............................&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...................................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;...........................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;........&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;........................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................................&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................&lt;/span&gt;&lt;span class="n"&gt;sssssssssss&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ssss&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;..........&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;....................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;                                                                     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.......&lt;/span&gt;                                               &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="nb"&gt;property&lt;/span&gt;\&lt;span class="n"&gt;test_isoparse_prop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                                    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="nb"&gt;property&lt;/span&gt;\&lt;span class="n"&gt;test_parser_prop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;                                     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=============&lt;/span&gt; &lt;span class="mi"&gt;1976&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;xfailed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;7.89&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=============&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/dateutil-wheel-with-nuitka.html" rel="alternate"/>
    <summary>This post compares the pytest results of dateutil to its nuitka-built
.whl counterpart.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="gsoc2019" label="gsoc2019"/>
    <published>2019-07-12T18:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-065.html</id>
    <title>Nuitka Release 0.6.5</title>
    <updated>2019-07-30T21:52:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-5"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release contains many bug fixes all across the board. There is also
new optimization and many organisational improvements.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python3.4+: Fixed issues with modules that exited with an exception,
that could lead to a crash, dealing with their &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__spec__&lt;/span&gt;&lt;/code&gt; value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.4+: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__loader__&lt;/span&gt;&lt;/code&gt; method &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;is_package&lt;/span&gt;&lt;/code&gt; had the wrong
signature.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.6+: Fix for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;async&lt;/span&gt; &lt;span class="pre"&gt;with&lt;/span&gt;&lt;/code&gt; being broken with uncompiled
generators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.5+: Fix for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;coroutines&lt;/span&gt;&lt;/code&gt; that got their awaited object
closed behind their back, they were complaining with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RuntimeError&lt;/span&gt;&lt;/code&gt;
should they be closed themselves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, constant values &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt; in a bool target that could not be
optimized away, lead to failure during code generation.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for sha224, sha384, sha512 in crypto
package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: The icon wasn’t properly attached with MinGW64 anymore, this
was a regression.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: For compiler outputs, also attempt preferred locale to
interpret outputs, so we have a better chance to not crash over MSVC
error messages that are not UTF-8 compatible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Handle filename collisions for generated code too, Nuitka now
treats all filesystems for all OS as case insensitive for this
purpose.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Added support for tolerant &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;del&lt;/span&gt;&lt;/code&gt; in class exception
handlers.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;

        &lt;span class="c1"&gt;# At exception handler exit, &amp;quot;e&amp;quot; is deleted if still assigned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We already were compatible for functions and modules here, but due to
the special nature of class variables really living in dictionaries,
this was delayed. But after some other changes, it was now possible
to solve this TODO.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for Python3 variant of Pmw.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the NumPy plugin now handles more installation types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the qt plugin now handles multiple library paths.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, need &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libm&lt;/span&gt;&lt;/code&gt; for some Anaconda variants too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, left over bytecode from plugins could crash the plugin loader.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkgutil.iter_packages&lt;/span&gt;&lt;/code&gt; is now working for loaded packages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python3.8: Followed some of the changes and works with beta2 as a
Python 3.7, but none of the new features are implemented yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for Torch, Tensorflow, Gevent, Sklearn, with a new
Nuitka plugin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for “hinted” compilation, where the used modules are
determined through a test run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for including TCL on Linux too.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added support for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;any&lt;/span&gt;&lt;/code&gt; built-in. This handles a wide range of
type shapes and constant values at compile time, while also having
optimized C code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate code for some &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CLONG&lt;/span&gt;&lt;/code&gt; operations in preparation of
eventual per expression C type selection, it then will allow to avoid
objects in many instances.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Avoid creating link libraries for MinGW64 as these have
become unnecessary is the mean time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Packages: Do not export entry points for all included packages, only
for the main package name it is importable as.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added support for Visual Studio 2019 as a C compiler backend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved plugin documentation describing how to create plugins for
Nuitka even better.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The is now a mode for running the tests called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;all&lt;/span&gt;&lt;/code&gt; which will
execute all the tests and report their errors, and only fail at the
very end. This doesn’t avoid wasting CPU cycles to report that e.g.
all tests are broken, but it allows to know all errors before fixing
some.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added repository for Fedora 30 for download.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added repository for openSUSE 15.1 for download.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask people to compile hello world program in the Github issue
template, because many times, they have setup problems only.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Visual Studio Code is now the recommended IDE and has integrated
configuration to make it immediately useful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated internal copy of Scons to 3.1.0 as it incorporates many of
our patches.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changed wordings for optimization to use “lowering” as the only term
to describe an optimization that simplifies.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Plugins: Major refactoring of Nuitka plugin API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: To locate module kind, use core Nuitka code that handles
more cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The test suite runners are also now autoformatted and checked with
PyLint.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Scons file is now PyLint clean too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;build_definitions.h&lt;/span&gt;&lt;/code&gt; to be included everywhere, in that it’s
only used in the main program part. This makes C linter hate us much
less for using a non-existent file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Run the tests using Travis on macOS for Python2 too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More standalone tests have been properly whitelisting to cover
openSSL usage from local system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Disabled PySide2 test, it’s not useful to fail and ignore it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tests: Fixups for coverage testing mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tests: Temporarily disable some checks for constants code in
reflected tests as it only exposes &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;marshal&lt;/span&gt;&lt;/code&gt; not being
deterministic.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This release is huge again. Main points are compatibility fixes, esp. on
the coroutine side. These have become apparently very compatible now and
we might eventually focus on making them better.&lt;/p&gt;
&lt;p&gt;Again, GSoC 2019 is also showing effects, and will definitely continue
to do soin the next release.&lt;/p&gt;
&lt;p&gt;Many use cases have been improved, and on an organisational level, the
adoption of Visual Studio Code seems an huge improvement to have a well
configured IDE out of the box too.&lt;/p&gt;
&lt;p&gt;In upcoming releases, more built-ins will be optimized, and hopefully
the specialization of operations will hit more and more code with more
of the infrastructure getting there.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-065.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2019-07-30T21:52:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/tommy-gsoc-summary.html</id>
    <title>Intro</title>
    <updated>2019-08-23T07:00:00+00:00</updated>
    <author>
      <name>Taofeng(Tommy) Li</name>
    </author>
    <content type="html">&lt;section id="intro"&gt;

&lt;p&gt;As Google Summer of Code (GSoC) is coming to an end, I am writing this
blog post as a final summary describing all the work I have done as well
as my experiences in this program.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary-of-my-work"&gt;
&lt;h1&gt;Summary of My Work&lt;/h1&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/314"&gt;#314 run_all.py new special-comment mechanism &amp;amp; Urllib3Using.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Before GSoC started, I looked around for whatever work I could
help with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this pull request, I added a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;checkRequirements&lt;/span&gt;&lt;/code&gt; function for
the Nuitka standalone test suite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This function checks for special-comments at the top of standalone
tests in the format of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#&lt;/span&gt; &lt;span class="pre"&gt;nuitka-skip-unless-expression:&lt;/span&gt;
&lt;span class="pre"&gt;expression&lt;/span&gt; &lt;span class="pre"&gt;to&lt;/span&gt; &lt;span class="pre"&gt;be&lt;/span&gt; &lt;span class="pre"&gt;evaluated&lt;/span&gt;&lt;/code&gt; OR &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#&lt;/span&gt; &lt;span class="pre"&gt;nuitka-skip-unless-imports:&lt;/span&gt;
&lt;span class="pre"&gt;module1,module2,...&lt;/span&gt;&lt;/code&gt; and will decide whether to skip a test
depending on if its specified requirements are met.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In addition, standalone test &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Urllib3Using.py&lt;/span&gt;&lt;/code&gt; was created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This pull request was soon merged and allowed me the lucky
opportunity of GSoC 2019 with Nuitka :)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/339"&gt;#339 Standalone tests for botocore &amp;amp; boto3 + fix to Urllib3Using.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This PR was also created before the start of GSoC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone test &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Boto3Using.py&lt;/span&gt;&lt;/code&gt; was created using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;moto&lt;/span&gt;&lt;/code&gt; to
mock AWS calls which did not turn out well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Urllib3Using.py&lt;/span&gt;&lt;/code&gt; with the addition of python version
checks as a fix to &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/373"&gt;Issue #373&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://nuitka.net/posts/urllib3-wheel-with-nuitka.html"&gt;Urllib3 Wheel with Nuitka Pytest Results&lt;/a&gt; and
&lt;a class="reference external" href="https://nuitka.net/posts/dateutil-wheel-with-nuitka.html"&gt;Python-Dateutil Wheel with Nuitka Pytest Results&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At the start of GSoC, I performed manual pytest comparison for
PyPI packages &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;urllib3&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dateutil&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The findings of my testing were documented in these postings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manual testing compares the pytest results of an installed nuitka
wheel built using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; to the regular
pytest results of each package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Testing is done to ensure that nuitka is building the wheel
correctly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the pytests pass/fail in the same way, that means Nuitka built
the wheel properly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Else if the tests differ, then something is wrong.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Virtualenv is used to create a clean environment with no outside
pollution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Over the course of performing manual testing, I became familiar
with the use of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wheel&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A bug was found with the package &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;urllib3&lt;/span&gt;&lt;/code&gt; bdist and I created
&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/413"&gt;Issue #413&lt;/a&gt; to
document the bug.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/440"&gt;#440 Automating PyPI Wheel Pytest&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;After familiarizing myself with how &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wheel&lt;/span&gt;&lt;/code&gt;, and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest&lt;/span&gt;&lt;/code&gt; work, I started to work on a script which would
automate the pytest comparison for top PyPI packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script first uses &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt;&lt;/code&gt; to update each package if it is
already existing in the local cache, else it will &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt; &lt;span class="pre"&gt;clone&lt;/span&gt;&lt;/code&gt;
that package into the local cache.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script then uses calls to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;os.system&lt;/span&gt;&lt;/code&gt; to automate the
creation of a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt; which is then used to install
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; the package’s requirements (if any)
for running pytest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script then handles each package depending on different needs
before building a regular wheel with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt;
&lt;span class="pre"&gt;bdist_wheel&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This wheel is then installed into the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt;, after which
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;subprocess.Popen&lt;/span&gt;&lt;/code&gt; is used to run and capture the output of
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt; into a string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The script then resets the package to its original state and
builds a nuitka-compiled wheel using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt;
&lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This compiled wheel is then installed into the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;virtualenv&lt;/span&gt;&lt;/code&gt;,
after which &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;subprocess.Popen&lt;/span&gt;&lt;/code&gt; is used to run and capture the
output of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;pytest&lt;/span&gt; &lt;span class="pre"&gt;--disable-warnings&lt;/span&gt;&lt;/code&gt; into another
string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The two strings containing pytest outputs are then compared to
find differences.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If no differences are found, this means &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; worked
properly. Else Nuitka compilation did something wrong.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The above process is repeated for each suitable PyPI package from
the PyPI top 50. (Some packages are left out if they do not
contain a test suite or if they do not need to be tested)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the end, a colored summary is given for all the packages
tested.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This automation script is meant to be run regularly to inform
developers of Nuitka regressions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/477"&gt;Issue #477 Unable to compile modules listed under
unworthy_namespaces&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Raised due to package &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pycparser&lt;/span&gt;&lt;/code&gt; failing in the automated test
suite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This issue will be addressed in the future.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/479"&gt;Issue #479 bdist_nuitka fails for packages containing py_modules
only&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While I worked on &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/440"&gt;#440&lt;/a&gt;, I found a bug with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; failing on PyPI packages containing py_modules
only.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This bug occurs due to Nuitka making the assumption that a main
package always exists for all packages. However, some packages
contain only a main module and not a main package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applies to PyPI packages &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;decorator&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ipaddress&lt;/span&gt;&lt;/code&gt;, and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyparsing&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/483"&gt;#483 Add support for py_modules_only compilation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This pull request changes &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_nuitka.py&lt;/span&gt;&lt;/code&gt; and various other
files to fix &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/479"&gt;Issue #479&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Checks are added for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; command to see if a main
package exists. If there is not a main package, it will set its
compile target to the main module instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This also addressed the case of a package with both a main package
and a main module, in which case both are included inside the
resulting wheel.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In addition, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;distutils&lt;/span&gt;&lt;/code&gt; examples &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;py_modules_only&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;package_and_module&lt;/span&gt;&lt;/code&gt; were created and added for future testing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;During this PR, I found an import bug in Nuitka and hotfixed it
with &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/487"&gt;#487 Fixup_import_module&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/484"&gt;#484 PyPI Standalone Tests&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This pull request adds more standalone tests for each top PyPI
package.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/495"&gt;#495 Improve pypi automation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Improves the PyPI test suite created in &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/440"&gt;#440&lt;/a&gt; with functional
improvements, readability improvements, and added documentation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="things-i-learned"&gt;
&lt;h1&gt;Things I Learned&lt;/h1&gt;
&lt;p&gt;Before GSoC, I was very uncomfortable with working inside a terminal. I
was unfamiliar with many basic bash commands because I simply did not
have any prior professional industrial experiences. I was also very
unfamiliar with the Git flow, which is evident in the messy commit
histories of my earliest pull requests.&lt;/p&gt;
&lt;p&gt;As I continued throughout my GSoC journey, however, I became much more
comfortable with working inside the terminal as well as using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt;&lt;/code&gt; as
a version-control system (shoutout to my mentor Kay Hayen for helping me
through all the annoying conflicts).&lt;/p&gt;
&lt;p&gt;Although I am still no expert, I can confidently say that I am now far
more proficient working with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt;&lt;/code&gt; and inside the terminal.&lt;/p&gt;
&lt;p&gt;In addition, I became much more familiar with many of the most popular
PyPI packages as well as the inner workings of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/code&gt;, which I
believe will help me go very far in my career as a software developer.&lt;/p&gt;
&lt;p&gt;Overall, the GSoC experience was truly astounding and I am more than
thankful to my mentor Kay Hayen as well as Google for making this
amazing program possible.&lt;/p&gt;
&lt;p&gt;Yours, &lt;a class="reference external" href="https://github.com/tommyli3318"&gt;Tommy&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/tommy-gsoc-summary.html" rel="alternate"/>
    <summary>As Google Summer of Code (GSoC) is coming to an end, I am writing this
blog post as a final summary describing all the work I have done as well
as my experiences in this program.</summary>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="Nuitka" label="Nuitka"/>
    <category term="tests" label="tests"/>
    <category term="pypi" label="pypi"/>
    <category term="pytest" label="pytest"/>
    <category term="automation" label="automation"/>
    <category term="standalone" label="standalone"/>
    <published>2019-08-23T07:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/bksahus-gsoc-wrap-up.html</id>
    <title>bksahu’s GSoC warp up</title>
    <updated>2019-08-25T19:55:00+00:00</updated>
    <author>
      <name>Batakrishna Sahu</name>
    </author>
    <content type="html">&lt;section id="bksahu-s-gsoc-warp-up"&gt;

&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;GSoC 2019 has almost come to an end! It’s the time to wrap up this mega
event started back in May 2019. Under the mentorship of Mentor Hayen, my
learning experience has undergone a roller-coaster ride and it has not
only boosted my growth as a developer but also as an individual. Over
the last 3 months the following are my major contributions to this
project:&lt;/p&gt;
&lt;section id="built-ins-optimizations"&gt;
&lt;h2&gt;Built-ins Optimizations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;“any”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/246"&gt;PR #246&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;nuitka.nodes.BuiltinAnyNodes&lt;/cite&gt; node added to optimize the “any”
built-in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developed an algorithm to predict the “any” for arguments
having repetitive values at compile time. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;any([0]*255) -&amp;gt; False&lt;/p&gt;
&lt;p&gt;any([False, False, True]) -&amp;gt; True&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extended support for &lt;cite&gt;range&lt;/cite&gt;, &lt;cite&gt;set&lt;/cite&gt; and &lt;cite&gt;dict&lt;/cite&gt; built-ins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added the optimized C side support too&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added a method &lt;cite&gt;getMetaClassBase&lt;/cite&gt; to make Python 2 and Python 3
compatible while working with metaclasses.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Issue reported and closed &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/issues/349"&gt;Issue #349&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Created a new module &lt;cite&gt;nuitka.nodes.IterationHandles&lt;/cite&gt; to work
with iterables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support of Iteration for non-mutable types.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;“all”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/407"&gt;PR #407&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Added &lt;cite&gt;nuitka.nodes.BuiltinAllNodes&lt;/cite&gt; to optimize the “all”
built-ins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developed an algorithm similar to “any” to predict the “all”
arguments. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;all([0, 0, 1]) -&amp;gt; False&lt;/p&gt;
&lt;p&gt;all([True]*100) -&amp;gt; True&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Other similar optimizations are done like “any” built-in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, added a new testing module
&lt;cite&gt;tests.optimizations.CommonOptimizations&lt;/cite&gt; to test the built-ins
optimizations at the same place.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;“abs”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/419"&gt;PR #419&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added new operation node &lt;cite&gt;ExpressionOperationAbs&lt;/cite&gt; to optimize
the &lt;cite&gt;abs&lt;/cite&gt; built-in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manually added &lt;cite&gt;shapeSlotAbs&lt;/cite&gt; to different shapes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally pre-computed the compile time constant &lt;cite&gt;abs&lt;/cite&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;“max” and “min”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/442"&gt;PR #442&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This PR is work in progress and is half complete.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is the first optimizations in which I used reformulations
instead of added in a new node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pseudo-code of “min” reformulation:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;tmp_arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
 &lt;span class="n"&gt;tmp_arg2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
 &lt;span class="n"&gt;tmp_arg3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
 &lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg1&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;keyfunc&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# can be decided during re-formulation&lt;/span&gt;
     &lt;span class="n"&gt;tmp_key_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;tmp_key_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg2&lt;/span&gt;
         &lt;span class="n"&gt;tmp_key_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt;
     &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;tmp_key_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg3&lt;/span&gt;
         &lt;span class="n"&gt;tmp_key_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_key_candidate&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmp_arg2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg2&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmp_arg3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_arg3&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding support for &lt;cite&gt;keyfunc&lt;/cite&gt; is pending&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;“zip”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/462"&gt;PR #462&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;This built-in uses both types of optimizations that the
previous built-ins optimizations used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;zip&lt;/cite&gt; for Python 2 uses the reformulations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pseudo-code of “zip” reformulation:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="c1"&gt;# First assign, to preserve order of execution,&lt;/span&gt;
&lt;span class="c1"&gt;# the arguments might be complex expressions.&lt;/span&gt;
&lt;span class="n"&gt;tmp_arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;tmp_arg2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;tmp_arg3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;tmp_iter_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tmp_iter_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tmp_iter_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_arg3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# could be more&lt;/span&gt;
&lt;span class="n"&gt;tmp_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tmp_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;
                 &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_iter_1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_iter_2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_iter_3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="k"&gt;pass&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tmp_result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;zip&lt;/cite&gt; for Python 3 needs a new node that calls the &lt;cite&gt;zip&lt;/cite&gt;
because unlike &lt;cite&gt;zip&lt;/cite&gt; in Python 2, &lt;cite&gt;zip&lt;/cite&gt; in Python 3 returns a
&lt;cite&gt;zipobject&lt;/cite&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="test-suite"&gt;
&lt;h2&gt;Test suite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;Search mode “All”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/378"&gt;PR #378&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;In the test suite, I added a new search mode “all” that will
test all the modules and return all the results at once. For
example:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./tests/basics/run_all.py all
   Using concrete python &lt;span class="m"&gt;2&lt;/span&gt;.7.12 on x86_64
   Comparing output of &lt;span class="s1"&gt;&amp;#39;Asserts.py&amp;#39;&lt;/span&gt; using &lt;span class="s1"&gt;&amp;#39;/usr/bin/python&amp;#39;&lt;/span&gt; with flags silent, expect_success, remove_output,     recurse_all, original_file, cpython_cache, plugin_enable:pylint-warnings ...
   .
   .
   .
   .
   Total &lt;span class="m"&gt;0&lt;/span&gt; error&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; found.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;Search mode “Only”: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/333"&gt;PR #333&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added “only” search mode to test only a single module. For
example:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./tests/basics/run_all.py only BuiltinsTest.py
   Using concrete python &lt;span class="m"&gt;2&lt;/span&gt;.7.12 on x86_64
   Skipping Asserts.py
   Skipping Assignments.py
   Skipping BigConstants.py
   Skipping Branching.py
   Skipping BuiltinOverload.py
   Skipping BuiltinSuper.py
   Comparing output of &lt;span class="s1"&gt;&amp;#39;BuiltinsTest.py&amp;#39;&lt;/span&gt; using &lt;span class="s1"&gt;&amp;#39;/usr/bin/python&amp;#39;&lt;/span&gt; with flags silent, expect_success, remove_output, recurse_all, original_file, cpython_cache, plugin_enable:pylint-warnings ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Reported and closed Issue #334: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/336"&gt;PR #336&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fixed the autoformat bug by reading and writing the files in
bytes instead of string.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Nuitka git work flow: &lt;a class="reference external" href="https://github.com/Nuitka/Nuitka/pull/485"&gt;PR #485&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And other minor doc fixes are added with their respective pull requests.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-i-learned"&gt;
&lt;h2&gt;What I learned&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Learned the software engineering principles and how to keep my work
clean.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I also learned how to effectively use software designing principles
like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;
and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/KISS_principle"&gt;KISS&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Got exposed to Nuitka internals which helped me to better understand
how compilers in general work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explored how CPython works internally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Got some great advice from Mentor Hayen about starting my
professional career in Software engineering.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, it was a great experience to be a part of Nuitka :)&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yours,&lt;/div&gt;
&lt;div class="line"&gt;Batakrishna&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/bksahus-gsoc-wrap-up.html" rel="alternate"/>
    <summary>Hello everyone!</summary>
    <category term="gsoc2019" label="gsoc2019"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2019-08-25T19:55:00+00:00</published>
  </entry>
</feed>
