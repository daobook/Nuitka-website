<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://nuitka.net</id>
  <title>Nuitka Blog - Posted in 2021</title>
  <updated>2022-01-09T15:10:10.013171+00:00</updated>
  <link href="https://nuitka.net"/>
  <link href="https://nuitka.net/blog/2021/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-0611.html</id>
    <title>Nuitka Release 0.6.11</title>
    <updated>2021-01-25T10:17:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-11"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release is a massive improvement in many ways with lots of bug
fixes and new features.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pyi&lt;/span&gt;&lt;/code&gt; file parser didn’t handle relative imports. Fixed
in 0.6.10.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, multiprocessing plugin was not working reliable
following of imports from the additional entry point. Fixed in
0.6.10.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv: Workaround parsing issue with our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;setup.py&lt;/span&gt;&lt;/code&gt; to allow
installation from Github. Fixed in 0.6.10.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Merging of branches in optimization could give indetermistic results
leading to more iterations than necessary. Fixed in 0.6.10.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Avoid profile powershell when attempting to resolve
symlinks. Fixed in 0.6.10.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, always check for stdin, stdout, and stderr presence.
This was so far restricted to gui mode applications, but it seems to
be necessary in other situations too. Fixed in 0.6.10.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2: Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--trace-execution&lt;/span&gt;&lt;/code&gt; was not working for standalone
mode but can be useful for debugging. Fixed in 0.6.10.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Onefile could run into path length limits. Fixed in 0.6.10.3
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: The winlib gcc download link became broken and was updated.
Fixed in 0.6.10.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: The “__main__” module was not triggering all plugin hooks,
but it needs to for completeness.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Fix, symlinked Python installations on Windows were not
working, with dependency walker being unable to look into these.
Fixed in 0.6.10.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Fix support for numpy on Windows and macOS, the plugin
failed to copy important DLLs. Fixed in 0.6.10.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: For versions before 3.7, the symlink resolution also needs
to be done, but wasn’t handling the bytes output yet. Fixed in
0.6.10.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, folder based inclusion would both pick up namespace folders and
modules of the same name, crashing the compilation due to conflicts.
Fixed in 0.6.10.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--lto&lt;/span&gt;&lt;/code&gt; wasn’t used for clang on non-Windows yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the order of locals dict releases wasn’t enforced, which could
lead to differences that break caching of C files potentially. Fixed
in 0.6.10.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;hash&lt;/span&gt;&lt;/code&gt; nodes didn’t consider if their argument was raising,
even if the type of the argument was &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt; and therefore the
operation should not. Fixed in 0.6.10.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, need to copy type shape and escape description for the
replacement inverted comparisons when used with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;not&lt;/span&gt;&lt;/code&gt;, otherwise
the compilation can crash as these are expected to be present at all
times. Fixed in 0.6.10.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, some complex constant values could be confused, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-0j&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0j&lt;/span&gt;&lt;/code&gt;. These corner cases were not properly considered in the
constant loading code, only for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt; so far.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Fix, bytecode only standard library modules were not
working. This is at least used with Fedora 33.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux: Fix, extension modules compiled with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--lto&lt;/span&gt;&lt;/code&gt; were not
working.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Retry if updating resources fails due to Virus checkers
keeping files locked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Pre- and postload code of modules should not be allowed to
cause &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ImportError&lt;/span&gt;&lt;/code&gt;, as these will be invisible to the other parts
of optimization, instead make them unraisable error traces.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Adding missing import for SciPy 1.6 support.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, only export required symbols when using MinGW64 in
module mode.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python3.9: Added official support for this version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: Added command line options to include data files. These are
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-package-data&lt;/span&gt;&lt;/code&gt; which will copy all non-DLLs and
non-Python files of package names matching the pattern given. And
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-data-file&lt;/span&gt;&lt;/code&gt; takes source and relative target file paths
and copies them. For onefile this is the only way to include files,
for standalone mode they are mostly a convenience function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: Added mode where the file is unpacked to a temporary folder
before running instead of doing it to appdata.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: Added linux specific options &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--linux-onefile-icon&lt;/span&gt;&lt;/code&gt; to
allow provision of an icon to use in onefile mode on Linux, so far
this was only available as the hard coded path to a Python icon,
which also didn’t exist on all platforms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Major logging cleanup. Everything is now using our tracing
classes and even error exits go through there and are therefore
colored if possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Make it easier to integrate commercial plugins, now only an
environment variable needs to point to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Enhanced option parsing gives notes. This complains about options
that conflict or that are implied in others. Trying to catch more
usage errors sooner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Ignore exceptions in buggy plugin code, only warn about them
unless in debug mode, where they still crash Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scons: More complete scons report files, includes list values as well
and more modes used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt; is now included and no longer used from the
system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Output for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; results got improved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enhanced support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clang&lt;/span&gt;&lt;/code&gt;, on Windows if present near a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gcc.exe&lt;/span&gt;&lt;/code&gt; like it is the case for some winlibs downloads, it will
be used. To use it provide &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--mingw64&lt;/span&gt; &lt;span class="pre"&gt;--clang&lt;/span&gt;&lt;/code&gt; both. Without the
first one, it will mean &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clangcl.exe&lt;/span&gt;&lt;/code&gt; which uses the MSVC compiler
as a host.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Some modules had very slow load times, e.g. if they used many list
objects due to linear searches for memory deduplication of objects.
We now have dictionaries of practically all constant objects loaded,
making these more instant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use less memory at compile time due using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__slots__&lt;/span&gt;&lt;/code&gt; for all node
types, finally figured out, how to achieve this with multiple
inheritance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use hedley for compiler macros like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unlikely&lt;/span&gt;&lt;/code&gt; as they know best
how to do these.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Special case the merging of 2 branches avoiding generic code and
being much faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hard imports have better code generated, and are being optimized into
for the few standard library modules and builtin modules we handle,
they also now annotate the type shape to be module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No longer annotate hard module import attribute lookups as control
flow escapes. Not present attributes are changed into static raises.
Trust for values is configured for a few values, and experimental.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid preloaded packages for modules that have no side effects and
are in the standard library, typically &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pth&lt;/span&gt;&lt;/code&gt; files will use e.g.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;os&lt;/span&gt;&lt;/code&gt; but that’s not needed to be preserved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;incbin&lt;/span&gt;&lt;/code&gt; for including binary data through inline assembly of
the C compiler. This covers many more platforms than our previous
linker option hacks, and the fallback to generated C code. In fact
everything but Windows uses this now.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Windows: For Scons we now require a Python 3.5 or higher to be
installed to use it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Removed support for gcc older than version 8. This
specifically affects CondaCC and older MinGW64 installations. Since
Nuitka can now download the MinGW64 10, there is no point in having
these and they cause issues.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We took over the maintenance of clcache as Nuitka/clcache which is
not yet ready for public consumption, but should become the new
source of clache in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include an inline copy of clcache in Nuitka and use it on Windows for
MSVC and ClangCL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed compatibility older aliases of follow option, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--recurse-*&lt;/span&gt;&lt;/code&gt;
and require &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--follow-*&lt;/span&gt;&lt;/code&gt; options to be used instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For pylint checking, the tool now supports a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--diff&lt;/span&gt;&lt;/code&gt; mode where
only the changed files get checked. This is much faster and allows to
do it more often before commit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check the versions of isort and black when doing the autoformat to
avoid using outdated versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handling missing pylint more gracefully when checking source code
quality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to use the codespell tool with Python3 and make sure to
error exit when spelling problems were found, so we can use this in
Github actions too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed Travis config, we now only use Github actions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed landscape config, it doesn’t really exist anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bumped all PyPI dependnecies to their latest versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recommend ccache on Debian, as we now consider the absence of ccache
something to warn about.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: The DLLs asked for by plugins that are not found are no
longer warned about.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow our checker and format tools to run on outside of tree code. We
are using that for Nuitka/clcache.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for Fedora 33 and openSUSE 15.3, as well as Ubuntu
Groovy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Check if Windows SDK is installed for MSVC and ClangCL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Enhanced wording in case no compiler was found. No longer
tell people how to manually install MinGW64, that is no longer
necessary and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pywin32&lt;/span&gt;&lt;/code&gt; is not needed to detect MSVC, so it’s not
installed if not found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Detect “embeddable Python” by missing include files, and reject it
with proper error message.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added onefile and standalone as a use case to the manual and put also
the DLL and data files problems as typically issues.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Avoid decimal and string comparisons for Python versions checks,
these were lazy and are going to break once 3.10 surfaces. In testing
we now use tuples, in Nuitka core hexacimal values much like CPython
itself does.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stop using subnode child getters and setters, and instead only use
subnode attributes. This was gradually changed so far, but in this
release all remaining uses have migrated. This should also make the
optimization stage go faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change node constructors to not use a decorator to resolve conflicts
with builtin names, rather handle these with manual call changes, the
decorator only made it difficult to read and less performant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move safe string helpers to their own dedicated helper file, allowing
for reuse in plugin code that doesn’t want to use all of Nuitka C
helpers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added utils code for inline copy imports, as we use that for quite a
few things now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Further restructured the Scons files to use more common code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: The module name objects now reject many &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt; specific
APIs that ought to not be used, and the code got changed to use these
instead, leading to cleaner and more correct usages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using named tuples to specify included data files and entry points.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkgutil&lt;/span&gt;&lt;/code&gt; in plugins to scan for modules rather than listing
directories.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;New option to display executed commands during comparisons.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added test suite for onefile testing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This release has seen Python3.9 and Onefile both being completed. The
later needs compression added on Windows, but that can be added in a
coming release, for now it’s fully functional.&lt;/p&gt;
&lt;p&gt;The focus clearly has been on massive cleanups, some of which will
affect compile time performance. There is relatively little new
optimization otherwise.&lt;/p&gt;
&lt;p&gt;The adoption of clcache enables a very fast caching, as it’s now loaded
directly into the Scons process, avoiding a separate process fork.&lt;/p&gt;
&lt;p&gt;Generally a lot of polishing has been applied with many cleanups
lowering the technical debt. It will be interesting to see where the
hard module imports can lead us in terms of more optimization. Static
optimization of the Python version comparisons and checks is needed to
lower the amount of imports to be processed.&lt;/p&gt;
&lt;p&gt;Important fixes are also included, e.g. the constants loading
performance was too slow in some cases. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;multiprocessing&lt;/span&gt;&lt;/code&gt; on
Windows and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; plugins were regressed and finally everything
ought to be back to working fine.&lt;/p&gt;
&lt;p&gt;Future work will have to aim at enhanced scalability. In some cases,
Nuitka still takes too much time to compile if projects like Pandas
include virtually everything installed as an option for it to use.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-0611.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2021-01-25T10:17:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-0612.html</id>
    <title>Nuitka Release 0.6.12</title>
    <updated>2021-02-16T09:24:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-12"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release is yet again a massive improvement in many ways with lots
of bug fixes and new features.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows: Icon group entries were not working properly in some cases,
leading to no icon or too small icons being displayed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: The PyQt implicit dependencies were broken. Fixed in
0.6.11.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: The datafile collector plugin was broken. Fixed in
0.6.11.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for newer forms of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;matplotlib&lt;/span&gt;&lt;/code&gt; which
need a different file layout and config file format. Fixed in
0.6.11.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: If there was an error during loading of the module or
plugin, it could still be attempted for use. Fixed in 0.6.11.1
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Disable notes given by gcc, these were treated as errors. Fixed in
0.6.11.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, spaces in gcc installation paths were not working.
Partially fixed in 0.6.11.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux: Fix, missing onefile icon error message was not complete.
Fixed in 0.6.11.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Workaround &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zmq&lt;/span&gt;&lt;/code&gt; problem on Windows by duplicating a
DLL in both expected places. Fixed in 0.6.11.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dill-compat&lt;/span&gt;&lt;/code&gt; plugin wasn’t working anymore. Fixed
in 0.6.11.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix mistaken usage of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sizeof&lt;/span&gt;&lt;/code&gt; for wide character buffers.
This caused Windows onefile mode in temporary directory. Fixed in
0.6.11.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, checking subfolder natured crashed with different
drives on Windows. Fixed in 0.6.11.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, usage from MSVC prompt was no longer working, detect
used SDK properly. Fixed in 0.6.11.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, old clcache installation uses pth files that prevented
our inline copy from working, workaround was added.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Also specify stack size to be used when compiling with gcc
or clang.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, claim of Python 3.9 support also in PyPI metadata was missing.
Fixed in 0.6.11.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.9: Subscripting &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;type&lt;/span&gt;&lt;/code&gt; for annotations wasn’t yet
implemented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.9: Better matching of types for metaclass selection, generic
aliases were not yet working, breaking some forms of type annotations
in base classes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Allow selecting &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--msvc-version&lt;/span&gt;&lt;/code&gt; when a MSVC prompt is
currently activated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Do not fallback to using gcc when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--msvc-version&lt;/span&gt;&lt;/code&gt; has
been specified. Instead it’s an error if that fails to work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.6+: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;del&lt;/span&gt; &lt;span class="pre"&gt;()&lt;/span&gt;&lt;/code&gt; statements, these have no
effect, but were crashing Nuitka.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="c1"&gt;# standard form&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="c1"&gt;# same as del a; del b&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# braces are allowed&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# allowed for consistency, but wasn&amp;#39;t working.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glfw&lt;/span&gt;&lt;/code&gt; through a dedicated plugin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Added support for Python3 from system and CPython official
download for latest OS version.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;UI: With &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tqdm&lt;/span&gt;&lt;/code&gt; installed alongside Nuitka, experimental progress
bars are enabled. Do not use `` –show-progress`` or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--verbose&lt;/span&gt;&lt;/code&gt; as
these might have to disable it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Added APIs for final processing of the result and onefile
post processing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: On Windows, the Python process terminates with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;KeyboardInterrupt&lt;/span&gt;&lt;/code&gt; when the user sends CTRL-break, CTRL-C,
shutdown or logoff signals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: On Windows, in case of the launching process terminating
unexpectedly, e.g. due to Taskmanager killing it, or a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;os.sigkill&lt;/span&gt;&lt;/code&gt;
resulting in that, the Python process still terminates with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;KeyboardInterrupt&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Now can select icons by index from files with multiple
icons.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Avoid global passes caused by module specific optimization. The
variable completeness os now traced per module and function scope,
allowing a sooner usage. Unused temporary variables and closure
variables are remove immediately. Recognizing possible auto releases
of parameter variables is also instantly.&lt;/p&gt;
&lt;p&gt;This should bring down current passes from 5-6 global passes to only
2 global passes in the normal case, reducing frontend compile times
in some cases massively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better unary node handling. Dedicated nodes per operation allow for
more compact memory usage and faster optimization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Detect flow control and value escape for the repr of node based on
type shape.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enhanced optimization of caught exception references, these never
raise or have escapes of control flow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exception matching operations are more accurately annotated, and may
be recognized to not raise in more cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added optimization for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;issubclass&lt;/span&gt;&lt;/code&gt; built-in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed scons caching as used on Windows entirely. We should either
be using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; automatically now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__slots__&lt;/span&gt;&lt;/code&gt; for all node classes. In some cases,
mixins were preventing the feature from being it. We now enforce
their correct specification of slots, which makes sure we can’t miss
it anymore. This should again gain more speed and save memory at
frontend compile time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scons: Enhanced gcc version detection with improved caching behavior,
this avoids querying the same gcc binary twice.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The description of Nuitka on PyPI was absent for a while. Added back
by adding long description of the project derived from the README
file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid terms &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;blacklist&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;whilelist&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;slave&lt;/span&gt;&lt;/code&gt; in the Nuitka
code preferring &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;blocklist&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ignorelist&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;child&lt;/span&gt;&lt;/code&gt; instead,
which are actually more clear anyway. We follow a general trend to do
this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configured the inline copy of Scons so pylance has an easier time to
find it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The git commit hook had stopped applying diffs with newest git,
improved that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated description for adding new CPython test suite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using https URLs for downloading dependency walker, for it to be more
secure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The commit hook can now be disabled, it’s in the Developer Manual how
to do it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Moved unary operations to their own module, the operators module was
getting too crowded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The scons files for Python C backend and Windows onefile got cleaned
up some more and moved more common code to shared modules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When calling external tools, make sure to provide null input where
possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unified calling &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;install_name_tool&lt;/span&gt;&lt;/code&gt; into a single method for adding
rpath and name changes both at the same time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unified how tools like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;readelf&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ldconfig&lt;/span&gt;&lt;/code&gt; etc. are called and
error exits and outputs checked to make sure we don’t miss anything
as easily.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Adapted for some openSUSE specific path usages in standalone tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic tests for onefile operation and with termination signal sent
were added.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The big changes in this release are the optimization changes to reduce
the global passes and the memory savings from other optimization. These
should again make Nuitka more scalable with large projects, but there
definitely is work remaining.&lt;/p&gt;
&lt;p&gt;Adding nice stopping behaviour for the Onefile mode on Windows is
seemingly a first, and it wasn’t easy, but it will make it more reliable
to users.&lt;/p&gt;
&lt;p&gt;Also tooling of gcc and MSVC on Windows got a lot more robust, covering
more cases, and macOS support has been renewed and should be a lot
better now.&lt;/p&gt;
&lt;p&gt;The progress bar is a nice touch and improves the overall feel of the
compilation process, but obviously we need to aim at getting faster
overall still. For projects using large dependencies, e.g. Pandas the
compilation is still far too slow and that will need work on caching
frontend results, and better optimization and C code generation for the
backend.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-0612.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2021-02-16T09:24:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-0613.html</id>
    <title>Nuitka Release 0.6.13</title>
    <updated>2021-04-03T10:05:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-13"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release follows up with yet again massive improvement in many ways
with lots of bug fixes and new features.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Windows: Icon group entries were not still not working properly in
some cases, leading to no icon or too small icons being displayed.
Fixed in 0.6.12.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Icons and version information were copied from the
standalone executable to the onefile executable, but that failed due
to race situations, sometimes reproducible. Instead we now apply
things to both independently. Fixed in 0.6.12.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Fixup scanning for DLLs with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ldconfig&lt;/span&gt;&lt;/code&gt; on Linux and
newer versions making unexpected outputs. Fixed in 0.6.12.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: When there is no standard input provided, prompts were crashing
with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EOFError&lt;/span&gt;&lt;/code&gt; when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--assume-yes-for-downloads&lt;/span&gt;&lt;/code&gt; is not given,
change that to defaulting to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;no&amp;quot;&lt;/span&gt;&lt;/code&gt; instead. Fixed in 0.6.12.2
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Detect empty strings for company name, product name, product
and file versions rather than crashing on them later. Them being
empty rather than not there can cause a lot of issues in other
places. Fixed in 0.6.12.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scons: Pass on exceptions during execution in worker threads and
abort compilation immediately. Fixed in 0.6.12.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.9: Still not fully compatible with typing subclasses, the
enhanced check is now closely matching the CPython code. Fixed in
0.6.12.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux: Nicer error message for missing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libfuse&lt;/span&gt;&lt;/code&gt; requirement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Lookups on dictionaries with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt; value giving a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;KeyError&lt;/span&gt;&lt;/code&gt; exception, but with no value, which is not what CPython
does.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.9: Fix, future annotations were crashing in debug mode. Fixed
in 0.6.12.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Corrections to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glfw&lt;/span&gt;&lt;/code&gt; were made. Fixed in 0.6.12.3
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added missing ìmplicit dependency for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;py.test&lt;/span&gt;&lt;/code&gt;. Fixed
in 0.6.12.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Adding missing implicit dependency for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyreadstat&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Added workaround for common clcache locking problems. Since
we use it only inside a single Scons process, we can avoiding using
Windows mutexes, and use a process level lock instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Fix plugin for support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eventlet&lt;/span&gt;&lt;/code&gt;. Fixed in 0.6.12.3
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for latest &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zmq&lt;/span&gt;&lt;/code&gt; on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scons: the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--quiet&lt;/span&gt;&lt;/code&gt; flag was not fully honored yet, with Scons
still making a few outputs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for alternative DLL name for newer
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyGTK3&lt;/span&gt;&lt;/code&gt; on Windows. Fixed in 0.6.12.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Fix plugin for support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gevent&lt;/span&gt;&lt;/code&gt;. Fixed in 0.6.12.4
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added yet another missing implicit dependency for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pandas&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;qt-plugins&lt;/span&gt;&lt;/code&gt; plugin could stumble over &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.mesh&lt;/span&gt;&lt;/code&gt;
files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, dependency walker wasn’t properly working with unicode
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%PATH%&lt;/span&gt;&lt;/code&gt; which could e.g. happen with a virtualenv in a home
directory that requires them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: Fixed a few Python debug mode warnings about unclosed files
that have sneaked into the codebase.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added new options &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--windows-force-stdout-spec&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--windows-force-stderr-spec&lt;/span&gt;&lt;/code&gt; to force output to files. The paths
provided at compile time can resolve symbolic paths, and are intended
to e.g. place these files near the executable. Check the User Manual
for a table of the currently supported values. At this time, the
feature is limited to Windows, where the need arose first, but it
will be ported to other supported OSes eventually. These are most
useful for programs run as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--windows-disable-console&lt;/span&gt;&lt;/code&gt; or with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--enable-plugin=windows-service&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Added option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--windows-onefile-tempdir-spec&lt;/span&gt;&lt;/code&gt; to provide
the temporary directory used with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--windows-onefile-tempdir&lt;/span&gt;&lt;/code&gt; in
onefile mode, you can now select your own pattern, and e.g. hardcode
a base directory of your choice rather than &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%TEMP&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added experimental support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PySide2&lt;/span&gt;&lt;/code&gt; with workarounds for
compiled methods not being accepted by its core. There are known
issues with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PySide2&lt;/span&gt;&lt;/code&gt; still, but it’s working fine for some people
now. Upstream patches will have to be created to remove the need for
workarounds and full support.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Use binary operation code for their in-place variants too, giving
substantial performance improvements in all cases that were not dealt
with manually already, but were covered in standard binary
operations. Until now only some string, some float operations were
caught sped up, most often due to findings of Nuitka being terribly
slower, e.g. not reusing string memory for inplace concatenation, but
now all operations have code that avoids a generic code path, that is
also very slow on Windows due calling to using the embedded Python
via API being slow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For mixed type operations, there was only one direction provided,
which caused fallbacks to slower forms, e.g. with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;long&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;float&lt;/span&gt;&lt;/code&gt; values leading to inconsistent results, such that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt; &lt;span class="pre"&gt;-&lt;/span&gt; &lt;span class="pre"&gt;1&lt;/span&gt;&lt;/code&gt;
and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1&lt;/span&gt; &lt;span class="pre"&gt;-&lt;/span&gt; &lt;span class="pre"&gt;a&lt;/span&gt;&lt;/code&gt; being accelerated or not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added C boolean optimization for a few operations that didn’t have
it, as these allow to avoid doing full computation of what the object
result would have to do. This is not exhausted fully yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: Faster &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+=&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-=&lt;/span&gt;&lt;/code&gt; binary and in-place
operations with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; values providing specialized code helpers
that are much faster, esp. in cases where no new storage is allocated
for in-place results and where not a lot of digits are involved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2: The Python3 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; code is the Python2 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;long&lt;/span&gt;&lt;/code&gt; type and
benefits from the optimization of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;+=&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-=&lt;/span&gt;&lt;/code&gt; code as
well, but of course its use is relatively rare.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__future__&lt;/span&gt;&lt;/code&gt; imports to become hard imports, so more
efficient code is generated for them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Counting of instances had a runtime impact by providing a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__del__&lt;/span&gt;&lt;/code&gt;
that was still needed to be executed and limits garbage collection on
types with older Python versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Avoid loading &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tqdm&lt;/span&gt;&lt;/code&gt; module before it’s actually used if at all
(it may get disabled by the user), speeding up the start of Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to optimize internal helpers only once and immediately,
avoiding extra global passes that were slowing down Python level
compilation by of large programs by a lot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to recognize the case where a module optimization can
provide no immediate change, but only after a next run, avoiding
extra global passes originating from these, that were slowing down
compilation of large programs by a lot. Together with the other
change, this can improve scalability by a lot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Remove implicit dependencies for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg_resources.extern&lt;/span&gt;&lt;/code&gt;
and use aliases instead. Using one of the packages, was causing all
that might be used, to be considered as used, with some being
relatively large. This was kind of a mistake in how we supported this
so far.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Revamped the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eventlet&lt;/span&gt;&lt;/code&gt; plugin, include needed DNS modules
as bytecode rather than as source code, scanning them with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkgutil&lt;/span&gt;&lt;/code&gt; rather than filesystem, with much cleaner code in the
plugin.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Removed support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pefile&lt;/span&gt;&lt;/code&gt; dependency walker choice and inline
copy of the code. It was never as good giving incomplete results, and
after later improvements, slower, and therefore has lost the original
benefit over using Dependency Walker that is faster and more correct.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added example for onefile on Windows with the version information and
with the temporary directory mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Describe difference in file access with onefile on Windows, where
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.argv[0]&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;os.path.dirname(__file__)&lt;/span&gt;&lt;/code&gt; will be different
things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added inline copy of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tqdm&lt;/span&gt;&lt;/code&gt; to make sure it’s available for
progress bar output for 2.7 or higher. Recommend having it in the
Debian package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added inline copy of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;colorama&lt;/span&gt;&lt;/code&gt; for use on Windows, where on some
terminals it will give better results with the progress bar.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stop using old PyLint for Python2, while it would be nice to catch
errors, the burden of false alarms seems to high now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Added even more checks on options that make no sense, made sure
to do this only after a possible restart in proper environment, so
warnings are not duplicated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For Linux onefile, keep appimage outputs in case of an error, that
should help debugging it in case of issues.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Added traces for plugin provided implicit dependencies leading to
inclusions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added inline copy of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zstd&lt;/span&gt;&lt;/code&gt; C code for use in decompression for the
Windows onefile bootstrap, not yet used though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added checks to options that accept package names for obvious
mistakes, such that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-package-data&lt;/span&gt; &lt;span class="pre"&gt;--mingw64&lt;/span&gt;&lt;/code&gt; will not
swallow an option, as that is clearly not a package name, that would
hide that option, while also not having any intended effect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added ignore list for decision to recompile extension modules with
available source too. For now, Nuitka will not propose to recompile
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Cython&lt;/span&gt;&lt;/code&gt; modules that are very likely not used by the program
anyway, and also not for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lxml&lt;/span&gt;&lt;/code&gt; until it’s clear if there’s any
benefit in that. More will be added in the future, this is mostly for
cases, where Cython causes incompatibilities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for using abstract base classes in plugins. These are
not considered for loading, and allow nicer implementation of shared
code, e.g. between &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyQt5&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PySide2&lt;/span&gt;&lt;/code&gt; plugins, but allow e.g.
to enforce the provision of certain overloads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User Manual: Remove the instruction to install &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt;, since
it’s an inline copy, this makes no sense anymore and that was
obsolete.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated PyLint to latest versions, and our requirements in general.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Started removal of PyLint annotations used for old Python2 only. This
will be a continuous action to remove these.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jinja2 based static code generation for operations was cleaned up, to
avoid code for static mismatches in the result C, avoiding language
constructs like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if&lt;/span&gt; &lt;span class="pre"&gt;(1&lt;/span&gt; &lt;span class="pre"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pre"&gt;0)&lt;/span&gt;&lt;/code&gt; with sometimes larger branches,
replacing it with Jinja2 branches of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{%&lt;/span&gt; &lt;span class="pre"&gt;if&lt;/span&gt; &lt;span class="pre"&gt;...&lt;/span&gt; &lt;span class="pre"&gt;%}&lt;/span&gt;&lt;/code&gt; form.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jinja2 based Python2 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; code was pioniering the use of macros,
but this was expanded to allow kinds of types for binary operations,
allow their reuse for in-place operation, with these macros making
returns via goto exits rather than return statements in a function.
Landing pads for these exits can then assign target values for
in-place different from what those for binary operation result return
do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changed the interfacing of plugins with DLL dependency detection,
cleaning up the interactions considerably with more unified code, and
faster executing due to cached plugin decisons.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrate manually provided slot function for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;unicode&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt;
into the standard static code generation. Previously parts were
generated and parts could be generated, but also provided with manual
code. The later is now all gone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use a less verbose progress bar format with less useless infos,
making it less likely to overflow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cleanup how payload data is accessed in Windows onefile bootstrap,
preparing the addition of decompression, doing the reading from the
file in only one dedicated function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When Jinja2 generated exceptions in the static code, it is now done
via proper Jinja2 macros rather than Python code, and these now avoid
useless Python version branches where possible, e.g. because a type
like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bytes&lt;/span&gt;&lt;/code&gt; is already Python version specific, with the goal to
get rid of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyErr_Format&lt;/span&gt;&lt;/code&gt; usage in our generated static code. That
goal is future work though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move safe strings helpers (cannot overflow) to a dedicated file, and
remove the partial duplication on the Windows onefile bootstrap code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Jinja2 static code generation was enhanced to track the usage of
labels used as goto targets, so that error exits, and value typed
exits from operations code no longer emitted when not used, and
therefore labels that are not used are not present.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For implicit dependencies, the parsing of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pyi&lt;/span&gt;&lt;/code&gt; file of a
module no longer emits a dependency on the module itself. Also from
plugins, these are now filtered away.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Detect if onefile mode has required downloads and if there is user
consent, otherwise skip onefile tests in the test runner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Need to also allow accesses to files via short paths on Windows if
these are allowed long paths.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The standalone tests on Windows didn’t actually take run time traces
and therefore were ineffective.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added standalone test for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glfw&lt;/span&gt;&lt;/code&gt; coverage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Construct based tests for in-place operations are now using a value
for the first time, and then a couple more times, allowing for real
in-place usage, so we are sure we measure correctly if that’s
happening.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Where the big change of the last release were optimization changes to
reduce the global passes, this release addresses remaining causes for
extra passes, that could cause these to still happen. That makes sure,
Nuitka scalability is very much enhanced in this field again.&lt;/p&gt;
&lt;p&gt;The new features for forced outputs are at this time Windows only and
make a huge difference when it comes to providing a way to debug Windows
Services or programs in general without a console, i.e. a GUI program.
These will need even more specifiers, e.g. to cover program directory,
rather than exe filename only, but it’s a very good start.&lt;/p&gt;
&lt;p&gt;On the tooling side, not a lot has happened, with the clcache fix, it
seems that locking issues on Windows are gone.&lt;/p&gt;
&lt;p&gt;The plugin changes from previous releases had left a few of them in a
state where they were not working, but this should be restored.
Interaction with the plugins is being refined constantly, and this
releases improved again on their interfaces. It will be a while until
this becomes stable.&lt;/p&gt;
&lt;p&gt;Adding support for PySide2 is a headline feature actually, but not as
perfect as we are used to in other fields. More work will be needed,
also in part with upstream changes, to get this to be fully supported.&lt;/p&gt;
&lt;p&gt;For the performance side of things, the in-place work and the binary
operations work has taken proof of concept stuff done for Python2 and
applied it more universally to Python3. Until we cover all long
operations, esp. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; seems extremely important and is lacking, this
cannot be considered complete, but it gives amazing speedups in some
cases now.&lt;/p&gt;
&lt;p&gt;Future releases will revisit the type tracing to make sure, we know more
about loop variables, to apply specific code helpers more often, so we
can achieve the near C speed we are looking for in the field of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt;
performance.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-0613.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2021-04-03T10:05:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-0614.html</id>
    <title>Nuitka Release 0.6.14</title>
    <updated>2021-05-01T09:19:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-14"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release has few, but important bug fixes. The main focus was on
expanding standalone support, esp. for PySide2, but also and in general
with plugins added that workaround &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg_resources&lt;/span&gt;&lt;/code&gt; usage for version
information.&lt;/p&gt;
&lt;p&gt;Also an important new features was added, e.g. the project configuration
in the main file should prove to be very useful.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Fix, modules that failed to import, should be retried
on next import.&lt;/p&gt;
&lt;p&gt;So far we only ever executed the module body once, but that is not
how it’s supposed to be. Instead, only if it’s in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.modules&lt;/span&gt;&lt;/code&gt;
that should happen, which is the case after successful import.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Fix, constant &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;False&lt;/span&gt;&lt;/code&gt; values in right hand side of
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;and&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;or&lt;/span&gt;&lt;/code&gt; conditions were generating wrong code if the left side
was of known &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bool&lt;/span&gt;&lt;/code&gt; shape too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Fix, add &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;styles&lt;/span&gt;&lt;/code&gt; Qt plugins to list of sensible
plugins.&lt;/p&gt;
&lt;p&gt;Otherwise no mouse hover events are generated on some platforms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Fix, relative &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;from&lt;/span&gt;&lt;/code&gt; imports beyond level 1 were not
loadingg modules from packages if necessary. Fixed in 0.6.13.3
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;crypto&lt;/span&gt;&lt;/code&gt; DLL check for Qt bindings was wrong. Fixed
in 0.6.13.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added experimental support for PySide6, but for good
results, 6.1 will be needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for newer matplotlib. Fixed in 0.6.12.1
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Reverted changes related to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg_resources&lt;/span&gt;&lt;/code&gt; that were
causing regressions. Fixed in 0.6.13.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Adding missing implicit dependency for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cytoolz&lt;/span&gt;&lt;/code&gt;
package. Fixed in 0.6.13.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Matching for package names to not suggest recompile for
was broken and didn’t match. Fixed in 0.6.13.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Added support for project options.&lt;/p&gt;
&lt;p&gt;When found in the filename provided, Nuitka will inject options to
the commandline, such that it becomes possible to do a complex
project with only using&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m nuitka filename.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Compilation mode, support OS specific.&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project-if: {OS} in (&amp;quot;Windows&amp;quot;, &amp;quot;Linux&amp;quot;):&lt;/span&gt;
&lt;span class="c1"&gt;#    nuitka-project: --onefile&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project-if: {OS} not in (&amp;quot;Windows&amp;quot;, &amp;quot;Linux&amp;quot;):&lt;/span&gt;
&lt;span class="c1"&gt;#    nuitka-project: --standalone&lt;/span&gt;

&lt;span class="c1"&gt;# The PySide2 plugin covers qt-plugins&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --enable-plugin=pyside2&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --include-qt-plugins=sensible,qml&lt;/span&gt;

&lt;span class="c1"&gt;# The pkg-resources plugin is not yet automatic&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --enable-plugin=pkg-resources&lt;/span&gt;

&lt;span class="c1"&gt;# Nuitka Commercial only features follow:&lt;/span&gt;

&lt;span class="c1"&gt;# Protect the constants from being readable.&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --enable-plugin=data-hiding&lt;/span&gt;

&lt;span class="c1"&gt;# Include datafiles for Qt into the binary directory.&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --enable-plugin=datafile-inclusion&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --qt-datadir={MAIN_DIRECTORY}&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --qt-datafile-pattern=*.js&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --qt-datafile-pattern=*.qml&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --qt-datafile-pattern=*.svg&lt;/span&gt;
&lt;span class="c1"&gt;# nuitka-project: --qt-datafile-pattern=*.png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Refer to the User Manual for a table of directives and the variables
allowed to be used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added option to include whole data directory structures in
standalone.&lt;/p&gt;
&lt;p&gt;The new option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-data-dir&lt;/span&gt;&lt;/code&gt; was added and is mostly
required for onefile mode, but recommended for standalone too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg-resources&lt;/span&gt;&lt;/code&gt; plugin.&lt;/p&gt;
&lt;p&gt;This one can resolve code like this at compile time without any need
for pip metadata to be present or used.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pkg_resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_distribution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;module_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="n"&gt;pkg_resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_distribution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;module_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parsed_version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Also process early imports in optimization.&lt;/p&gt;
&lt;p&gt;Otherwise plugins cannot work on standard library modules. This makes
it possible to handle them as well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Faster binary operations.&lt;/p&gt;
&lt;p&gt;Applying lessons learnt during the enhancements for in-place
operations that initially gave worse results than some manual code,
we apply the same tricks for all binary operations, which speeds them
up by significant margins, e.g. 30% for float addition, 25% for
Python int addition, and still 6% for Python int addition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More direct optimization of unary operations on constant value.&lt;/p&gt;
&lt;p&gt;Without this, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/code&gt; was not directly a constant value, but had to go
through the unary &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/code&gt; operation, which it still does, but now it’s
done at tree building time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More direct optimization for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;not&lt;/span&gt;&lt;/code&gt; in branches.&lt;/p&gt;
&lt;p&gt;Invertible comparisons, i.e. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;is&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;is&lt;/span&gt; &lt;span class="pre"&gt;not&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;in&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;not&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt;&lt;/code&gt;
do not have do be done during optimization. This mainly avoids noise
during optimization from such unimportant steps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More direct optimization for constant slices.&lt;/p&gt;
&lt;p&gt;These are used in Python3 for all subscripts, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a[1:2]&lt;/span&gt;&lt;/code&gt; will
use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;slice(1,2)&lt;/span&gt;&lt;/code&gt; effectively. For Python2 they are used less often,
but still. This also avoids a lot of noise during optimization,
mostly on Python3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scons: Avoid writing database to disk entirely.&lt;/p&gt;
&lt;p&gt;This saves a bit of disk churn and makes it unnecessary to specify
the location such that it doesn’t collide between Python versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For optimization passes, use previous max total as minimum for next
pass. That will usually be a more accurate result, rather than
starting from 1 again. Part of 0.6.13.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enhancements to the branch merging improve the scalability of Nuitka
somewhat, although the merging itself is still not very scalable,
there are some modules that are very slow to optimize still.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;orderset&lt;/span&gt;&lt;/code&gt; if available over the inline copy for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OrderedSet&lt;/span&gt;&lt;/code&gt;
which is much faster and improves Nuitka compile times.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkgutil&lt;/span&gt;&lt;/code&gt; a hard import too, this is in preparation of more
optimization for its functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Upstream patches for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PySide6&lt;/span&gt;&lt;/code&gt; have been contributed and merged
into the development branch &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dev&lt;/span&gt;&lt;/code&gt;. Full support should be available
once this is released as part of 6.1 which is waiting for Qt 6.1
naturally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Patches for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PySide2&lt;/span&gt;&lt;/code&gt; are available to commercial customers, see
&lt;a class="reference external" href="https://nuitka.net/pages/pyside2.html"&gt;PySide2 support&lt;/a&gt; page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Formatted all documents with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rstfmt&lt;/span&gt;&lt;/code&gt; and made that part of the
commit hook for Nuitka. It now works for all documents we have.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated inline copy of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tqdm&lt;/span&gt;&lt;/code&gt; to 4.59.0 which ought to address
spurious errors given.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User Manual: Remove &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--show-progress&lt;/span&gt;&lt;/code&gt; from the tutoral. The default
progress bar is then disabled, and is actually much nicer to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developer Manual: Added description of how context managers should be
named.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cleanup language for some warnings and outputs.&lt;/p&gt;
&lt;p&gt;It was still using obsolete “recursion” language rather than talking
about “following imports”, which is the new one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Remove dead code related to constants marshal, the data composer has
replaced this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid internal API usage for loading extension modules on Linux,
there is a function in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys&lt;/span&gt;&lt;/code&gt; module to get the ld flags.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;only&lt;/span&gt;&lt;/code&gt; mode wasn’t working properly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use new project options feature for specific options in basic tests
allowing to remove them from the test runner.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;For PySide2 things became more perfect, but it takes upstream patches
unfortunately such that only PySide6.1 will be working out of the box
outside of the commercial offering. We will also attempt to provide
workarounds, but there are some things that cannot be done that way.&lt;/p&gt;
&lt;p&gt;This release added some more scalability to the optimization process,
however there will be more work needed to make efficient branch merges.&lt;/p&gt;
&lt;p&gt;For onefile, a feature to include whole directories had been missing,
and could not easily be achieved with the existing options. This further
rounds this up, now what’s considered missing is compression and macOS
support, both of which should be coming in a future release.&lt;/p&gt;
&lt;p&gt;For the performance side of things, the binary operator work can
actually yield pretty good gains, with double digit improvements, but
this covers only so much. Much more C types and better type tracing
would be needed, but there was no progress on this front. Future
releases will have to revisit the type tracing to make sure, we know
more about loop variables, etc. so we can achieve the near C speed we
are looking for, at least in the field of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; performance.&lt;/p&gt;
&lt;p&gt;This release has largely been driven by the &lt;a class="reference external" href="/doc/commercial.html"&gt;Nuitka Commercial&lt;/a&gt; offering and needs for compatibility with more
code, which is of course always a good thing.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-0614.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2021-05-01T09:19:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-0615.html</id>
    <title>Nuitka Release 0.6.15</title>
    <updated>2021-06-05T17:18:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-15"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release polished previous work with bug fixes, but there are also
important new things that help make Nuitka more usable, with one
important performance improvement.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fix, hard imports were not automatically used in code generation
leading to errors when used. Fixed in 0.6.14.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt; was disabled by mistake. Fixed in 0.6.14.2
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added data files for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jsonschema&lt;/span&gt;&lt;/code&gt; to be copied
automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pendulum&lt;/span&gt;&lt;/code&gt; wasn’t working anymore with the
last release due to plugin interface issues.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Retry downloads without SSL if that fails, as some Python do not have
working SSL. Fixed in 0.6.14.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; path wasn’t working if it contained spaces. Fixed
in 0.6.14.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: For Linux and ARM using proper download off appimage. Fixed
in 0.6.14.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyreadstat&lt;/span&gt;&lt;/code&gt;. Fixed in 0.6.14.5
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added missing dependencies for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pandas&lt;/span&gt;&lt;/code&gt;. Fixed in
0.6.14.6 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Some preloaded packages from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pth&lt;/span&gt;&lt;/code&gt; do not have a
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__path__&lt;/span&gt;&lt;/code&gt;, these can and must be ignored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: On Linux, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.argv[0]&lt;/span&gt;&lt;/code&gt; was not the original file as
advertised.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Do not consider &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.mesh&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.frag&lt;/span&gt;&lt;/code&gt; files as DLls in
the Qt bindings when including the qml support. This was causing
errors on Linux, but was generally wasteful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, project options could be injected twice, which could lead to
errors with options that were only allowed once, e.g.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--linux-onefile-icon&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: When updating the resources in created binaries, treat all
kinds of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OSError&lt;/span&gt;&lt;/code&gt; with information output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: Remove onefile target binary path at startup as well, so it
cannot cause confusion after error exit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: In case of error exit from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AppImage&lt;/span&gt;&lt;/code&gt;, preserve its
outputs and attempt to detect if there was a locking issue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Scan package folders on Linux for DLLs too. This is
necessary to properly handle &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyQt5&lt;/span&gt;&lt;/code&gt; in case of Qt installed in the
system as well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: On Linux, standard QML files were not found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Enforce C locale when detecting DLLs on Linux, otherwise
whitelisting messages didn’t work properly on newer Linux.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tzdata&lt;/span&gt;&lt;/code&gt; package data files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exchangelib&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.9: Fix, type subscripts could cause optimization errors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Project options didn’t properly handle quoting of arguments,
these are normally removed by the shell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux: The default icon for Python in the system is now found with
more version specific names and should work on more systems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Do not include &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libstdc++&lt;/span&gt;&lt;/code&gt; as it should come from the
system rather.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added plugin &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; plugin, intended to fight bloat. For now
it can make including certain modules an error, a warning, or force
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ImportError&lt;/span&gt;&lt;/code&gt;, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--noinclude-setuptools-mode=nofollow&lt;/span&gt;&lt;/code&gt; is
very much recommended to limit compilation size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg-resources&lt;/span&gt;&lt;/code&gt; builtin now covers &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;metadata&lt;/span&gt;&lt;/code&gt; and
importlib_metadata packages for compile time version resolution as
well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PySide2&lt;/span&gt;&lt;/code&gt; on Python version before 3.6, because
the patched code needs no workarounds. Fixed in 0.6.14.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Convert images to icon files on the fly. So now you can
specify multiple PNG files, and Nuitka will create an icon out of
that automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Automatically download &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; binary if not present.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: New interface to query the main script path. This allows
plugins to look at its directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Output the versions of Nuitka and Python during compilation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Added option to control static linking. So far this had been
enabled only automatically for cases where we are certain, but this
allows to force enable or disable it. Now an info is given, if Nuitka
thinks it might be possible to enable it, but doesn’t do it
automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--no-onefile&lt;/span&gt;&lt;/code&gt; to disable &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--onefile&lt;/span&gt;&lt;/code&gt; from project
options.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Much enhanced GIL interaction with Python3.9 giving a big speed boost
and better threading behaviour.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster conversion of iterables to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt;, if size can be know,
allocation ahead saves a lot of effort.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;GenericAlias&lt;/span&gt;&lt;/code&gt; objects as compile time constants.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Enhanced Github issue raising instructions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rstfmt&lt;/span&gt;&lt;/code&gt; to all documentation and make it part of the commit
hook.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to check Scons files as well. This would have caught the
code used to disable &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt; temporarily.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not mention Travis in PR template anymore, we have stopped using
it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated requirements to latest versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bump requirements for development to 3.7 at least, toosl like black
do not work with 3.6 anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Started work on Nuitka Python, a CPython fork intended for enhanced
performance and standalone support with Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Determine system prefix without virtualenv outside of Scons, such
that plugins can share the code. There was duplication with the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; plugin, and this will only be more complete using all
approaches. This also removes a lot of noise from the scons file
moving it to shared code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Qt plugins now collect QML files with cleaner code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Nicer error message if a wrong search mode is given.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Added timeout for determining run time traces with
dependency walker, sometimes this hangs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added test to cover the zip importer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making use of project options in onefile tests, making it easier to
execute them manually.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;For Windows, it’s now easier than ever to create an icon for your
deployment, because you can use PNG files, and need not produce ICO
files anymore, with Nuitka doing that for you.&lt;/p&gt;
&lt;p&gt;The onefile for Linux had some more or less severe problems that got
addressed, esp. also when it came to QML applications with PySide.&lt;/p&gt;
&lt;p&gt;On the side, we are preparing to greatly improve the caching of Nuitka,
starting with retaining modules that were demoted to bytecode. There are
changes in this release, to support that, but it’s not yet complete. We
expect that scalability will then be possible to improve even further.&lt;/p&gt;
&lt;p&gt;Generally this is mostly a maintenance release, which outside of the
threading performance improvement has very little to offer for faster
execution, but that actually does a lot. Unfortunately right now it’s
limited to 3.9, but some of the newer Python’s will also be supported in
later releases.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-0615.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2021-06-05T17:18:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-0616.html</id>
    <title>Nuitka Release 0.6.16</title>
    <updated>2021-09-09T11:01:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-16"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release is mostly polishing and new features. Optimization looked
only at threading performance, and LTO improvements on Windows.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg-resources&lt;/span&gt;&lt;/code&gt; failed to resolve versions for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;importlib.metadata&lt;/span&gt;&lt;/code&gt; from its standard library at compile time.
Fixed in 0.6.15.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-module&lt;/span&gt;&lt;/code&gt; was not including the module if
it was an extension modules, but only for Python modules. Fixed in
0.6.15.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added missing implicit dependencies for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gi.overrides&lt;/span&gt;&lt;/code&gt;.
Fixed in 0.6.15.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.9: Fix, could crash when using generic aliases in certain
configurations. Fixed in 0.6.15.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the tensorflow plugin needed an update due to changed API. Fixed
in 0.6.15.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When error exiting Nuitka, it now closes any open progress bar for
cleaner display.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added missing dependency for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;skimage&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; plugin now automatically includes Qt
backend if any of the Qt binding plugins is active.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pyton3.5+: Added support for onefile compression. This is using
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zstd&lt;/span&gt;&lt;/code&gt; which is known to give very good compression with very high
decompression, much better than e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zlib&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Added onefile support.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FreeBSD: Added onefile support.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux: Added method to use tempdir onefile support as used on other
platforms as an alternative to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AppImage&lt;/span&gt;&lt;/code&gt; based.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for recursive addition of files from directories with
patterns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attaching the payload to onefile now has a progress bar too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Prelimary support for the yet unfinished Nuitka-Python that
allows static linking and higher performance on Windows, esp. with
Nuitka.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: In acceleration mode, for uninstalled Python, now a CMD file
is created rather than copying the DLL to the binary directory. That
avoids conflicts with architectures and of course useless file
copies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New abilities for plugin &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; allow to make it an error
when certain modules are imported. Added more specific options for
usual trouble makes, esp. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;setuptools&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytest&lt;/span&gt;&lt;/code&gt; are causing an
explosion for some programs, while being unused code. This makes it
now easier to oversee this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s now possible to override &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;appdirs&lt;/span&gt;&lt;/code&gt; decision for where cache
files live with an environment variable &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NUITKA_CACHE_DIR&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/code&gt; option now also works with onefile mode, it previously
rejected anything but acceleration mode. Fixed in 0.6.15.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: It’s now possible for multiple plugins to provide pre or
post load code for the same module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added indications for compilation modes &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;standalone&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;onefile&lt;/span&gt;&lt;/code&gt; to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__compiled__&lt;/span&gt;&lt;/code&gt; attribute.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Give nicer error message in case of colliding command line
options.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Faster threading code is now using for Python3.8 or higher and not
only 3.9, giving a performance boost, esp. on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--lto&lt;/span&gt;&lt;/code&gt; is now the default with MSVC 2019 or higher. This
will given smaller and faster binaries. It has been available for
some time, but not been the default yet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Using different progress bar titles for C compilation of Python code
and C compilation of onefile bootstrap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moved platform specific detections, for FreeBSD/OpenBSD/macOS out of
the Scons file and to common Nuitka code, sometimes eliminating
duplications with one version being more correct than the other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Massive cleanup of datafile plugin, using pattern descriptions, so
more code duplication can be removed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More cleanup of the scons files, sharing more common code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Under the name Nuitka-Python we are now also developing a fork of
CPython with enhancements, you can follow and joint it at
&lt;a class="reference external" href="https://github.com/Nuitka/Nuitka-Python"&gt;https://github.com/Nuitka/Nuitka-Python&lt;/a&gt; but at this time it is not
yet ready for prime time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile under Windows now only is temporary file mode. Until we
figure out how to solve the problems with locking and caching, the
mode where it installs to the AppData of the user is no longer
available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Renamed the plugin responsible for PyQt5 support to match the names
of others. Note however, that at this time, PySide2 or PySide6 are to
be recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make it clear that PySide 6.1.2 is actually going to be the supported
version of PySide6.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use MSVC in Github actions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This release had a massive focus on expanding existing features, esp.
for onefile, and plugins API, such that we can now configure
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; with yaml, have really nice datafile handling options,
and have onefile on all OSes practically.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-0616.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2021-09-09T11:01:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-0617.html</id>
    <title>Nuitka Release 0.6.17</title>
    <updated>2021-11-11T13:40:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-17"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release has a focus on performance improvements, while also
polishing plugins and adding many new features.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fix, plugins were not catching being used on packages not installed.
Fixed in 0.6.16.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Fix weaknesses in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;otool&lt;/span&gt;&lt;/code&gt; parsing to determine DLL
dependency parsing. Fixed in 0.6.16.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux: Allow onefile program args with spaces contained to be
properly passed. Fixed in 0.6.16.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Avoid using less portable C function for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%PID%&lt;/span&gt;&lt;/code&gt;
formatting, which restores compilation on Windows 7 with old
toolchains. Fixed in 0.6.16.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fstrings&lt;/span&gt;&lt;/code&gt; package. Fixed in 0.6.16.3
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Fix, need to import &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pth&lt;/span&gt;&lt;/code&gt; files after &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;site&lt;/span&gt;&lt;/code&gt;
module, not before. This was causing crashes on CentOS7 with Python2.
Fixed in 0.6.16.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Fix, when extension modules failed to load, in some
cases the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ImportError&lt;/span&gt;&lt;/code&gt; was lost to a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;KeyError&lt;/span&gt;&lt;/code&gt;. Fixed in
0.6.16.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, linker resource modes &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;code&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;linker&lt;/span&gt;&lt;/code&gt; were not working
anymore, but are needed with LTO mode at least. Fixed in 0.6.16.3
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Bytecode modules with null bytes in standard library,
typically from disk corruption, were not handled properly. Fixed in
0.6.16.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, failed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.throw()&lt;/span&gt;&lt;/code&gt; into generators could cause corruption.
Fixed in 0.6.16.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2: Fix, the bytecode compilation didn’t respect the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=no_asserts&lt;/span&gt;&lt;/code&gt; mode. Fixed in 0.6.16.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, calls were not annotating their arguments as escaped, causing
corruption of mutable in static optimization. Fixed in 0.6.16.5
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, some sequence objects, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy.array&lt;/span&gt;&lt;/code&gt; actually implement
in-place add operations that need to be called. Fixed in 0.6.16.5
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, onefile binaries were not working after being signed.
This now works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added missing implicit dependency for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sklearn&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Modules giving &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SyntaxError&lt;/span&gt;&lt;/code&gt; from source were not
properly handled, giving runtime &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ImportError&lt;/span&gt;&lt;/code&gt;. Now they are giving
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SyntaxError&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the LTO mode has issues with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;incbin&lt;/span&gt;&lt;/code&gt; usage on older gcc, so
use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;linker&lt;/span&gt;&lt;/code&gt; mode when it is enabled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: Fix, locals dict codes were not properly checking errors
that the mapping might raise when setting values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, modules named &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;entry&lt;/span&gt;&lt;/code&gt; were causing compile time errors in the
C stage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Never include files from OS private frameworks in standalone
mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, the python flag &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=no_warning&lt;/span&gt;&lt;/code&gt; wasn’t working on
all platforms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Fix, the main code of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;site&lt;/span&gt;&lt;/code&gt; module wasn’t
executing, so that its added builtins were not there. Of course, you
ought to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=no_site&lt;/span&gt;&lt;/code&gt; to not have it in the normal
case.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2: Added code path to handle edited standard library source
code which then has no valid bytecode file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anaconda: In module mode, the CondaCC wasn’t recognized as form of
gcc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, bytecode modules could shadow compiled modules of the same name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: Fix, expansion of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%PID%&lt;/span&gt;&lt;/code&gt; wasn’t working properly on
non-Windows, making temp paths less unique. The time stamp is not
necessarily enough.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;multiprocessing&lt;/span&gt;&lt;/code&gt; error exits from slave processes were not
reporting tracebacks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xcbglintegrations&lt;/span&gt;&lt;/code&gt; to the list of sensible Qt
plugins to include by default, otherwise rendering will be inferior.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;platformthemes&lt;/span&gt;&lt;/code&gt; to the list of sensible Qt
plugins to include by default, otherwise file dialogs on non-Windows
would be inferior.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, created &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pyi&lt;/span&gt;&lt;/code&gt; files were not ordered deterministically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;win32file&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, namespace packages were not using runtime values for their
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__path__&lt;/span&gt;&lt;/code&gt; value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.7+: Fix, was leaking &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AttributeError&lt;/span&gt;&lt;/code&gt; exceptions during
name imports.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, standard library detection could fail for relative paths.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Added experimental support for C level PGO (Profile Guided
Optimization), which runs your program and then uses feedback from
the execution. At this time only gcc is supported, and only C
compiler is collecting feedback. Check the User Manual for a table
with current results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Added experimental support for creating application bundles.
For these, icons can be specified and console can be disabled. But at
this time, onefile and accelerated mode are not yet usable with it,
only standalone mode works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Add support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg_resources.require&lt;/span&gt;&lt;/code&gt; calls to be
resolved at compile time. These are not working at runtime, but this
avoids the issue very nicely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Massive improvements to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; plugin, it can
now make &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;scipy&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;skimage&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pywt&lt;/span&gt;&lt;/code&gt;, and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;matplotlib&lt;/span&gt;&lt;/code&gt; use much less packages and has better error handling.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; ability ability to append code to a
module, which might get used in the future by other plugins that need
some sort of post load changes to be applied.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Added ability to replace code of functions at parse time,
and use this in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; plugin to replace functions that do
unnecessary stuff with variants that often just do nothing. This is
illustrated here.&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;gevent._util&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;remove&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;gevent&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;release&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;framework&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;change_function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;prereleaser_middle&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;(lambda&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;data:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;None)&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;postreleaser_before&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;(lambda&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;data:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;None)&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This example is removing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gevent&lt;/span&gt;&lt;/code&gt; code that loads dependencies used
for their CI release process, that need not be part of normal
programs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added ability to persist source code changes done by plugins in the
Python installation. This is considered experimental and needs write
access to the Python installation, so this is best done in a
virtualenv and it may confuse plugins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;multiprocessing.tracker&lt;/span&gt;&lt;/code&gt; and spawn mode for all
platforms. For non-default modes outside of Windows, you need to
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--enable-plugin=multiprocessing&lt;/span&gt;&lt;/code&gt; to use these.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Allow multiple entry points to be provided by one or several
plugins for the same modules. These are now merged into one
automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Fix for numpy not working when compiling with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--python-flag=no_docstrings&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, method calls were not respecting descriptors provided by types
with non-generic attribute lookups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Add support for using self-compiled Python3 from the build
folder too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for Nuitka-Python 2.7, which will be our faster Python
fork.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Colorized output for error outputs encountered in Scons, these are
now yellow for better recognition.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Faster threading code was used for Python3.8 or higher, and this has
been extended to 3.7 on Windows, but we won’t be able to have it
other platforms and not on earlier Python3 versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster calls esp. with keyword arguments. Call with keywords no
longer create dictionaries if the call target supports that, and with
3.8 or higher, non-compiled code that allows vectorcall is taken
advantage of.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster class creation that avoids creation of argument tuples and
dictionaries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster attribute check code in case of non-present attributes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster unbound method calls, unlike bound methods calls these were
not optimized as well yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type shapes for star arguments are now known and used in
optimization.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Statically known to be tuple&lt;/span&gt;
   &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Statically known to be dict&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2: Faster old-style class creation. These are classes that do
not explicitly inherit from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;object&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2: Faster string comparisons for Python by specializing for the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt; type as well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: Added specialization for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bytes&lt;/span&gt;&lt;/code&gt; comparisons too. These
are naturally very much the same as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt; comparisons in Python2.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added specialization for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; comparisons too. We had them for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tuples&lt;/span&gt;&lt;/code&gt; only so far.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster method calls when called from Python core, our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tp_call&lt;/span&gt;&lt;/code&gt;
slot wasn’t as good as it can be.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimization: Faster deep copies of constants. This can speed up
constant calls with mutable types. Before it was checking the type
too often to be fast.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow using static linking with Debian Python giving much better
performance with the system Python. This is actually a huge
improvement as it makes things much faster. So far it’s only
automatically enabled for Python2, but it seems to work for Python3
on Debian too. Needs more tweaking in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimization: Added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;functools&lt;/span&gt;&lt;/code&gt; module to the list of hard imports
in preparation of optimizing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;functools.partial&lt;/span&gt;&lt;/code&gt; to work better
with compiled functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2: Demote to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xrange&lt;/span&gt;&lt;/code&gt; when iterating over &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;range&lt;/span&gt;&lt;/code&gt; calls,
even for small ranges, they are always faster. Previously this was
only done for values with at least 256 values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable LTO automatically for Debian Python, this also allows more
optimization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable LTO automatically for Anaconda with CondaCC on non-Windows,
also allowing more optimization.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added section in the User Manual on how to deal with memory issues
and C compiler bugs. This is a frequent topic and should serve as a
pointer for this kind of issue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--lto&lt;/span&gt;&lt;/code&gt; option was changed to require an argument, so that it
can also be disabled. The default is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;auto&lt;/span&gt;&lt;/code&gt; which is the old
behaviour where it’s enabled if possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--no-progress&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--no-progressbar&lt;/span&gt;&lt;/code&gt; in order to make it
more clear what it’s about. Previously it was possible to relate it
to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--show-progress&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No longer require specific versions of dependencies in our
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requirements.txt&lt;/span&gt;&lt;/code&gt; and relegate those to only being in
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requirements-devel.txt&lt;/span&gt;&lt;/code&gt; such that by default Nuitka doesn’t
collide with user requirements on those same packages which
absolutely all the time don’t really make a difference.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added ability to check all unpushed changes with pylint with a new
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;./bin/check-nuitka-with-pylint&lt;/span&gt; &lt;span class="pre"&gt;--unpushed&lt;/span&gt;&lt;/code&gt; option. Before it was
only possible to make the check (quickly) with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--diff&lt;/span&gt;&lt;/code&gt;, but that
stopped working after commits are made.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Revived support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vmprof&lt;/span&gt;&lt;/code&gt; based analysis of compiled programs,
but it requires a fork of it now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make Windows specific compiler options visible on all platforms.
There is no point in them being errors, instead warnings are given
when they are specified on non-Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added project variable &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Commercial&lt;/span&gt;&lt;/code&gt; for use in Nuitka project
syntax.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consistent use of metavars for nicer help output should make it more
readable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ast&lt;/span&gt;&lt;/code&gt; tree dumps in case of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;KeyboardInterrupt&lt;/span&gt;&lt;/code&gt; exceptions,
they are just very noisy. Also not annotate where Nuitka was in
optimization when a plugin is asking to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sysexit&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Encoding names for UTF8 in calls to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.encode()&lt;/span&gt;&lt;/code&gt; were used
inconsistent with and without dashes in the source code, added
cleanup to autoformat that picks the one blessed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cleanup taking of runtime traces of DLLs used in preparation for
using it in main code eventually, moving it to a dedicated module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid special names for Nuitka options in test runner, this only adds
a level of confusion. Needs more work in future release.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unify implementation to create modules into single function. We had 3
forms, one in recursion, one for main module, and one for plugin
generated code. This makes it much easier to understand and use in
plugins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Further reduced code duplication between the two Scons files, but
more work will be needed there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Escaped variables are still known to be assigned/unassigned rather
than unknown, allowing for many optimizations to still work on them.,
esp. for immutable value&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enhanced autoformat for rest documents, bullet list spacing is now
consistent and spelling of organisational is unified automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moved icon conversion functionality to separate module, so it can be
reused for other platforms more easily.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Removed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;reflected&lt;/span&gt;&lt;/code&gt; test, because of Nuitka special needs to
restart with variable Python flags. This could be reverted though,
since Nuitka no longer needs anything outside inline copies, and
therefore no longer loads from site packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; plugin in standalone tests of Numpy, Pandas and
tests to reduce their compile times, these have become much more
manageable now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enhanced checks for used files to use proper below path checks for
their ignoring.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove reflected test, compiling Nuitka with Nuitka has gotten too
difficult.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify constants integrity at program end in debug mode again, so we
catch corruption of them in tests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This release is one of the most important ones in a long time. The PGO
and LTO, and static libpython work make a big different for performance
of created binaries.&lt;/p&gt;
&lt;p&gt;The amount of optimization added is also huge, calls are much faster
now, and object creations too. These avoiding to go through actual
dictionaries and tuples in most cases when compiled code interacts gives
very significant gains. This can be seen in the increase of pystone
performance.&lt;/p&gt;
&lt;p&gt;The new type specializations allow many operations to be much faster.
More work will follow in this area and important types, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;str&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/code&gt; do not have specialized comparisons for Python3, holding it back
somewhat to where our Python2 performance is for these things.&lt;/p&gt;
&lt;p&gt;For scalability, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; work is extremely valuable, and this
plugin should become active by default in the future, for now it must be
strongly recommended. It needs more control over what parts you want to
deactivate from it, in case of it causing problems, then we can and
should do it.&lt;/p&gt;
&lt;p&gt;The support for macOS has been enhanced a lot, and will become perfect
in the next release (currently develop). The bundle mode is needed for
all kinds of GUI programs to not need a console. This platform is
becoming as well supported as the others now.&lt;/p&gt;
&lt;p&gt;Generally this release marks a huge step forward. We hope to add Python
level PGO in the coming releases, for type knowledge retrofitted without
any annotations used. Benchmarks will become more fun clearly.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-0617.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2021-11-11T13:40:00+00:00</published>
  </entry>
  <entry>
    <id>https://nuitka.net/posts/nuitka-release-0618.html</id>
    <title>Nuitka Release 0.6.18</title>
    <updated>2021-12-11T17:21:00+00:00</updated>
    <author>
      <name>Kay Hayen</name>
    </author>
    <content type="html">&lt;section id="nuitka-release-0-6-18"&gt;

&lt;p&gt;This is to inform you about the new stable release of &lt;a class="reference external" href="https://nuitka.net"&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler,
&lt;a class="reference external" href="/doc/download.html"&gt;“download now”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release has a focus on new features of all kinds, and then also new
kinds of performance improvements, some of which enable static
optimization of what normally would be dynamic imports, while also
polishing plugins and adding also many new features and a huge amount of
organisational changes.&lt;/p&gt;
&lt;section id="bug-fixes"&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python3.6+: Fixes to asyncgen, need to raise &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;StopAsyncInteration&lt;/span&gt;&lt;/code&gt;
rather than &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;StopIteration&lt;/span&gt;&lt;/code&gt; in some situations to be fully
compatible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: Fix, LTO mode was always enabled for onefile compilation,
but not all compilers support it yet, e.g. MinGW64 did not. Fixed in
0.6.17.1 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;type&lt;/span&gt;&lt;/code&gt; calls with 3 arguments didn’t annotate their potential
exception exit. Fixed in 0.6.17.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, trusted module constants were not working properly in all cases.
Fixed in 0.6.17.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg-resources&lt;/span&gt;&lt;/code&gt; exiting with error at compile time for
unresolved requirements in compiled code, but these can of course
still be optional, i.e. that code would never run. Instead give only
a warning, and runtime fail on these. Fixed in 0.6.17.2 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Prevent the inclusion of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;drm&lt;/span&gt;&lt;/code&gt; libraries on Linux, they
have to come from the target OS at runtime. Fixed in 0.6.17.2
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added missing implicit dependency for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ipcqueue&lt;/span&gt;&lt;/code&gt;
module. Fixed in 0.6.17.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, Qt webengine support for everything but &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PySide2&lt;/span&gt;&lt;/code&gt; wasn’t
working properly. Partially fixed in 0.6.17.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Fix, bootstrap splash screen code for Windows was missing in
release packages. Fixed in 0.6.17.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, could crash on known implicit data directories not present.
Fixed in 0.6.17.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Disable download of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; binary for M1 architecture and
systems before macOS 10.14 as it doesn’t work on these. Fixed in
0.6.17.3 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pendulum.locals&lt;/span&gt;&lt;/code&gt; handling for Python 3.6 was
regressed. Fixed in 0.6.17.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Onefile: Make sure the child process is cleaned up even after its
successful exit. Fixed in 0.6.17.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xmlschema&lt;/span&gt;&lt;/code&gt;. Fixed in 0.6.17.4
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;curses&lt;/span&gt;&lt;/code&gt; on Windows. Fixed in
0.6.17.4 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;coincurve&lt;/span&gt;&lt;/code&gt; module. Fixed in 0.6.17.5
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.4+: Up until Python3.7 inclusive, a workaround for stream
encoding (was ASCII), causing crashes on output of non-ASCII, other
Python versions are not affected. Fixed in 0.6.17.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python2: Workaround for LTO error messages from older gcc versions.
Fixed in 0.6.17.5 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;win32print&lt;/span&gt;&lt;/code&gt;. Fixed in 0.6.17.6
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, need to prevent usage of static &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;libpython&lt;/span&gt;&lt;/code&gt; in module mode or
else on some Python versions, linker errors can happen. Fixed in
0.6.17.6 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Do not load &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;site&lt;/span&gt;&lt;/code&gt; module early anymore. This might
have caused issues in some configurations, but really only would be
needed for loading &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;inspect&lt;/span&gt;&lt;/code&gt; which doesn`t depend on it in
standalone mode. Fixed in 0.6.17.6 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, could crash with generator expressions in finally blocks of
tried blocks that return. Fixed in 0.6.17.7 already.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some_iterable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.5+: Compatibility of comparisons with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;types.CoroutineType&lt;/span&gt;&lt;/code&gt;
and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;types.AsyncGeneratorType&lt;/span&gt;&lt;/code&gt; types was not yet implemented. Fixed
in 0.6.17.7 already.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# These already worked:&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiledCoroutine&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CoroutineType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiledAsyncgen&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsyncGeneratorType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# These now work too:&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiledCoroutine&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CoroutineType&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compiledAsyncgen&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsyncGeneratorType&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ruamel.yaml&lt;/span&gt;&lt;/code&gt;. Fixed in 0.6.17.7
already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Distutils: Fix, when building more than one package, things could go
wrong. Fixed in 0.6.17.7 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix, for module mode filenames are used, and for packages, you can
specify a directory, however, a trailing slash was not working. Fixed
in 0.6.17.7 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatibility: Fix, when locating modules, a package directory and an
extension module of the same name were not used according to
priority. Fixed in 0.6.17.7 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added workaround &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;importlib_resources&lt;/span&gt;&lt;/code&gt; insisting on
Python source files to exist to be able to load datafiles. Fixed in
0.6.17.7 already.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Properly detect usage of hard imports from standard
library in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--follow-stdlib&lt;/span&gt;&lt;/code&gt; mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added data files for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;opensapi_spec_validator&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MSYS2: Fix, need to normalize compiler paths before comparing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anaconda: For accelerated binaries, the created &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.cmd&lt;/span&gt;&lt;/code&gt; file wasn’t
containing all needed environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Set minimum OS version derived from the Python executable
used, this should make it work on all supported platforms (of that
Python).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for automatic inclusion of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xmlschema&lt;/span&gt;&lt;/code&gt;
package datafiles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for automatic inclusion of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eel&lt;/span&gt;&lt;/code&gt; package
datafiles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;h5py&lt;/span&gt;&lt;/code&gt; package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;phonenumbers&lt;/span&gt;&lt;/code&gt; package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;feedparser&lt;/span&gt;&lt;/code&gt; package, this currently
depends on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; plugin to be enabled, which will become
enabled by default in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gi&lt;/span&gt;&lt;/code&gt; plugin for said package that copies
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;typelib&lt;/span&gt;&lt;/code&gt; files and sets the search path for them in standalone
mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added necessary datafiles for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eel&lt;/span&gt;&lt;/code&gt; package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QtWebEngine&lt;/span&gt;&lt;/code&gt; to all Qt bindings and
also make it work on Linux. Before only PySide2 on Windows was
supported.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3: Fix, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;all&lt;/span&gt;&lt;/code&gt; built-in was wrongly assuming that bytes
values could not be false, but in fact they are if they contain
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;\0&lt;/span&gt;&lt;/code&gt; which is actually false. The same does not happen for string
values, but that’s a difference to be considered.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: The LTO was supposed to be used automatically on with MSVC
14.2 or higher, but that was regressed and has been repaired now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Extension modules contained in packages, depending on
their mode of loading had the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__package__&lt;/span&gt;&lt;/code&gt; value set to a wrong
value, which at least impacted new matplotlib detection of Qt
backend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;setup.py&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; was installing binaries for
no good reason.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="new-features"&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Setuptools support. Documented &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_nuitka&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bdist_wheel&lt;/span&gt;&lt;/code&gt;
integration and added support for Nuitka as a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;build&lt;/span&gt;&lt;/code&gt; package
backend in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyproject.toml&lt;/span&gt;&lt;/code&gt; files. Using Nuitka to build your
wheels is supposed to be easy now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added experimental support for Python 3.10, there are however still
important issues with compatibility with the CPython 3.9 test suite
with at least asyncgen and coroutines.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: For app bundles, version information can be provided with the
new option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--macos-app-version&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added Python vendor detection of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Anaconda&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyenv&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Apple&lt;/span&gt;
&lt;span class="pre"&gt;Python&lt;/span&gt;&lt;/code&gt;, and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyenv&lt;/span&gt;&lt;/code&gt; and output the result in version output, this
should make it easiert to analyse reported issues.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Also handle the usage of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__name__&lt;/span&gt;&lt;/code&gt; for metadata version
resolution of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pkg-resources&lt;/span&gt;&lt;/code&gt; standard plugin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;data-files&lt;/span&gt;&lt;/code&gt; standard plugin now reads configuration
from a Yaml file that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;data-files.yml&lt;/span&gt;&lt;/code&gt; making it more accessible
for contributions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Allow enforcing usage of MSVC with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--msvc=latest&lt;/span&gt;&lt;/code&gt;. This
allows you to prevent accidental usage of MinGW64 on Windows, when
MSVC is intended, but achieves that without fixing the version to
use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Added support for LTO with MinGW64 on Windows, this was
previously limited to the MSVC compiler only.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Added support for using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--debugger&lt;/span&gt;&lt;/code&gt; with the downloaded
MinGW64 provided &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gdb.exe&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;It doesn`t work when executed from a Git bash prompt, but e.g.
from a standard command prompt.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added new experimental flag for compiled types to inherit from
uncompiled types. This should allow easier and more complete
compatibility, making even code in extension modules that uses
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyObject_IsInstance&lt;/span&gt;&lt;/code&gt; work, providing support for packages like
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pydanctic&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: The Qt binding plugins now resolve &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyqtgraph&lt;/span&gt;&lt;/code&gt; selection
of binding by hard coding &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QT_LIB&lt;/span&gt;&lt;/code&gt;. This will allow to resolve its
own dynamic imports depending on that variable at compile time. At
this time, the compile time analysis is not covering all cases yet,
but we hope to get there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS: Provide &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;minOS&lt;/span&gt;&lt;/code&gt; for standalone builds, derived from the
setting of the Python used to create it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Added new option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--disable-ccache&lt;/span&gt;&lt;/code&gt; to prevent Nuitka from
injecting &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ccache&lt;/span&gt;&lt;/code&gt; (Clang, gcc) and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clcache&lt;/span&gt;&lt;/code&gt; (MSVC) for caching
the C results of the compilation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Added experimental support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyQt6&lt;/span&gt;&lt;/code&gt;. While using
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PySide2&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PySide6&lt;/span&gt;&lt;/code&gt; is very much recommended with Nuitka, this
allows its use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: Added option &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--low-memory&lt;/span&gt;&lt;/code&gt; to allow the user to specify that
the compilation should attempt to use less memory where possible,
this increases compile times, but might enable compilation on some
weaker machines.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Added dedicated attribute nodes for attribute values that match names
of dictionary operations. These are optimized into dedicate nodes for
methods of dictionaries should their expression have an exact
dictionary shape. These in turn optimize calls on them statically
into dictionary operations. This is done for all methods of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt;
for both Python2 and Python3, namely &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;get&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;items&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iteritems&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;itervalues&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iterkeys&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewvalues&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viewkeys&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pop&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;setdefault&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;has_key&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;clear&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;copy&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;update&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The new operation nodes also add compile time optimization for being
used on constant values where possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also added dedicated attribute nodes for string operations. For
operations, currently only part of the methods are done. These are
currently only &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;join&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;strip&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lstrip&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rstrip&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;partition&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rpartition&lt;/span&gt;&lt;/code&gt;. Besides performance, this subset was
enough to cover compile time evaluation of module name computation
for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;importlib.import_module&lt;/span&gt;&lt;/code&gt; as done by SWIG bindings, allowing
these implicit dependencies to be discovered at compile time without
any help, marking a significant improvement for standalone usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Annotate type shape for dictionary &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;in&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;not&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt;&lt;/code&gt; nodes, this was
missing unlike in the generic &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;in&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;not&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt;&lt;/code&gt; nodes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster processing of “expression only” statement nodes. These are
nodes, where a value is computed, but then not used, it still needs
to be accounted for though, representing the value release.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# ignores return value, means statement only node&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Enabled LTO by default with MinGW64, which makes it produce
much faster results. It now yield faster binaries than MSVC 2019 with
pystone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Added support for C level PGO (Profile Guided Optimization)
with MSVC and MinGW64, allowing extra speed boosts from the C
compilation on Windows as well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standalone: Better handling of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requests.packages&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;six.moves&lt;/span&gt;&lt;/code&gt;. The old handling could duplicate their code. Now uses
a new mechanism to resolve metapath based importer effects at compile
time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid useless exception checks in our dictionary helpers, as these
could only occur when working with dictionary overloads, which we
know to not be the case.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For nodes, have dedicated child mixin classes for nodes with a single
child value and for nodes with a tuple of children, so that these
common kind of nodes operate faster and don’t have to check at
runtime what type they are during access.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Actually make use of the egg cache. Nuitka was unpacking eggs in
every compilation, but in wheel installs, these can be quite common
and should be faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Star arguments annotated their type shape, but the methods to check
for dictionary exactly were not affected by this preventing
optimization in some cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; configuration for main programs present in the
modules of the standard library, these can be removed from the
compilation and should lower dependencies detected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using static libpython with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyenv&lt;/span&gt;&lt;/code&gt; automatically. This should give
both smaller (standalone mode) and faster results as is the case when
using this feature..&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugins: Added improvements to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; plugin for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gevent&lt;/span&gt;&lt;/code&gt; to avoid including its testing framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python3.9+: Faster calls into uncompiled functions from compiled code
using newly introduced API of that version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Statically optimize &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;importlib.import_module&lt;/span&gt;&lt;/code&gt; calls with constant
args into fixed name imports.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.version_info&lt;/span&gt;&lt;/code&gt; to be used as a compile time
constant. This should enable many checks to be done at compile time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added hard import and static optimization for
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;typing.TYPE_CHECKING&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also compute named import lookup through variables, expanding their
use to more cases, e.g. like this:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also optimize compile time comparisons through variable names if
possible, i.e. the value cannot have changed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster calls of uncompiled code with Python3.9 or higher avoiding DLL
call overhead.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="organisational"&gt;
&lt;h2&gt;Organisational&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Commercial: There are &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Buy&lt;/span&gt; &lt;span class="pre"&gt;Now&lt;/span&gt;&lt;/code&gt; buttons available now for the
direct purchase of the &lt;a class="reference external" href="/pages/commercial.html"&gt;Nuitka Commercial&lt;/a&gt;
offering. Finally Credit Card, Google Pay, and Apple Pay are all
possible. This is using Stripe. Get in touch with me if you want to
use bank transfer, which is of course still best for me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The main script runners for Python2 have been renamed to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka2&lt;/span&gt;&lt;/code&gt;
and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka2-run&lt;/span&gt;&lt;/code&gt;, which is consistent with what we do for Python3,
and avoids issues where &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bin&lt;/span&gt;&lt;/code&gt; folder ends up in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.path&lt;/span&gt;&lt;/code&gt; and
prevents the loading of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka&lt;/span&gt;&lt;/code&gt; package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Added support for Visual Studio 2022 by updating the inline
copy of Scons used for Windows to version 4.3.0, on non Windows, the
other ones will keep being used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows: Requiring latest MinGW64 with version 11.2 as released by
winlibs, because this is known to allow LTO, where previous releases
were missing needed binaries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reject standalone mode usage with Apple Python, as it works only with
the other supported Pythons, avoiding pitfalls in attempting to
distribute it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move hosting of documentation to Sphinx, added Changelog and some
early parts of API documentation there too. This gives much more
readable results than what we have done so far with Nikola. More
things will move there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User Manual: Add description how to access code attributes in
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka-project&lt;/span&gt;&lt;/code&gt; style options.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User Manual: Added commands used to generate performance numbers for
Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User Manual: List other Python’s for which static linking is supposed
to work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved help for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--include-package&lt;/span&gt;&lt;/code&gt; with a hint how to exclude
some of the subpackages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Started using Jinja2 in code templates with a few types, adding basic
infrastructure to do that. This will be expanded in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated plugin documentation with more recent information.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added Python flavor as detected to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/code&gt; output for
improved bug reports.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux: Added distribution name to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/code&gt; output for improved
bug reports.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always enable the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gevent&lt;/span&gt;&lt;/code&gt; plugin, we want to achieve this for all
plugins, and this is only a step in that direction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added project URLs for PyPI, so people looking at it from there have
some immediate places to checkout.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debian: Use common code for included PDF files, which have page
styles and automatic corrections for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rst2pdf&lt;/span&gt;&lt;/code&gt; applied.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated to latest &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;black&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;isort&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pylint&lt;/span&gt;&lt;/code&gt; versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The binary names for Python2 changed from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka-run&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka2&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka2-run&lt;/span&gt;&lt;/code&gt;. This harmonizes it
with Python2 and avoids issues, where the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bin&lt;/span&gt;&lt;/code&gt; folder in
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys.path&lt;/span&gt;&lt;/code&gt; can cause issues with re-execution of Nuitka finding
those to import.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;You ought to be using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; &lt;span class="pre"&gt;nuitka&lt;/span&gt;&lt;/code&gt; style of calling Nuitka
anyway, as it gives you best control over what Python is used to
run Nuitka, you can pick &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;python2&lt;/span&gt;&lt;/code&gt; there if you want it to run
with that, even with full path. Check the relevant section in the
User Manual too.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for Fedora 34 and Fedora 35.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="cleanups"&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;In a change of mind &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--enable-plugin&lt;/span&gt;&lt;/code&gt; has become the only form to
enable a plugin used in documentation and tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Massive cleanup of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy&lt;/span&gt;&lt;/code&gt; and Qt binding plugins, e.g.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyside2&lt;/span&gt;&lt;/code&gt;. Data files and DLLs are now provided through proper
declarative objects rather than copied manually. The handling of
PyQt5 from the plugin should have improved as a side effect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Massive cleanups of all documentation in ReST format. Plenty of
formatting errors were resolved. Many typos were identified and
globally fixed. Spellings e.g. of “Developer Manual” are now enforced
with automatic replacements. Also missing or wrong quotes were turned
to proper methods. Also enforce code language for shell scripts to be
the same everywhere.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed last usages of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;getPythonFlags()&lt;/span&gt;&lt;/code&gt; and made the function
private, replacing their use with dedicated function to check for
individual flags.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid string comparison with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka.utils.getOS()&lt;/span&gt;&lt;/code&gt; and instead add
accessors that are more readable, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka.utils.isMacOS()&lt;/span&gt;&lt;/code&gt; and
put them to use where it makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replaced usages of string tests in list of python flags specified,
with functions that check for a specific name with a speaking
function name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added mixin for expressions that have no side effect outside of their
value, providing common method implementation more consistently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove code geared to using old PyLint and on Python2, we no longer
use that. Also removed annotations only used for overriding Python2
builtins from Nuitka code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The PDF specific annotations were moved into being applied only in
the PDF building step, avoiding errors for raw PDF directives.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply Visual Code autoformat to our Yaml files. This is unfortunately
not and automatic formatting yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Introduce dedicated &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka.utils.Json&lt;/span&gt;&lt;/code&gt; module, as we intend to
expand its usage, e.g. for caching.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replacing remaining usages of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;print&lt;/span&gt;&lt;/code&gt; functions with uses of
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nuitka.Tracing&lt;/span&gt;&lt;/code&gt; instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Massive cleanup of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gevent&lt;/span&gt;&lt;/code&gt; plugin, user proper method to
execute code after module load, rather than source patching without
need. The plugin no longer messes with inclusions that other code
already provides for standalone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using own helper to update &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sys&lt;/span&gt;&lt;/code&gt; module attributes, to avoid errors
from old C compilers, and also cleaning up using code to not have to
cast on string constants.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More consistent naming of plugin classes, and enforce a relationship
of detector class names to the names of detected plugins. The new
naming consistency is now enforced.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="tests"&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Added CPython 3.10 test suite, it needs more work though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added generated test that exercises dictionary methods in multiple
variations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test suite names were specified wrongly in a few of them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This release is again a huge step forward. It refines on PGO and LTO for
C level to work with all relevant compilers. Internally Python level PGO
is prepared, but only a future release will feature it. With that,
scalability improvements as well as even more performance improvements
will be unlocked.&lt;/p&gt;
&lt;p&gt;The amount of optimization added this time is even bigger, some of which
unlocks static optimization of module imports, that previously would
have to be considered implicit. This work will need one extra step,
namely to also trace hard imports on the function level, then this will
be an extremely powerful tool to solve these kinds of issues in the
future. The next release will have this and go even further in this
area.&lt;/p&gt;
&lt;p&gt;With the dictionary methods, and some string methods, also a whole new
kind of optimization has been started. These will make working with
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt; containers faster, but obviously a lot of ground is to cover
there still, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt; values are a natural target not yet started.
Future releases will progress here.&lt;/p&gt;
&lt;p&gt;Type specialization for Python3 has not progressed though, and will have
to be featured in a future releases though.&lt;/p&gt;
&lt;p&gt;For scalability, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;anti-bloat&lt;/span&gt;&lt;/code&gt; work has continued, and this should
be the last release, where this is not on by default. Compiling without
it is something that is immediately noticeable in exploding module
amounts. It is very urgently recommended to enable it for your
compilations.&lt;/p&gt;
&lt;p&gt;The support for macOS has been refined, with version information being
possible to add, and adding information to the binary about which OSes
are supported, as well as rejecting Apple Python, which is only a trap
if you want to deploy to other OS versions. More work will be needed to
support &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyenv&lt;/span&gt;&lt;/code&gt; or even Homebrew there too, for now CPython is still
the recommended platform to use.&lt;/p&gt;
&lt;p&gt;This release achieves major compatibility improvements. And of course,
the experimental support for 3.10 is not the least. The next release
will strive to complete the support for it fully, but this should be
usable at least, for now please stay on 3.9 if you can.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://nuitka.net/posts/nuitka-release-0618.html" rel="alternate"/>
    <summary>This is to inform you about the new stable release of Nuitka. It is the extremely compatible Python compiler,
“download now”.</summary>
    <category term="compiler" label="compiler"/>
    <category term="Python" label="Python"/>
    <category term="Nuitka" label="Nuitka"/>
    <published>2021-12-11T17:21:00+00:00</published>
  </entry>
</feed>
