# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:7
msgid "Looking where Nuitka stands"
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:9
msgid ""
"In case you wonder, [what Nuitka is](/pages/overview.html), look here. "
"Over the 0.3.x release cycle, I have mostly looked at its performance "
"with \"pystone\". I merely wanted to have a target to look at and `enjoy "
"the progress </pages/performance.html>`_ we have made there."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:14
msgid ""
"In the context of the Windows port then, Khalid Abu Bakr used the pybench"
" on Windows and that got me interested. It's a nice collection of micro "
"benchmarks, which is quite obviously aimed for looking CPython "
"implementations only. In that it's quite good to check where Nuitka is "
"good at, and where it can still take improvements for the milestone 2 "
"stuff."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:23
msgid "Enhancements to PyBench"
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:25
msgid ""
"The pybench refused to accept that Nuitka could use so little time on "
"some tests, I needed to hack it to allow it."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:28
msgid ""
"Then it had \"ZeroDivisionError\" exceptions, because Nuitka can run "
"fully predictable code not at all, thus with a time of 0ms, which gives "
"interesting factors."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:32
msgid ""
"Also these are many results, we are going to care for regressions only, "
"so there is an option now to output only tests with negative values."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:38
msgid "The Interesting Parts"
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:40
msgid ""
"Nuitka currently has some fields where optimizations are already so "
"effective as to render the whole benchmark pointless. Longterm, most of "
"PyBench will not be looked at anymore, where the factor becomes "
"\"infinity\", there is little point in looking at it. We will likely just"
" use it as a test that optimizations didn't suddenly regress. Publishing "
"the numbers will not be as interesting."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:47
msgid ""
"Then there are slow downs. These I take seriously, because of course I "
"expect that Nuitka shall only be faster than CPython. Sometimes the "
"implementation of Nuitka for some rarely used features is sub par though."
" I color coded these in red in the table below."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:52
msgid ""
"ComplexPythonFunctionCalls: These are twice as slow, which is an tribute "
"to the fact, that the code in this domain is only as good as it needs to "
"be. Of course function calls are very important, and this needs to be "
"addressed."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:57
msgid ""
"TryRaiseExcept: This is much slower because of the cost of the raise "
"statement, which is extremely high currently. For every raise, a frame "
"object with a specific code object is created, so the traceback will "
"point to the correct location. This is very inefficient, and wasteful. We"
" need to be able to create code objects that can be used for all lines "
"needed, and then we can re-use it and only have one frame object per "
"function, which then can be re-used itself. There is already some work "
"for that in [current git](/pages/download.html) (0.3.9 pre 2), but it's "
"not yet complete at all."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:67
msgid ""
"WithRaiseExcept: Same problem as TryRaiseExcept, the exception raising is"
" too expensive."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:70
#, python-format
msgid ""
"Note also that -90% is in fact much worse that +90%, the \"diff\" numbers"
" from pybench make improvements look much better than regressions do. You"
" can also checkout the comparison on the new [benchmark "
"pages](https://speedcenter.nuitka.net) that I am just creating, they are "
"based on codespeed, which I will blog upon separately."
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:77
msgid "Look at this table of results as produced by pybench:"
msgstr ""

#: ../../doc/posts/nuitka-on-pybench---good-and-bad.rst:81
msgid "Benchmark Results"
msgstr ""

