# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/nuitka-release-030.rst:7
msgid "Nuitka Release 0.3.0"
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:9
msgid ""
"This is to inform you about the new stable release of `Nuitka "
"<https://nuitka.net>`_. It is the extremely compatible Python compiler, "
"`\"download now\" </doc/download.html>`_."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:13
msgid ""
"This release 0.3.0 is the first release to focus on performance. In the "
"0.2.x series Nuitka achieved feature parity with CPython 2.6 and that was"
" very important, but now it is time to make it really useful."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:17
msgid ""
"Optimization has been one of the main points, although I was also a bit "
"forward looking to Python 2.7 language constructs. This release is the "
"first where I really started to measure things and removed the most "
"important bottlenecks."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:24
msgid "New Features"
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:26
msgid ""
"Added option to control ``--debug``. With this option the C++ debug "
"information is present in the file, otherwise it is not. This will give "
"much smaller \".so\" and \".exe\" files than before."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:30
msgid "Added option ``--no-optimization`` to disable all optimization."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:32
msgid ""
"It enables C++ asserts and compiles with less aggressive C++ compiler "
"optimization, so it can be used for debugging purposes."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:35
msgid "Support for Python 2.7 set literals has been added."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:39
msgid "Performance Enhancements"
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:41
msgid ""
"Fast global variables: Reads of global variables were fast already. This "
"was due to a trick that is now also used to check them and to do a much "
"quicker update if they are already set."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:45
msgid ""
"Fast ``break``/``continue`` statements: To make sure these statements "
"execute the finally handlers if inside a try, these used C++ exceptions "
"that were caught by ``try``/``finally`` in ``while`` or ``for`` loops."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:50
msgid ""
"This was very slow and had very bad performance. Now it is checked if "
"this is at all necessary and then it's only done for the rare case where "
"a ``break``/``continue`` really is inside the tried block. Otherwise it "
"is now translated to a C++ ``break``/``continue`` which the C++ compiler "
"handles more efficiently."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:56
msgid ""
"Added ``unlikely()`` compiler hints to all errors handling cases to allow"
" the C++ compiler to generate more efficient branch code."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:59
msgid ""
"The for loop code was using an exception handler to make sure the "
"iterated value was released, using ``PyObjectTemporary`` for that instead"
" now, which should lead to better generated code."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:63
msgid ""
"Using constant dictionaries and copy from them instead of building them "
"at run time even when contents was constant."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:68
msgid "New Tests"
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:70
msgid ""
"Merged some bits from the CPython 2.7 test suite that do not harm 2.6, "
"but generally it's a lot due to some ``unittest`` module interface "
"changes."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:74
msgid ""
"Added CPython 2.7 tests ``test_dictcomps.py`` and ``test_dictviews.py`` "
"which both pass when using Python 2.7."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:77
msgid ""
"Added another benchmark extract from \"PyStone\" which uses a while loop "
"with break."
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:82
msgid "Numbers"
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:84
msgid "python 2.6:"
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:91
msgid "Nuitka 0.3.0:"
msgstr ""

#: ../../doc/posts/nuitka-release-030.rst:98
#, python-format
msgid ""
"That's a 25% speedup now and a good start clearly. It's not yet in the "
"range of where i want it to be, but there is always room for more. And "
"the ``break``/``continue`` exception was an important performance "
"regression fix."
msgstr ""

