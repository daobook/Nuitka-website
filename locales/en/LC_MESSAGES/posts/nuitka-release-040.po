# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/nuitka-release-040.rst:7
msgid "Nuitka Release 0.4.0"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:9
msgid ""
"This is to inform you about the new stable release of `Nuitka "
"<https://nuitka.net>`_. It is the extremely compatible Python compiler, "
"`\"download now\" </doc/download.html>`_."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:13
msgid ""
"This release brings massive progress on all fronts. The big highlight is "
"of course: Full Python3.2 support. With this release, the test suite of "
"CPython3.2 is considered passing when compiled with Nuitka."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:17
msgid ""
"Then lots of work on optimization and infrastructure. The major goal of "
"this release was to get in shape for actual optimization. This is also "
"why for the first time, it is tested that some things are indeed compile "
"time optimized to spot regressions easier. And we are having performance "
"diagrams, `even if weak ones "
"<https://nuitka.net/pages/performance.html>`__:"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:26
msgid "New Features"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:28
msgid "Python3.2 is now fully supported."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:30
msgid ""
"Fully correct ``metaclass =`` semantics now correctly supported. It had "
"been working somewhat previously, but now all the corner cases are "
"covered too."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:34
msgid "Keyword only parameters."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:35
msgid "Annotations of functions return value and their arguments."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:36
msgid ""
"Exception causes, chaining, automatic deletion of exception handlers "
"``as`` values."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:38
msgid "Added support for starred assigns."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:39
msgid ""
"Unicode variable names are also supported, although it's of course ugly, "
"to find a way to translate these to C++ ones."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:44
msgid "Bug fixes"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:46
msgid ""
"Checking compiled code with ``instance(some_function, "
"types.FunctionType)`` as \"zope.interfaces\" does, was causing "
"compatibility problems. Now this kind of check passes for compiled "
"functions too."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:51
msgid ""
"The frame of modules had an empty locals dictionary, which is not "
"compatible to CPython which puts the globals dictionary there too."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:54
msgid ""
"For nested exceptions and interactions with generator objects, the "
"exceptions in ``sys.exc_info()`` were not always fully compatible. They "
"now are."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:58
msgid ""
"The ``range`` builtin was not raising exceptions if given arguments "
"appeared to not have side effects, but were still illegal, e.g. "
"``range([], 1, -1)`` was optimized away if the value was not used."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:62
msgid ""
"Don't crash on imported modules with syntax errors. Instead, the "
"attempted recursion is simply not done."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:65
msgid ""
"Doing a ``del`` on ``__defaults`` and ``__module__`` of compiled "
"functions was crashing. This was noticed by a Python3 test for "
"``__kwdefaults__`` that exposed this compiled functions weakness."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:69
msgid ""
"Wasn't detecting duplicate arguments, if one of them was not a plain "
"arguments. Star arguments could collide with normal ones."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:72
msgid ""
"The ``__doc__`` of classes is now only set, where it was in fact "
"specified. Otherwise it only polluted the name space of ``locals()``."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:75
msgid ""
"When ``return`` from the tried statements of a ``try/finally`` block, was"
" overridden, by the final block, a reference was leaked. Example code:"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:86
msgid ""
"Raising exception instances with value, was leaking references, and not "
"raising the ``TypeError`` error it is supposed to do."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:89
msgid ""
"When raising with multiple arguments, the evaluation order of them was "
"not enforced, it now is. This fixes a reference leak when raising "
"exceptions, where building the exception was raising an exception."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:95
msgid "Optimization"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:97
msgid ""
"Optimizing attribute access to compile time constants for the first time."
" The old registry had no actual user yet."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:100
msgid ""
"Optimizing subscript and slices for all compile time constants beyond "
"constant values, made easy by using inheritance."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:103
msgid ""
"Built-in references now convert to strings directly, e.g. when used in a "
"print statement. Needed for the testing approach \"compiled file contains"
" only prints with constant value\"."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:107
msgid "Optimizing calls to constant nodes directly into exceptions."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:109
msgid ""
"Optimizing built-in ``bool`` for arguments with known truth value. This "
"would be creations of tuples, lists, and dictionaries."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:112
msgid ""
"Optimizing ``a is b`` and ``a is not b`` based on aliasing interface, "
"which at this time effectively is limited to telling that ``a is a`` is "
"true and ``a is not a`` is false, but this will expand."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:116
msgid ""
"Added support for optimizing ``hasattr``, ``getattr``, and ``setattr`` "
"built-ins as well. The ``hasattr`` was needed for the ``class`` re-"
"formulation of Python3 anyway."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:120
msgid ""
"Optimizing ``getattr`` with string argument and no default to simple "
"attribute access."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:123
msgid "Added support for optimizing ``isinstance`` built-in."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:125
msgid ""
"Was handling \"BreakException\" and \"ContinueException\" in all loops "
"that used ``break`` or ``continue`` instead of only where necessary."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:128
msgid ""
"When catching \"ReturnValueException\", was raising an exception where a "
"normal return was sufficient. Raising them now only where needed, which "
"also means, function need not catch them ever."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:134
msgid "Cleanups"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:136
msgid ""
"The handling of classes for Python2 and Python3 have been re-formulated "
"in Python more completely."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:139
msgid ""
"The calling of the determined \"metaclass\" is now in the node tree, so "
"this call may possible to in-line in the future. This eliminated some "
"static C++ code."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:143
msgid ""
"Passing of values into dictionary creation function is no longer using "
"hard coded special parameters, but temporary variables can now have "
"closure references, making this normal and visible to the optimization."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:148
msgid ""
"Class dictionary creation functions are therefore no longer as special as"
" they used to be."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:151
msgid ""
"There is no class creation node anymore, it's merely a call to ``type`` "
"or the metaclass detected."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:154
msgid ""
"Re-formulated complex calls through helper functions that process the "
"star list and dict arguments and do merges, checks, etc."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:157
msgid "Moves much C++ code into the node tree visibility."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:158
msgid ""
"Will allow optimization to eliminate checks and to compile time merge, "
"once in-line functions and loop unrolling are supported."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:161
msgid ""
"Added \"return None\" to function bodies without a an aborting statement "
"at the end, and removed the hard coded fallback from function templates. "
"Makes it explicit in the node tree and available for optimization."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:166
msgid "Merged C++ classes for frame exception keeper with frame guards."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:168
msgid ""
"The exception is now saved in the compiled frame object, making it "
"potentially more compatible to start with."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:171
msgid "Aligned module and function frame guard usage, now using the same class."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:174
msgid ""
"There is now a clear difference in the frame guard classes. One is for "
"generators and one is for functions, allowing to implement their "
"different exception behavior there."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:178
msgid ""
"The optimization registries for calls, subscripts, slices, and attributes"
" have been replaced with attaching them to nodes."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:181
msgid ""
"The ensuing circular dependency has been resolved by more local imports "
"for created nodes."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:183
msgid "The package \"nuitka.transform.optimization.registries\" is no more."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:184
msgid ""
"New per node methods \"computeNodeCall\", \"computeNodeSubscript\", etc. "
"dispatch the optimization process to the nodes directly."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:187
msgid "Use the standard frame guard code generation for modules too."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:189
msgid "Added a variant \"once\", that avoids caching of frames entirely."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:191
msgid "The variable closure taking has been cleaned up."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:193
msgid "Stages are now properly numbered."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:194
msgid "Python3 only stage is not executed for Python2 anymore."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:195
msgid "Added comments explaining things a bit better."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:196
msgid "Now an early step done directly after building a tree."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:198
msgid ""
"The special code generation used for unpacking from iterators and "
"catching \"StopIteration\" was cleaned up."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:201
msgid "Now uses template, Generator functions, and proper identifiers."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:203
msgid ""
"The ``return`` statements in generators are now re-formulated into "
"``raise StopIteration`` for generators, because that's what they really "
"are. Allowed to remove special handling of ``return`` nodes in "
"generators."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:208
msgid ""
"The specialty of CPython2.6 yielding non-None values of lambda "
"generators, was so far implemented in code generation. This was moved to "
"tree building as a re-formulation, making it subject to normal "
"optimization."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:213
msgid ""
"Mangling of attribute names in functions contained in classes, has been "
"moved into the early tree building. So far it was done during code "
"generation, making it invisible to the optimization stages."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:217
msgid ""
"Removed tags attribute from node classes. This was once intended to make "
"up for non-inheritance of similar node kinds, but since we have function "
"references, the structure got so clean, it's no more needed."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:221
msgid ""
"Introduced new package ``nuitka.tree``, where the building of node trees,"
" and operations on them live, as well as recursion and variable closure."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:225
msgid ""
"Removed ``nuitka.transform`` and move its former children "
"``nuitka.optimization`` and ``nuitka.finalization`` one level up. The "
"deeply nested structure turned out to have no advantage."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:229
msgid ""
"Checks for Python version was sometimes \"> 300\", where of course \">= "
"300\" is the only thing that makes sense."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:232
msgid ""
"Split out helper code for exception raising from the handling of "
"exception objects."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:237
msgid "New Tests"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:239
msgid ""
"The complete CPython3.2 test suite was adapted (no ``__code__``, no "
"``__closure__``, etc.) and is now passing, but only without \"--debug\", "
"because otherwise some of the generated C++ triggers (harmless) warnings."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:244
msgid ""
"Added new test suite designed to prove that expressions that are known to"
" be compile time constant are indeed so. This works using the XML output "
"done with ``--dump-xml`` and then searching it to only have print "
"statements with constant values."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:249
msgid ""
"Added new basic CPython3.2 test \"Functions32\" and \"ParameterErrors32\""
" to cover keyword only parameter handling."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:252
msgid "Added tests to cover generator object and exception interactions."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:254
msgid ""
"Added tests to cover ``try/finally`` and ``return`` in one or both "
"branches correctly handling the references."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:257
msgid ""
"Added tests to cover evaluation order of arguments when raising "
"exceptions."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:262
msgid "Organisational"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:264
msgid ""
"Changed my email from GMX over to Gmail, the old one will still continue "
"to work. Updated the copyright notices accordingly."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:267
msgid "Uploaded `Nuitka to PyPI <http://pypi.python.org/pypi/Nuitka/>`__ as well."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:272
msgid "Summary"
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:274
msgid ""
"This release marks a milestone. The support of Python3 is here. The re-"
"formulation of complex calls, and the code generation improvements are "
"quite huge. More re-formulation could be done for argument parsing, but "
"generally this is now mostly complete."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:279
msgid ""
"The 0.3.x series had a lot releases. Many of which brought progress with "
"re-formulations that aimed at making optimization easier or possible. "
"Sometimes small things like making \"return None\" explicit. Sometimes "
"bigger things, like making class creations normal functions, or getting "
"rid of ``or`` and ``and``. All of this was important ground work, to make"
" sure, that optimization doesn't deal with complex stuff."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:286
msgid ""
"So, the 0.4.x series begins with this. The focus from now on can be "
"almost purely optimization. This release contains already some of it, "
"with frames being optimized away, with the assignment keepers from the "
"``or`` and ``and`` re-formulation being optimized away. This will be "
"about achieving goals from the \"ctypes\" plan as discussed in the "
"Developer Manual."
msgstr ""

#: ../../doc/posts/nuitka-release-040.rst:293
msgid ""
"Also the performance page will be expanded with more benchmarks and "
"diagrams as I go forward. I have finally given up on \"codespeed\", and "
"do my own diagrams."
msgstr ""

