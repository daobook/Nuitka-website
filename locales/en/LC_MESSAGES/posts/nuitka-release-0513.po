# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/nuitka-release-0513.rst:7
msgid "Nuitka Release 0.5.13"
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:9
msgid ""
"This is to inform you about the new stable release of `Nuitka "
"<https://nuitka.net>`_. It is the extremely compatible Python compiler, "
"`\"download now\" </doc/download.html>`_."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:13
msgid ""
"This release contains the first use of SSA for value propagation and "
"massive amounts of bug fixes and optimization. Some of the bugs that were"
" delivered as hotfixes, were only revealed when doing the value "
"propagation as they still could apply to real code."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:20
msgid "Bug Fixes"
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:22
msgid ""
"Fix, relative imports in packages were not working with absolute imports "
"enabled via future flags. Fixed in 0.5.12.1 already."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:25
msgid ""
"Loops were not properly degrading knowledge from inside the loop at loop "
"exit, and therefore this could have lead missing checks and releases in "
"code generation for cases, for ``del`` statements in the loop body. Fixed"
" in 0.5.12.1 already."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:30
msgid ""
"The ``or`` and ``and`` re-formulation could trigger false assertions, due"
" to early releases for compatibility. Fixed in 0.5.12.1 already."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:33
msgid ""
"Fix, optimizion of calls of constant objects (always an exception), "
"crashed the compiler.Fixed in 0.5.12.2 already."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:36
msgid ""
"Standalone: Added support for ``site.py`` installations with a leading "
"``def`` or ``class`` statement, which is defeating our attempt to patch "
"``__file__`` for it."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:40
msgid ""
"Compatibility: In full compatibility mode, the tracebacks of ``or`` and "
"``and`` expressions are now as wrong as they are in CPython. Does not "
"apply to ``--improved`` mode."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:44
msgid ""
"Standalone: Added missing dependency on ``QtGui`` by ``QtWidgets`` for "
"PyQt5."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:47
msgid ""
"macOS: Improved parsing of ``otool`` output to avoid duplicate entries, "
"which can also be entirely wrong in the case of Qt plugins at least."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:51
msgid ""
"Avoid relative paths for main program with file reference mode "
"``original``, as it otherwise changes as the file moves."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:54
msgid ""
"MinGW: The created modules depended on MinGW to be in ``PATH`` for their "
"usage. This is no longer necessary, as we now link these libraries "
"statically for modules too."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:58
msgid ""
"Windows: For modules, the option ``--run`` to immediately load the "
"modules had been broken for a while."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:61
msgid ""
"Standalone: Ignore Windows DLLs that were attempted to be loaded, but "
"then failed to load. This happens e.g. when both PySide and PyQt are "
"installed, and could cause the dreaded conflicting DLLs message. The DLL "
"loaded in error is now ignored, which avoids this."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:66
msgid ""
"MinGW: The resource file used might be empty, in which case it doesn't "
"get created, avoiding an error due to that."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:69
msgid ""
"MinGW: Modules can now be created again. The run time relative code uses "
"an API that is WinXP only, and MinGW failed to find it without guidance."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:75
msgid "Optimization"
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:77
msgid ""
"Make direct calls out of called function creations. Initially this "
"applies to lambda functions only, but it's expected to become common "
"place in coming releases. This is now 20x faster than CPython."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:86
msgid ""
"Propagate assignments from non-mutable constants forward based on SSA "
"information. This is the first step of using SSA for real compile time "
"optimization."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:90
msgid ""
"Specialized the creation of call nodes at creation, avoiding to have all "
"kinds be the most flexible form (keyword and plain arguments), but "
"instead only what kind of call they really are. This saves lots of "
"memory, and makes the tree faster to visit."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:95
msgid ""
"Added support for optimizing the ``slice`` built-in with compile time "
"constant arguments to constants. The re-formulation for slices in Python3"
" uses these a lot. And the lack of this optimization prevented a bunch of"
" optimization in this area. For Python2 the built-in is optimized too, "
"but not as important probably."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:101
msgid ""
"Added support for optimizing ``isinstance`` calls with compile time "
"constant arguments. This avoids static exception raises in the ``exec`` "
"re-formulation which tests for ``file`` type, and then optimization "
"couldn't tell that a ``str`` is not a ``file`` instance. Now it can."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:107
msgid ""
"Lower in-place operations on immutable types to normal operations. This "
"will allow to compile time compute these more accurately."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:110
msgid ""
"The re-formulation of loops puts the loop condition as a conditional "
"statement with break. The ``not`` that needs to apply was only added in "
"later optimization, leading to unnecessary compile time efforts."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:114
msgid ""
"Removed per variable trace visit from optimization, removing useless code"
" and compile time overhead. We are going to optimize things by making "
"decision in assignment and reference nodes based on forward looking "
"statements using the last trace collection."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:121
msgid "New Features"
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:123
msgid ""
"Added experimental support for Python 3.5, which seems to be passing the "
"test suites just fine. The new ``@`` matrix multiplicator operators are "
"not yet supported though."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:127
msgid ""
"Added support for patching source on the fly. This is used to work around"
" a (now fixed) issue with ``numexpr.cpuinfo`` making type checks with the"
" ``is`` operation, about the only thing we cannot detect."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:134
msgid "Organisational"
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:136
msgid ""
"Added repository for Ubuntu Vivid (15.04) for download. Removed Ubuntu "
"Saucy and Ubuntu Raring package downloads, these are no longer supported "
"by Ubuntu."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:140
msgid "Added repository for Debian Stretch, after Jessie release."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:142
msgid ""
"Make it more clear in the documentation that in order to compile Python3,"
" a Python2 is needed to execute Scons, but that the end result is a "
"Python3 binary."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:146
msgid ""
"The PyLint checker tool now can operate on directories given on the "
"command line, and whitelists an error that is Windows only."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:151
msgid "Cleanups"
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:153
msgid ""
"Split up standalone code further, moving ``depends.exe`` handling to a "
"separate module."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:156
msgid "Reduced code complexity of scons interface."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:158
msgid ""
"Cleaned up where trace collection is being done. It was partially still "
"done inside the collection itself instead in the owner."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:161
msgid ""
"In case of conflicting DLLs for standalone mode, these are now output "
"with nicer formatting, that makes it easy to recognize what is going on."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:165
msgid ""
"Moved code to fetch ``depends.exe`` to dedicated module, so it's not as "
"much in the way of standalone code."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:170
msgid "Tests"
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:172
msgid "Made ``BuiltinsTest`` directly executable with Python3."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:174
msgid "Added construct test to demonstrate the speed up of direct lambda calls."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:177
msgid ""
"The deletion of ``@test`` for the CPython test suite is more robust now, "
"esp. on Windows, the symbolic links are now handled."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:180
msgid "Added test to cover ``or`` usage with in-place assignment."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:182
msgid ""
"Cover local relative ``import from .`` with ``absolute_import`` future "
"flag enabled."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:185
msgid "Again, more basic tests are now directly executable with Python3."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:189
msgid "Summary"
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:191
msgid ""
"This release is major due to amount of ground covered. The reduction in "
"memory usage of Nuitka itself (the C++ compiler will still use much "
"memory) is very massive and an important aspect of scalability too."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:195
msgid ""
"Then the SSA changes are truly the first sign of major improvements to "
"come. In their current form, without eliminating dead assignments, the "
"full advantage is not taken yet, but the next releases will do this, and "
"that's a major milestone to Nuitka."
msgstr ""

#: ../../doc/posts/nuitka-release-0513.rst:200
msgid ""
"The other optimization mostly stem from looking at things closer, and "
"trying to work towards function in-lining, for which we are making a lot "
"of progress now."
msgstr ""

