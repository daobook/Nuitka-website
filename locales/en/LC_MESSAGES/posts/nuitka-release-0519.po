# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/nuitka-release-0519.rst:7
msgid "Nuitka Release 0.5.19"
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:9
msgid ""
"This is to inform you about the new stable release of `Nuitka "
"<https://nuitka.net>`_. It is the extremely compatible Python compiler, "
"`\"download now\" </doc/download.html>`_."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:13
msgid ""
"This release brings optimization improvements for dictionary using code. "
"This is now lowering subscripts to dictionary accesses where possible and"
" adds new code generation for known dictionary values. Besides this there"
" is the usual range of bug fixes."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:20
msgid "Bug Fixes"
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:22
msgid ""
"Fix, attribute assignments or deletions where the assigned value or the "
"attribute source was statically raising crashed the compiler."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:25
msgid ""
"Fix, the order of evaluation during optimization was considered in the "
"wrong order for attribute assignments source and value."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:28
msgid ""
"Windows: Fix, when ``g++`` is the path, it was not used automatically, "
"but now it is."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:31
msgid "Windows: Detect the 32 bits variant of MinGW64 too."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:33
msgid ""
"Python3.4: The finalize of compiled generators could corrupt reference "
"counts for shared generator objects. Fixed in 0.5.18.1 already."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:37
msgid ""
"Python3.5: The finalize of compiled coroutines could corrupt reference "
"counts for shared generator objects."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:42
msgid "Optimization"
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:44
msgid ""
"When a variable is known to have dictionary shape (assigned from a "
"constant value, result of ``dict`` built-in, or a general dictionary "
"creation), or the branch merge thereof, we lower subscripts from "
"expecting mapping nodes to dictionary specific nodes. These generate more"
" efficient code, and some are then known to not raise an exception."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:58
msgid ""
"The above function is not yet fully optimized (dictionary key/value "
"tracing is not yet finished), however it at least knows that no exception"
" can raise from assigning ``value[\"c\"]`` anymore and creates more "
"efficient code for the typical ``result = {}`` functions."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:63
msgid ""
"The use of \"logical\" sharing during optimization has been replaced with"
" checks for actual sharing. So closure variables that were written to in "
"dead code no longer inhibit optimization of the then no more shared local"
" variable."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:68
msgid ""
"Global variable traces are now faster to decide definite writes without "
"need to check traces for this each time."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:73
msgid "Cleanups"
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:75
msgid ""
"No more using \"logical sharing\" allowed to remove that function "
"entirely."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:78
msgid ""
"Using \"technical sharing\" less often for decisions during optimization "
"and instead rely more often on proper variable registry."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:81
msgid ""
"Connected variables with their global variable trace statically avoid the"
" need to check in variable registry for it."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:84
msgid ""
"Removed old and mostly unused \"assume unclear locals\" indications, we "
"use global variable traces for this now."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:89
msgid "Summary"
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:91
msgid ""
"This release aimed at dictionary tracing. As a first step, the value "
"assign is now traced to have a dictionary shape, and this this then used "
"to lower the operations which used to be normal subscript operations to "
"mapping, but now can be more specific."
msgstr ""

#: ../../doc/posts/nuitka-release-0519.rst:96
msgid ""
"Making use of the dictionary values knowledge, tracing keys and values is"
" not yet inside the scope, but expected to follow. We got the first signs"
" of type inference here, but to really take advantage, more specific "
"shape tracing will be needed."
msgstr ""

