# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/nuitka-release-0523.rst:7
msgid "Nuitka Release 0.5.23"
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:9
msgid ""
"This is to inform you about the new stable release of `Nuitka "
"<https://nuitka.net>`_. It is the extremely compatible Python compiler, "
"`\"download now\" </doc/download.html>`_."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:13
msgid ""
"This release is focusing on optimization, the most significant part for "
"the users being enhanced scalability due to memory usage, but also break "
"through structural improvements for static analysis of iterators and the "
"debut of type shapes and value shapes, giving way to \"shape tracing\"."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:20
msgid "Bug Fixes"
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:22
msgid ""
"Fix support Python 3.5.2 coroutine changes. The checks got added for "
"improved mode for older 3.5.x, the new protocol is only supported when "
"run with that version or higher."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:26
msgid ""
"Fix, was falsely optimizing away unused iterations for non-iterable "
"compile time constants."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:33
msgid ""
"Python3: Fix, ``eval`` must not attempt to ``strip`` memoryviews. The was"
" preventing it from working with that type."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:36
msgid ""
"Fix, calling ``type`` without any arguments was crashing the compiler. "
"Also the exception raised for anything but 1 or 3 arguments was claiming "
"that only 3 arguments were allowed, which is not the compatible thing."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:41
msgid ""
"Python3.5: Fix, follow enhanced error checking for complex call handling "
"of star arguments."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:44
msgid ""
"Compatibility: The ``from x import x, y`` re-formulation was doing two "
"``__import__`` calls instead of re-using the module value."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:49
msgid "Optimization"
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:51
#, python-format
msgid ""
"Uses only about 66% of the memory compared to last release, which is very"
" important step for scalability independent of re-loading. This was "
"achieved by making sure to break loop traces and their reference cycle "
"when they become unused."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:56
msgid ""
"Properly detect the ``len`` of multiplications at compile time from newly"
" introduces value shapes, so that this is e.g. statically optimized."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:64
msgid ""
"Due to newly introduced type shapes, ``len`` and ``iter`` now properly "
"detect more often if values will raise or not, and warn about detected "
"raises."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:72
msgid ""
"Due to newly introduced \"iterator tracing\", we can now properly detect "
"if the length of an unpacking matches its source or not. This allows to "
"remove the check of the generic re-formulations of unpackings at compile "
"time."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:82
msgid "Added support for optimization of the ``xrange`` built-in for Python2."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:85
msgid ""
"Python2: Added support for ``xrange`` iterable constant values, pre-"
"building those constants ahead of time."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:88
msgid ""
"Python3: Added support and ``range`` iterable constant values, pre-"
"building those constants ahead of time. This brings optimization support "
"for Python3 ranges to what was available for Python2 already."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:92
msgid ""
"Avoid having a special node variange for ``range`` with no arguments, but"
" create the exception raising node directly."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:95
msgid ""
"Specialized constant value nodes are using less generic implementations "
"to query e.g. their length or iteration capabilities, which should speed "
"up many checks on them."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:99
msgid "Added support for the ``format`` built-in."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:101
msgid "Python3: Added support for the ``ascii`` built-in."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:105
msgid "Organisational"
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:107
msgid ""
"The movement to pure C got the final big push. All C++ only idoms of C++ "
"were removed, and everything works with C11 compilers. A C++03 compiler "
"can be used as a fallback, in case of MSVC or too old gcc for instance."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:112
msgid ""
"Using pure C, MinGW64 6x is now working properly. The latest version had "
"problems with ``hypot`` related changes in the C++ standard library. "
"Using C11 solves that."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:116
msgid ""
"This release also prepares Python 3.6 support, it includes full language "
"support on the level of CPython 3.6.0b1."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:119
msgid ""
"The CPython 3.6 test suite was run with Python 3.5 to ensure bug level "
"compatibility, and had a few findings of incompatibilities."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:124
msgid "Cleanups"
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:126
msgid ""
"The last holdouts of classes in Nuitka were removed, and many idioms of "
"C++ were stopped using."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:129
msgid "Moved range related helper functions to a dedicated include file."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:131
msgid ""
"Using ``str is not bytes`` to detect Python3 ``str`` handling or actual "
"``bytes`` type existence."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:134
msgid ""
"Trace collections were using a mix-in that was merged with the base class"
" that every user of it was having."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:139
msgid "Tests"
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:141
msgid ""
"Added more static optimization tests, a lot more has become feasible to "
"decide at run time, and is now done. These are to detect regressions in "
"that domain."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:145
msgid ""
"The CPython 3.6 test suite is now also run with CPython 3.5 which found "
"some incompatibilities."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:150
msgid "Summary"
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:152
msgid ""
"This release marks a huge step forward. We are having the structure for "
"type inference now. This will expand in coming releases to cover more "
"cases, and there are many low hanging fruits for optimization. "
"Specialized codes for variable versions of certain known shapes seems "
"feasible now."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:158
msgid ""
"Then there is also the move towards pure C. This will make the backend "
"compilation lighter, but due to using C11, we will not suffer any loss of"
" convenience compared to \"C-ish\". The plan is to use continue to use "
"C++ for compilation for compilers not capable of supporting C11."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:163
msgid ""
"The amount of static analysis done in Nuitka is now going to quickly "
"expand, with more and more constructs predicted to raise errors or "
"simplified. This will be an ongoing activity, as many types of "
"expressions need to be enhanced, and only one missing will not let it "
"optimize as well."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:169
msgid ""
"Also, it seems about time to add dedicated code for specific types to be "
"as fast as C code. This opens up vast possibilities for acceleration and "
"will lead us to zero overhead C bindings eventually. But initially the "
"drive is towards enhanced ``import`` analysis, to become able to know the"
" precide module expected to be imported, and derive type information from"
" this."
msgstr ""

#: ../../doc/posts/nuitka-release-0523.rst:176
msgid ""
"The coming work will attack to start whole program optimization, as well "
"as enhanced local value shape analysis, as well specialized type code "
"generation, which will make Nuitka improve speed."
msgstr ""

