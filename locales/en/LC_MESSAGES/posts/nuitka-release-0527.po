# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/nuitka-release-0527.rst:7
msgid "Nuitka Release 0.5.27"
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:9
msgid ""
"This is to inform you about the new stable release of `Nuitka "
"<https://nuitka.net>`_. It is the extremely compatible Python compiler, "
"`\"download now\" </doc/download.html>`_."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:13
msgid "This release comes a lot of bug fixes and improvements."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:17
msgid "Bug Fixes"
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:19
msgid ""
"Fix, need to add recursed modules immediately to the working set, or else"
" they might first be processed in second pass, where global names that "
"are locally assigned, are optimized to the built-in names although that "
"should not happen. Fixed in 0.5.26.1 already."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:24
msgid ""
"Fix, the accelerated call of methods could crash for some special types. "
"This had been a regress of 0.5.25, but only happens with custom extension"
" types. Fixed in 0.5.26.1 already."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:28
msgid ""
"Python3.5: For ``async def`` functions parameter variables could fail to "
"properly work with in-place assignments to them. Fixed in 0.5.26.4 "
"already."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:32
msgid ""
"Compatibility: Decorators that overload type checks didn't pass the "
"checks for compiled types. Now ``isinstance`` and as a result ``inspect``"
" module work fine for them."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:36
msgid ""
"Compatibility: Fix, imports from ``__init__`` were crashing the compiler."
" You are not supposed to do them, because they duplicate the package "
"code, but they work."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:40
msgid ""
"Compatibility: Fix, the ``super`` built-in on module level was crashing "
"the compiler."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:43
msgid ""
"Standalone: For Linux, BSD and macOS extension modules and shared "
"libraries using their own ``$ORIGIN`` to find loaded DLLs resulted in "
"those not being included in the distribution."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:47
msgid "Standalone: Added more missing implicit dependencies."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:49
msgid ""
"Standalone: Fix, implicit imports now also can be optional, as e.g. "
"``_tkinter`` if not installed. Only include those if available."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:52
msgid ""
"The ``--recompile-c-only`` was only working with C compiler as a backend,"
" but not in the C++ compatibility fallback, where files get renamed. This"
" prevented that edit and test debug approach with at least MSVC."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:57
msgid ""
"Plugins: The PyLint plug-in didn't consider the symbolic name ``import-"
"error`` but only the code ``F0401``."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:60
msgid ""
"Implicit exception raises in conditional expressions would crash the "
"compiler."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:65
msgid "New Features"
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:67
msgid "Added support for Visual Studio 2017."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:69
msgid ""
"Added option ``--python2-for-scons`` to specify the Python2 execute to "
"use for calling Scons. This should allow using Anaconda Python for that "
"task."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:75
msgid "Optimization"
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:77
msgid ""
"References to known unassigned variables are now statically optimized to "
"exception raises and warned about if the according option is enabled."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:81
msgid ""
"Unhashable keys in dictionaries are now statically optimized to exception"
" raises and warned about if the according option is enabled."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:84
msgid ""
"Enable forward propagation for classes too, resulting in some classes to "
"create only static dictionaries. Currently this never happens for "
"Python3, but it will, once we can statically optimize ``__prepare__`` "
"too."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:89
msgid ""
"Enable inlining of class dictionary creations if they are mere return "
"statements of the created dictionary. Currently this never happens for "
"Python3, see above for why."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:93
msgid ""
"Python2: Selecting the metaclass is now visible in the tree and can be "
"statically optimized."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:96
msgid ""
"For executables, we now also use a freelist for traceback objects, which "
"also makes exception cases slightly faster."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:99
msgid ""
"Generator expressions no longer require the use of a function call with a"
" ``.0`` argument value to carry the iterator value, instead their "
"creation is directly inlined."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:103
msgid ""
"Remove \"pass through\" frames for Python2 list contractions, they are no"
" longer needed. Minimal gain for generated code, but more lightweight at "
"compile time."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:107
msgid ""
"When compiling Windows x64 with MinGW64 a link library needs to be "
"created for linking against the Python DLL. This one is now cached and "
"re-used if already done."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:111
msgid ""
"Use common code for ``NameError`` and ``UnboundLocalError`` exception "
"code raises. In some cases it was creating the full string at compile "
"time, in others at run time. Since the later is more efficient in terms "
"of code size, we now use that everywhere, saving a bit of binary size."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:117
msgid ""
"Make sure to release unused functions from a module. This saves memory "
"and can be decided after a full pass."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:120
msgid ""
"Avoid using ``OrderedDict`` in a couple of places, where they are not "
"needed, but can be replaced with a later sorting, e.g. temporary "
"variables by name, to achieve deterministic output. This saves memory at "
"compile time."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:125
msgid ""
"Add specialized return nodes for the most frequent constant values, which"
" are ``None``, ``True``, and ``False``. Also a general one, for constant "
"value return, which avoids the constant references. This saves quite a "
"bit of memory and makes traversal of the tree a lot faster, due to not "
"having any child nodes for the new forms of return statements."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:132
msgid ""
"Previously the empty dictionary constant reference was specialized to "
"save memory. Now we also specialize empty set, list, and tuple constants "
"to the same end. Also the hack to make ``is`` not say that ``{} is {}`` "
"was made more general, mutable constant references and now known to never"
" alias."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:138
msgid ""
"The source references can be marked internal, which means that they "
"should never be visible to the user, but that was tracked as a flag to "
"each of the many source references attached to each node in the tree. "
"Making a special class for internal references avoids storing this in the"
" object, but instead it's now a class property."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:144
msgid ""
"The nodes for named variable reference, assignment, and deletion got "
"split into separate nodes, one to be used before the actual variable can "
"be determined during tree building, and one for use later on. This makes "
"their API clearer and saves a tiny bit of memory at compile time."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:150
msgid ""
"Also eliminated target variable references, which were pseudo children of"
" assignments and deletion nodes for variable names, that didn't really do"
" much, but consume processing time and memory."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:154
msgid ""
"Added optimization for calls to ``staticmethod`` and ``classmethod`` "
"built-in methods along with type shapes."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:157
msgid ""
"Added optimization for ``open`` built-in on Python3, also adding the type"
" shape ``file`` for the result."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:160
msgid ""
"Added optimization for ``bytearray`` built-in and constant values. These "
"mutable constants can now be compile time computed as well."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:163
msgid ""
"Added optimization for ``frozenset`` built-in and constant values. These "
"mutable constants can now be compile time computed as well."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:166
msgid "Added optimization for ``divmod`` built-in."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:168
msgid ""
"Treat all built-in constant types, e.g. ``type`` itself as a constant. So"
" far we did this only for constant values types, but of course this "
"applies to all types, giving slightly more compact code for their uses."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:173
msgid ""
"Detect static raises if iterating over non-iterables and warn about them "
"if the option is enabled."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:176
msgid ""
"Split of ``locals`` node into different types, one which needs the "
"updated value, and one which just makes a copy. Properly track if a "
"functions needs an updated locals dict, and if it doesn't, don't use "
"that. This gives more efficient code for Python2 classes, and ``exec`` "
"using functions in Python2."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:182
msgid ""
"Build all constant values without use of the ``pickle`` module which has "
"a lot more overhead than ``marshal``, instead use that for too large "
"``long`` values, non-UTF8 ``unicode`` values, ``nan`` float, etc."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:187
msgid ""
"Detect the linker arch for all Linux platforms using ``objdump`` instead "
"of only a hand few hard coded ones."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:192
msgid "Cleanups"
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:194
msgid "The use of ``INCREASE_REFCOUNT`` got fully eliminated."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:196
msgid ""
"Use functions not vulenerable for buffer overflow. This is generally good"
" and avoids warnings given on OpenBSD during linking."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:199
msgid ""
"Variable closure for classes is different from all functions, don't "
"handle the difference in the base class, but for class nodes only."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:202
msgid ""
"Make sure ``mayBeNone`` doesn't return ``None`` which means normally "
"\"unclear\", but ``False`` instead, since it's always clear for those "
"cases."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:206
msgid ""
"Comparison nodes were using the general comparison node as a base class, "
"but now a proper base class was added instead, allowing for cleaner code."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:210
msgid ""
"Valgrind test runners got changed to using proper tool namespace for "
"their code and share it."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:213
msgid ""
"Made construct case generation code common testing code for re-use in the"
" speedcenter web site. The code also has minor beauty bugs which will "
"then become fixable."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:217
msgid ""
"Use ``appdirs`` package to determine place to store the downloaded copy "
"of ``depends.exe``."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:220
msgid ""
"The code still mentioned C++ in a lot of places, in comments or "
"identifiers, which might be confusing readers of the code."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:223
msgid ""
"Code objects now carry all information necessary for their creation, and "
"no longer need to access their parent to determine flag values. That "
"parent is subject to change in the future."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:227
msgid ""
"Our import sorting wrapper automatically detects imports that could be "
"local and makes them so, removing a few existing ones and preventing "
"further ones on the future."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:231
msgid ""
"Cleanups and annotations to become Python3 PyLint clean as well. This "
"found e.g. that source code references only had ``__cmp__`` and need rich"
" comparison to be fully portable."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:237
msgid "Tests"
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:239
msgid ""
"The test runner for construct tests got cleaned up and the constructs now"
" avoid using ``xrange`` so as to not need conversion for Python3 "
"execution as much."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:243
msgid ""
"The main test runner got cleaned up and uses common code making it more "
"versatile and robust."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:246
msgid ""
"Do not run test in debugger if CPython also segfaulted executing the "
"test, then it's not a Nuitka issue, so we can ignore that."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:249
msgid ""
"Improve the way the Python to test with is found in the main test runner,"
" prefer the running interpreter, then ``PATH`` and registry on Windows, "
"this will find the interesting version more often."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:253
msgid ""
"Added support for \"Landscape.io\" to ignore the inline copies of code, "
"they are not under our control."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:256
msgid ""
"The test runner for Valgrind got merged with the usage for constructs and"
" uses common code now."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:259
msgid ""
"Construct generation is now common code, intended for sharing it with the"
" Speedcenter web site generation."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:262
msgid ""
"Rebased Python 3.6 test suite to 3.6.1 as that is the Python generally "
"used now."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:267
msgid "Organisational"
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:269
msgid "Added inline copy of ``appdirs`` package from PyPI."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:271
msgid "Added credits for RedBaron and isort."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:273
msgid ""
"The ``--experimental`` flag is now creating a list of indications and "
"more than one can be used that way."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:276
msgid "The PyLint runner can also work with Python3 pylint."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:278
msgid ""
"The Nuitka Speedcenter got more fine tuning and produces more tags to "
"more easily identify trends in results. This needs to become more visible"
" though."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:282
msgid ""
"The MSI files are also built on AppVeyor, where their building will not "
"depend on me booting Windows. Getting these artifacts as downloads will "
"be the next step."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:288
msgid "Summary"
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:290
msgid ""
"This release improves many areas. The variable closure taking is now "
"fully transparent due to different node types, the memory usage dropped "
"again, a few obvious missing static optimizations were added, and many "
"built-ins were completed."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:295
msgid ""
"This release again improves the scalability of Nuitka, which again uses "
"less memory than before, although not an as big jump as before."
msgstr ""

#: ../../doc/posts/nuitka-release-0527.rst:298
msgid ""
"This does not extend or use special C code generation for ``bool`` or any"
" type yet, which still needs design decisions to proceed and will come in"
" a later release."
msgstr ""

