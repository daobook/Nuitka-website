# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/nuitka-release-0532.rst:7
msgid "Nuitka Release 0.5.32"
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:9
msgid ""
"This is to inform you about the new stable release of `Nuitka "
"<https://nuitka.net>`_. It is the extremely compatible Python compiler, "
"`\"download now\" </doc/download.html>`_."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:13
msgid ""
"This release contains substantial new optimization, bug fixes, and "
"already the full support for Python 3.7. Among the fixes, the enhanced "
"coroutine work for compatibility with uncompiled ones is most important."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:19
msgid "Bug Fixes"
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:21
msgid "Fix, was optimizing write backs of attribute in-place assignments falsely."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:24
msgid ""
"Fix, generator stop future was not properly supported. It is now the "
"default for Python 3.7 which showed some of the flaws."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:27
msgid "Python3.5: The ``__qualname__`` of coroutines and asyncgen was wrong."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:29
msgid ""
"Python3.5: Fix, for dictionary unpackings to calls, check the keys if "
"they are string values, and raise an exception if not."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:32
msgid ""
"Python3.6: Fix, need to check assignment unpacking for too short "
"sequences, we were giving ``IndexError`` instead of ``ValueError`` for "
"these. Also the error messages need to consider if they should refer to "
"\"at least\" in their wording."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:37
msgid ""
"Fix, outline nodes were cloned more than necessary, which would corrupt "
"the code generation if they later got removed, leading to a crash."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:41
msgid ""
"Python3.5: Compiled coroutines awaiting uncompiled coroutines was not "
"working properly for finishing the uncompiled ones. Also the other way "
"around was raising a ``RuntimeError`` when trying to pass an exception to"
" them when they were already finished. This should resolve issues with "
"``asyncio`` module."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:47
msgid ""
"Fix, side effects of a detected exception raise, when they had an "
"exception detected inside of them, lead to an infinite loop in "
"optimization. They are now optimized in-place, avoiding an extra step "
"later on."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:54
msgid "New Features"
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:56
msgid "Support for Python 3.7 with only some corner cases not supported yet."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:60
msgid "Optimization"
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:62
msgid ""
"Delay creation of ``StopIteration`` exception in generator code for as "
"long as possible. This gives more compact code for generations, which now"
" pass the return values via compiled generator attribute for Python 3.3 "
"or higher."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:67
msgid ""
"Python3: More immediate re-formulation of classes with no bases. Avoids "
"noise during optimization."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:70
msgid ""
"Python2: For class dictionaries that are only assigned from values "
"without side effects, they are not converted to temporary variable "
"usages, allowing the normal SSA based optimization to work on them. This "
"leads to constant values for class dictionaries of simple classes."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:76
msgid ""
"Explicit cleanup of nodes, variables, and local scopes that become "
"unused, has been added, allowing for breaking of cyclic dependencies that"
" prevented memory release."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:82
msgid "Tests"
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:84
msgid "Adapted 3.5 tests to work with 3.7 coroutine changes."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:86
msgid "Added CPython 3.7 test suite."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:90
msgid "Cleanups"
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:92
msgid ""
"Removed remaining code that was there for 3.2 support. All uses of "
"version comparisons with 3.2 have been adapted. For us, Python3 now means"
" 3.3, and we will not work with 3.2 at all. This removed a fair bit of "
"complexity for some things, but not all that much."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:97
msgid ""
"Have dedicated file for import released helpers, so they are easier to "
"find if necessary. Also do not have code for importing a name in the "
"header file anymore, not performance relevant."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:101
msgid ""
"Disable Python warnings when running scons. These are particularly given "
"when using a Python debug binary, which is happening when Nuitka is run "
"with ``--python-debug`` option and the inline copy of Scons is used."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:106
msgid ""
"Have a factory function for all conditional statement nodes created. This"
" solved a TODO and handles the creation of statement sequences for the "
"branches as necessary."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:110
msgid ""
"Split class reformulation into two files, one for Python2 and one for "
"Python3 variant. They share no code really, and are too confusing in a "
"single file, for the huge code bodies."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:114
msgid ""
"Locals scopes now have a registry, where functions and classes register "
"their locals type, and then it is created from that."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:117
msgid ""
"Have a dedicated helper function for single argument calls in static code"
" that does not require an array of objects as an argument."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:122
msgid "Organisational"
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:124
msgid ""
"There are now ``requirements-devel.txt`` and ``requirements.txt`` files "
"aimed at usage with scons and by users, but they are not used in "
"installation."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:130
msgid "Summary"
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:132
msgid ""
"This releases has this important step to add conversion of locals "
"dictionary usages to temporary variables. It is not yet done everywhere "
"it is possible, and the resulting temporary variables are not yet "
"propagated in the all the cases, where it clearly is possible. Upcoming "
"releases ought to achieve that most Python2 classes will become to use a "
"direct dictionary creation."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:139
msgid ""
"Adding support for Python 3.7 is of course also a huge step. And also "
"this happened fairly quickly and soon after its release. The generic "
"classes it adds were the only real major new feature. It breaking the "
"internals for exception handling was what was holding back initially, but"
" past that, it was really easy."
msgstr ""

#: ../../doc/posts/nuitka-release-0532.rst:145
msgid ""
"Expect more optimization to come in the next releases, aiming at both the"
" ability to predict Python3 metaclasses ``__prepare__`` results, and at "
"more optimization applied to variables after they became temporary "
"variables."
msgstr ""

