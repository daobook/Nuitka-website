# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/nuitka-release-066.rst:7
msgid "Nuitka Release 0.6.6"
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:9
msgid ""
"This is to inform you about the new stable release of `Nuitka "
"<https://nuitka.net>`_. It is the extremely compatible Python compiler, "
"`\"download now\" </doc/download.html>`_."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:13
msgid ""
"This release contains huge amounts of crucial bug fixes all across the "
"board. There is also new optimization and many organisational "
"improvements."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:19
msgid "Bug Fixes"
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:21
msgid ""
"Fix, the top level module must not be bytecode. Otherwise we end up "
"violating the requirement for an entry point on the C level."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:24
msgid ""
"Fix, avoid optimizing calls with default values used. This is not yet "
"working and needed to be disabled for now."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:27
msgid ""
"Python3: Fix, missing keyword only arguments were not enforced to be "
"provided keyword only, and were not giving the compatible error message "
"when missing."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:31
msgid ""
"Windows: Find ``win32com`` DLLs too, even if they live in sub folders of "
"site-packages, and otherwise not found. They are used by other DLLs that "
"are found."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:35
msgid ""
"Standalone: Fixup for problem with standard library module in most recent"
" Anaconda versions."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:38
msgid ""
"Scons: Fix, was using ``CXXFLAGS`` and ``CPPFLAGS`` even for the C "
"compiler, which is wrong, and could lead to compilation errors."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:41
msgid ""
"Windows: Make ``--clang`` limited to ``clang-cl.exe`` as using it inside "
"a MinGW64 is not currently supported."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:44
msgid "Standalone: Added support for using ``lib2to2.pgen``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:46
msgid "Standalone: Added paths used by openSUSE to the Tcl/Tk plugin."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:48
msgid ""
"Python3.6+: Fix, the ``__main__`` package was ``None``, but should be "
"``\"\"`` which allows relative imports from itself."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:51
msgid ""
"Python2: Fix, compile time optimization of floor division was using "
"normal division."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:54
msgid ""
"Python3: Fix, some run time operations with known type shapes, were "
"falsely reporting error message with ``unicode`` or ``long``, which is of"
" course not compatible."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:58
msgid ""
"Fix, was caching parent package, but these could be replaced e.g. due to "
"bytecode demotion later, causing crashes during their optimization."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:62
msgid ""
"Fix, the value of ``__compiled__`` could be corrupted when being deleted,"
" which some modules wrappers do."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:65
msgid "Fix, the value of ``__package__`` could be corrupted when being deleted."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:68
msgid ""
"Scons: Make sure we can always output the compiler output, even if it has"
" a broken encoding. This should resolve MSVC issues on non-English "
"systems, e.g. German or Chinese."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:72
msgid "Standalone: Support for newest ``sklearn`` was added."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:74
msgid ""
"macOS: Added resolver for run time variables in ``otool`` output, that "
"gets PyQt5 to work on it again."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:77
msgid ""
"Fix, floor division of run time calculations with float values should not"
" result in ``int``, but ``float`` values instead."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:80
msgid "Standalone: Enhanced support for ``boto3`` data files."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:82
msgid "Standalone: Added support for ``osgeo`` and ``gdal``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:84
msgid ""
"Windows: Fix, there were issues with spurious errors attaching the "
"constants blob to the binary due to incorrect C types provided."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:87
msgid "Distutils: Fix, need to allow ``/`` as separator for package names too."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:90
msgid ""
"Python3.6+: Fix reference losses in asyncgen when throwing exceptions "
"into them."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:93
msgid "Standalone: Added support for ``dill``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:95
msgid "Standalone: Added support for ``scikit-image`` and ``skimage``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:97
msgid "Standalone: Added support for ``weasyprint``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:99
msgid "Standalone: Added support for ``dask``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:101
msgid "Standalone: Added support for ``pendulum``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:103
msgid "Standalone: Added support for ``pytz`` and ``pytzdata``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:105
msgid ""
"Fix, ``--python-flags=no_docstrings`` no longer implies disabling the "
"assertions."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:110
msgid "New Features"
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:112
msgid ""
"Added experimental support for Python 3.8, there is only very few things "
"missing for full support."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:115
msgid ""
"Distutils: Added support for packages that are in a namespace and not "
"just top level."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:118
msgid ""
"Distutils: Added support for single modules, not only packages, by "
"supporting ``py_modules`` as well."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:121
msgid "Distutils: Added support for distinct namespaces."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:123
msgid ""
"Windows: Compare Python and C compiler architecture for MSVC too, and "
"catch the most common user error of mixing 32 and 64 bits."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:126
msgid "Scons: Output variables used from the outside, so the debugging is easier."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:129
msgid ""
"Windows: Detect if clang installed inside MSVC automatically and use it "
"if requested via ``--clang`` option. This is only the 32 bits variant, "
"but currently the easy way to use it on Windows with Nuitka."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:135
msgid "Optimization"
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:137
msgid ""
"Loop variables were analysed, but results were only available on the "
"inside of the loop, preventing many optimization in these cases."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:140
msgid ""
"Added optimization for the ``abs`` built-in, which is also a numerical "
"operator."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:143
msgid ""
"Added optimization for the ``all`` built-in, adding a new concept of "
"iteration handle, for efficient checking that avoids looking at very "
"large sequences, of which properties can still be known."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:151
msgid ""
"Added support for optimizing ``ImportError`` construction with keyword-"
"only arguments. Previously only used without these were optimized."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:159
msgid ""
"Added manual specialization for single argument calls, sovling a TODO, as"
" these will be very frequent."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:162
msgid ""
"Memory: Use single child form of node class where possible, the general "
"class now raises an error if used with used with only one child name, "
"this will use less memory at compile time."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:166
msgid ""
"Memory: Avoid list for non-local declarations in every function, these "
"are very rare, only have it if absolutely necessary."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:169
msgid ""
"Generate more compact code for potential ``NameError`` exceptions being "
"raised. These are very frequent, so this improves scalability with large "
"files."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:173
msgid ""
"Python2: Annotate comparison of ``None`` with ``int`` and ``str`` types "
"as not raising an exception."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:176
msgid "Shared empty body functions and generators."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:178
msgid ""
"One shared implementation for all empty functions removes that burden "
"from the C compiler, and from the CPU instruction cache. All the shared C"
" code does is to release its arguments, or to return an empty generator "
"function in case of generator."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:183
msgid ""
"Memory: Added support for automatic releases of parameter variables from "
"the node tree. These are normally released in a try finally block, "
"however, this is now handled during code generation for much more compact"
" C code generated."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:188
msgid ""
"Added specialization for ``int`` and ``long`` operations ``%``, ``<<``, "
"``>>``, ``|``, ``&``, ``^``, ``**``, ``@``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:191
msgid ""
"Added dedicated nodes for representing and optimizing based on shapes for"
" all binary operations."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:194
msgid ""
"Disable gcc macro tracing unless in debug mode, to save memory during the"
" C compilation."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:197
msgid ""
"Restored Python2 fast path for ``int`` with unknown object types, "
"restoring performance for these."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:202
msgid "Cleanups"
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:204
msgid ""
"Use dedicated ``ModuleName`` type that makes the tests that check if a "
"given module name is inside a namespace as methods. This was hard to get "
"right and as a result, adopting this fixed a few bugs and or inconsistent"
" results."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:209
msgid ""
"Expand the use of ``nuitka.PostProcessing`` to cover all actions needed "
"to get a runnable binary. This includes using ``install_name_tool`` on "
"macOS standalone, as well copying the Python DLL for acceleration mode, "
"cleaning the ``x`` bit for module mode. Previously only a part of these "
"lived there."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:215
msgid ""
"Avoid including the definitions of dynamically created helper functions "
"in the C code, instead just statically declare the ones expected to be "
"there. This resolves Visual Code complaining about it, and should make "
"life also easier for the compiler and caches like ``ccache``."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:221
msgid ""
"Create more helper code in closer form to what ``clang-format`` does, so "
"they are easier to compare to the static forms. We often create hard "
"coded variants for few arguments of call functions, and generate them for"
" many argument variations."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:226
msgid ""
"Moved setter/getter methods for Nuitka nodes consistently to the start of"
" the node class definitions."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:229
msgid ""
"Generate C code much closer to what ``clang-format`` would change it to "
"be."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:232
msgid ""
"Unified calling ``install_name_tool`` on macOS into one function that "
"takes care of all the things, including e.g. making the file writable."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:236
msgid "Debug output from scons should be more consistent and complete now."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:238
msgid "Sort files for compilation in scons for better reproducible results."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:240
msgid ""
"Create code objects version independent, avoiding python version checks "
"by pre-processor, hiding new stuff behind macros, that ignore things on "
"older Python versions."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:246
msgid "Tests"
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:248
msgid ""
"Added many more built-in tests for increased coverage of the newly "
"covered ones, some of them being generic tests that allow to test all "
"built-ins with typical uses."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:252
msgid ""
"Many tests have become more PyLint clean as a result of work with Visual "
"Code and it complaining about them."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:255
msgid ""
"Added test to check PyPI health of top 50 packages. This is a major GSoC "
"2019 result."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:258
msgid ""
"Output the standalone directory contents for Windows too in case of a "
"failure."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:261
msgid ""
"Added generated tests to fully cover operations on different type shapes "
"and their errors as well as results for typical values."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:264
msgid "Added support for testing against installed version of Nuitka."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:266
msgid ""
"Cleanup up tests, merging those for only Python 3.2 with 3.3 as we no "
"longer support that version anyway."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:269
msgid "Execute the Python3 tests for macOS on Travis too."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:273
msgid "Organisational"
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:275
msgid ""
"The donation sponsored machine called ``donatix`` had to be replaced due "
"to hardware breakage. It was replaced with a Raspberry-Pi 4."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:278
msgid "Enhanced plugin documentation."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:280
msgid "Added description of the git workflow to the Developer Manual."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:282
msgid ""
"Added checker script ``check-nuitka-with-codespell`` that reports typos "
"in the source code for easier use of ``codespell`` with Nuitka."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:285
msgid "Use newest PyLint and clang-format."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:287
msgid "Also check plugin documentation files for ReST errors."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:289
msgid "Much enhanced support for Visual Code configuration."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:291
msgid ""
"Trigger module code is now written into the build directory in debug "
"mode, to aid debugging."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:294
msgid ""
"Added deep check function that descends into tuples to check their "
"elements too."
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:299
msgid "Summary"
msgstr ""

#: ../../doc/posts/nuitka-release-066.rst:301
msgid ""
"This release comes after a long time of 4 months without a release, and "
"has accumulated massive amounts of changes. The work on CPython 3.8 is "
"not yet complete, and the performance work has yet to show actual fruit, "
"but has also progressed on all fronts. Connecting the dots and pieces "
"seems not far away."
msgstr ""

