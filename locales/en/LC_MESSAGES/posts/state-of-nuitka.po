# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/posts/state-of-nuitka.rst:7
msgid "State of Nuitka"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:9
msgid "Contents"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:11
msgid ""
"For quite some time, publicly, very little has happened with my Python "
"compiler Nuitka. But that doesn't mean, there hasn't been progress. In "
"fact it is tremendous. I would like to have a post that kind of "
"summarizes, what happened."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:16
msgid ""
"The last release, 0.5.1 was more of a maintenance release than making "
"real changes. It turns out, that the bigger changes got delayed by a "
"feature that I have described as \"C-ish\". Let me outline, what this "
"means."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:23
msgid "C-ish vs. C++-ish"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:25
msgid ""
"When I started working on Nuitka, the big question was if it is possible "
"to create a sufficiently compatible compiler. The use of C++11 then, "
"together with some templates made it easy to cover a wide, wide part of "
"the language, and to fully integrate with CPython for compatibility."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:30
msgid ""
"The main goal was to get it going to work correctly. As time went on, "
"execution order demanded to do away with variadic templates, raw strings "
"were not all that perfect at all, and so C++-03 was good enough at one "
"point."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:35
msgid ""
"And then, as Nuitka became less and less template based, and shoving more"
" things into the node tree, and re-formulations, making this where the "
"knowledge resided. It became more and more obvious that C++ has two "
"problems. One in the way I used it. One inherent in the language typical "
"implementations:"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:41
msgid "C++ exceptions are god damn slow"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:43
msgid "Everything should be a in a single statement."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:45
msgid ""
"The later was my choice. Initially it made it easy to pass on references "
"and put the releasing C++ class around every expression as necessary. "
"Identifier classes were allowing for code generation to avoid taking "
"references where necessary, and it was not all that bad. Yet limiting."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:50
msgid "This led to a couple of issues."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:52
msgid ""
"The order of call arguments release for e.g. ``f(g(h()))`` was not "
"completely compatible, with the way how CPython does it. C++ destructors "
"for objects living in a single statement didn't give sufficient control, "
"and make the order and timing of finalization not compatible."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:58
msgid ""
"The generated C++ code complexity became large. The compilation of the "
"generated C++ in some cases was huge. To the point, that e.g. \"code too "
"complex\" was giving by compilers like MSVC for some modules."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:63
msgid ""
"Cases of in-place assignments were discovered, where CPython outperforms "
"Nuitka by a large margin. But these don't fit into that style of code "
"generation."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:67
msgid ""
"So, at some point, the pain had built up. Code generation was already "
"lighter than in the beginning. For example, initially ``with`` statements"
" had dedicated code templates to them. This, and many other things, are "
"long gone."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:72
msgid ""
"I took a deep dive, and **rewrote** the whole code generation, to be much"
" more \"C-ish\" than \"C++-ish\". A huge undertaking that would take "
"months."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:76
msgid ""
"Where previously, code didn't have to handle return error codes (a C++ "
"exception was thrown), now everything needed a return value name, and "
"error check."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:80
msgid ""
"Where classes were previously conviently made sure things happened at "
"function or scope exit, manual handling needed to be added."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:83
msgid ""
"The handling of ``continue``, ``break``, and ``return`` was previously "
"done with exceptions being thrown, if they were to pass a "
"``try``/``finally`` handler. Now these are done with stacks of exit "
"handlers, where ``goto`` statements are used to produce the correct "
"behaviour."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:91
msgid "Rewriting Code Generation"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:93
msgid ""
"Redoing code generation, over months, while ultimately, slowly, arriving "
"at a point where Nuitka would be doing this, it already did before, was "
"kind of frustrating."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:97
msgid ""
"Of course, the performance benefit would be there, but it would not be "
"all that much, except for exception raising and handling. There it would "
"be huge. Ultimately for PyStone, a couple of extra percents were gained."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:101
msgid ""
"This really was a point, where I felt, that Nuitka will make it or break."
" And for a long time, I honestly wasn't so sure, that I pull through. But"
" I did."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:107
msgid "Current Situation"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:109
msgid ""
"The current pre-release is release quality. You should try it out, it's "
"great."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:112
msgid ""
"There are many changes to Standalone mode. Due to changes in how "
"constants are now created in the modules that uses them, instead of "
"everything globally, the parallel compilation now works great. What "
"previously took an hour with MSVC (the problem child, gcc was always "
"relatively good), now takes minutes only."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:118
msgid ""
"The support for virtualenv's of all kinds seems to work on Windows, "
"Linux, and macOS, which all seem to have different kinds of codes."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:121
msgid ""
"The support for macOS is now there. Thanks to a virtual server month "
"donated to Jarrad Hope, I was able to iron issues out."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:124
msgid ""
"The final release will also work with standalone binaries created on "
"Fedora 20 which got hard code rpaths removed on the factory git branch."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:128
msgid ""
"And yet, I am not yet releasing. In fact, I would like to ask you to give"
" it a roll, and integrate test feedback."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:131
msgid ""
"Although more tests than ever are executed and pass, (e.g. the Mercurial "
"test suite is now run each time I make a commit, and fully identically "
"passes or fails the test suite with the current Mercurial code), there "
"can never be enough."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:136
msgid ""
"The changes I made are the most intense ever, and definitely have "
"potential for regressions. I am used to providing very high quality "
"releases."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:140
msgid ""
"Also, I am working on the Buildbot instances to automate the production "
"of `performance graphs <https://speedcenter.nuitka.net>`__, which get "
"updated fully automatically. I am working on updating the downloads page "
"automatically for each release that gets made."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:145
msgid ""
"And generally, I am trying to improve my work flow, to make it easier to "
"push out releases with less effort. Buildbot should drive the release "
"process more completely. I am using the git flow to provide hot-fixes, "
"and this should be even less painful in the future."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:152
msgid "Open Points"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:154
msgid ""
"With this release, presenting great progress, many things remain in an "
"unfinished state."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:157
msgid ""
"The support for Python3.4 is not complete. Most things work, but some "
"need more work. Specifically the changes to ``__class__`` variable "
"closure taking, need another major refactoring, this time on variable "
"handling."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:162
msgid ""
"Currently there are variables, closure variables, temp variables, and "
"then temp variable references. The way they work is different. One way "
"they work different, prevents a temp variable closure reference to carry "
"a name, in that case ``-_class__``, which would be needed for Python3.4, "
"where that is suddenly necessary."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:168
msgid ""
"With this done, the SSA code will be even easier to write, as temp "
"variables and named variables will finally be fully unified."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:171
msgid ""
"The use of C++ classes is largely reduced now. But a few still remain, "
"namely for local variables, closure variables, and temp variables that "
"are explicit variables. They still use C++ classes, although changing "
"that seems quite possible now, because at least for temporary variables, "
"the class doesn't do anything in terms of code anymore."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:178
msgid "Removing these classes may well gain more performance."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:180
msgid ""
"Now that code generation can more easily make a difference, and SSA "
"apparently is becoming reliable, it could be used to *know* that values "
"must be value and to optimize checks away."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:184
msgid ""
"Currently every variable access checks for \"NULL\", when it's part of an"
" assign trace. Some optimizations exist for parameter variables without "
"``del`` on them, that do not use SSA."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:188
msgid ""
"This could be expanded and made general, allowing for much less code to "
"be generated (specifically avoiding error code, and release code for "
"variables that cannot give an error)."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:192
msgid ""
"The SSA has been found unreliable in some instances, due to bugs that I "
"believe I found. We could attempt and forward propagate variable "
"assignments to where they are used, eliminating variables, etc."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:196
msgid ""
"This is a place, where a lot of performance can be gained. We really want"
" to be there. And \"C-ish\" now makes this ever more attractive, despite "
"the large delay in time it has caused."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:200
msgid ""
"The in-place assignment code for strings, where CPython can be way faster"
" than current Nuitka, it bears a risk of getting it wrong. It is "
"therefore pushed to a future release."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:206
msgid "Other Things"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:208
msgid ""
"For the website, I am relocating the virtual machine to a dedicated "
"server rented for an increased price. This will allow to add a few more "
"dynamic features, as the virtual machine was always too limited in RAM. "
"It's more expensive, but I feel a better investment of my time."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:213
msgid ""
"As mentioned before, I am not going to conferences this year. Enjoy "
"Europython, and consider having a Lightning talk about Nuitka. I will be "
"there next year again."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:219
msgid "Call for Help"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:221
msgid "Please test the latest release of Nuitka."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:223
msgid ""
"Please consider `making a donation </pages/donations.html>`_ to support "
"my work on Nuitka. I have continuous monthly costs of it, so it would be "
"sweet if it's with all my time spent working on it, at least not a "
"financial cost to me."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:229
msgid ""
"Please join the mailing list (since closed), and offer your help with "
"tasks. Nuitka can seriously take more people developing, testing, "
"reviewing, and quality checking it."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:235
msgid "Final Words"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:237
msgid ""
"So, there is this \"C-ish\" release 0.5.2 cooking. You are invited to "
"help. Big, improvements are coming to Nuitka. Even after this next huge "
"release, very important work is still open, but hope is to have this "
"complete over the summer."
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:242
msgid "Yours,"
msgstr ""

#: ../../doc/posts/state-of-nuitka.rst:243
msgid "Kay"
msgstr ""

