# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 15:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../posts/letting-go-of-c11.rst:5
msgid "How Nuitka came to use C++11 and then stop it."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:9
msgid "Letting go of C++11"
msgstr ""

#: ../../posts/letting-go-of-c11.rst:11
msgid ""
"This post is about Nuitka the Python compiler started out using C++0x "
"which is now C++11, and then chose to stop it."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:16
msgid "In the Beginning"
msgstr ""

#: ../../posts/letting-go-of-c11.rst:18
msgid ""
"Very early on, when I considered how to generate code from the node tree,"
" in a way, that mistakes should practically be impossible to make, I made"
" the fundamental decision, that every Python expression, which produces "
"temporary variables, should become an expression in the generated code "
"too."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:26
msgid ""
"That is my choice, I think it keeps code generation more simple, and "
"easier to understand. There may come a separate post about how that "
"played out."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:30
msgid ""
"That decision meant some trouble. Certain things were not easy, but "
"generally, it was achievable for g++ relatively quickly, and then lots of"
" helper functions would be needed. Think of ``MAKE_TUPLE`` and "
"``MAKE_DICT``, but also other stuff needed that. Calling a Python built-"
"in with variable number of parameters e.g. could be implemented that way "
"easily."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:37
msgid ""
"Other nice things were ``enum`` classes, and generally good stuff. It was"
" really quick to get Nuitka code generation off the ground this way."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:49
msgid "Reality Strikes"
msgstr ""

#: ../../posts/letting-go-of-c11.rst:51
msgid ""
"But then, as time went on, I found that the order of evaluation was "
"becoming an issue. It became apparent that for more and more things, I "
"needed to reverse it, so it works. Porting to ARM, it then became clear, "
"that it needs to be the other way around for that platform. And checking "
"out clang, which is also a C++11 compiler, I noticed, this one yet uses a"
" different one."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:58
msgid ""
"So, for normal functions, I found a solution that involves the pre-"
"processor to reverse or not, *both* function definition and call sites, "
"and then it is already correct."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:62
msgid ""
"This of course, doesn't work for C++11 variadic functions. So, there came"
" a point, where I had to realize, that each of its uses was more or less "
"causing evaluation order bugs. So that most of their uses were already "
"removed. And so I basically knew they couldn't stay that way."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:69
msgid "Other Features"
msgstr ""

#: ../../posts/letting-go-of-c11.rst:71
msgid ""
"Also, things I initially assumed, e.g. that lambda functions of C++11 may"
" prove useful, or even \"auto\", didn't turn out to be true. There "
"seemingly is a wealth of new features, besides variadic templates that I "
"didn't see how Nuitka would benefit from it at all."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:78
msgid "New Wishes"
msgstr ""

#: ../../posts/letting-go-of-c11.rst:80
msgid ""
"Then, at Europython, I realized, that Android is still stuck with g++-4.4"
" and as such, that an important target platform will be unavailable to "
"me. This platform will become even more important, as I intend to buy an "
"device now."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:87
msgid "Biting it"
msgstr ""

#: ../../posts/letting-go-of-c11.rst:89
msgid ""
"So what I did, was to remove all variadic functions and instead generate "
"code for them as necessary. I just need to trace the used argument "
"counts, and then provide those, simple enough."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:93
msgid ""
"Also, other things like deleted copy constructors, and so on, I had to "
"give up on these a bit."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:96
msgid ""
"This change was probably suited to remove subtle evaluation order "
"problems, although I don't recall seeing them."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:101
msgid "The Present"
msgstr ""

#: ../../posts/letting-go-of-c11.rst:103
msgid ""
"The current stable release still requires C++11, but the next release "
"will work on g++-4.4 and compiles fine with MSVC from Visual Studio 2008,"
" although at this time, there is still the issue of generators not "
"working yet, but I believe that ought to be solvable."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:108
msgid ""
"The new requirement is only C++03, which means, there is a good chance "
"that supporting Android will become feasible. I know there is interest "
"from App developers, because there, even the relatively unimportant 2x "
"speedup, that Nuitka might give for some code, may matter."
msgstr ""

#: ../../posts/letting-go-of-c11.rst:115
msgid "Conclusion"
msgstr ""

#: ../../posts/letting-go-of-c11.rst:117
msgid ""
"So that is a detour, I have taken, expanding the base of Nuitka even "
"further. I felt, this was important enough to write down the history part"
" of it."
msgstr ""

