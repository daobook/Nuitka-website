# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 15:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../posts/nuitka-release-0515.rst:7
msgid "Nuitka Release 0.5.15"
msgstr ""

#: ../../posts/nuitka-release-0515.rst:9
msgid ""
"This is to inform you about the new stable release of `Nuitka "
"<https://nuitka.net>`_. It is the extremely compatible Python compiler, "
"`\"download now\" </doc/download.html>`_."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:13
msgid ""
"This release enables SSA based optimization, the huge leap, not so much "
"in terms of actual performance increase, but for now making the things "
"possible that will allow it."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:17
msgid ""
"This has been in the making literally for years. Over and over, there was"
" just \"one more thing\" needed. But now it's there."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:20
msgid ""
"The release includes much stuff, and there is a perspective on the open "
"tasks in the summary, but first out to the many details."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:25
msgid "Bug Fixes"
msgstr ""

#: ../../posts/nuitka-release-0515.rst:27
msgid ""
"Standalone: Added implicit import for ``reportlab`` package configuration"
" dynamic import. Fixed in 0.5.14.1 already."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:30
msgid ""
"Standalone: Fix, compilation of the ``ctypes`` module could happen for "
"some import patterns, and then prevented the distribution to contain all "
"necessary libraries. Now it is made sure to not include compiled and "
"frozen form both. Fixed in 0.5.14.1 already."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:35
msgid ""
"Fix, compilation for conditional statements where the boolean check on "
"the condition cannot raise, could fail compilation. Fixed in 0.5.14.2 "
"already."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:39
msgid ""
"Fix, the ``__import__`` built-in was making static optimization assuming "
"compile time constants to be strings, which in the error case they are "
"not, which was crashing the compiler."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:47
msgid ""
"This error became only apparent, because now in some cases, Nuitka "
"forward propagates values."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:50
msgid ""
"Windows: Fix, when installing Python2 only for the user, the detection of"
" it via registry failed as it was only searching system key. This was `a "
"github pull request <https://github.com/kayhayen/Nuitka/pull/8>`__. Fixed"
" in 0.5.14.3 already."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:56
msgid ""
"Some modules have extremely complex expressions requiring too deep "
"recursion to work on all platforms. These modules are now included "
"entirely as bytecode fallback."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:60
msgid ""
"The standard library may contain broken code due to installation "
"mistakes. We have to ignore their ``SyntaxError``."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:63
msgid ""
"Fix, pickling compiled methods was failing with the wrong kind of error, "
"because they should not implement ``__reduce__``, but only "
"``__deepcopy__``."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:67
msgid ""
"Fix, when running under ``wine``, the check for scons binary was fooled "
"by existence of ``/usr/bin/scons``."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:72
msgid "New Features"
msgstr ""

#: ../../posts/nuitka-release-0515.rst:74
msgid ""
"Added experimental support for Python3.5, coroutines don't work yet, but "
"it works perfectly as a 3.4 replacement."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:77
msgid ""
"Added experimental Nuitka plug-in framework, and use it for the packaging"
" of Qt plugins in standalone mode. The API is not yet stable nor "
"polished."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:81
msgid ""
"New option ``--debugger`` that makes ``--run`` execute directly in "
"``gdb`` and gives a stack trace on crash."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:84
msgid ""
"New option ``--profile`` executes compiled binary and outputs measured "
"performance with ``vmprof``. This is work in progress and not functional "
"yet."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:88
msgid ""
"Started work on ``--graph`` to render the SSA state into diagrams. This "
"is work in progress and not functional yet."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:91
msgid ""
"Plug-in framework added. Not yet ready for users. Working ``PyQt4`` and "
"``PyQt5`` plug-in support. Experimental Windows ``multiprocessing`` "
"support. Experimental PyLint warnings disable support. More to come."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:96
msgid ""
"Added support for Anaconda accelerated mode on macOS by modifying the "
"rpath to the Python DLL."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:99
msgid ""
"Added experimental support for ``multiprocessing`` on Windows, which "
"needs monkey patching of the module to support compiled methods."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:104
msgid "Optimization"
msgstr ""

#: ../../posts/nuitka-release-0515.rst:106
msgid ""
"The SSA analysis is now enabled by default, eliminating variables that "
"are not shared, and can be forward propagated. This is currently limited "
"mostly to compile time constants, but things won't remain that way."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:111
msgid ""
"Code generation for many constructs now takes into account if a specific "
"operation can raise or not. If e.g. an attribute look-up is known to not "
"raise, then that is now decided by the node the looked is done to, and "
"then more often can determine this, or even directly the value."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:117
msgid ""
"Calls to C-API that we know cannot raise, no longer check, but merely "
"assert the result."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:120
msgid ""
"For attribute look-up and other operations that might be known to not "
"raise, we now only assert that it succeeds."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:123
msgid "Built-in loop-ups cannot fail, merely assert that."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:125
msgid "Creation of built-in exceptions never raises, merely assert that too."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:127
msgid ""
"More Python operation slots now have their own computations and some of "
"these gained overloads for more compile time constant optimization."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:131
msgid "When taking an iterator cannot raise, this is now detected more often."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:134
msgid ""
"The ``try``/``finally`` construct is now represented by duplicating the "
"final block into all kinds of handlers (``break``, ``continue``, "
"``return``, or ``except``) and optimized separately. This allows for SSA "
"to trace values more correctly."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:139
msgid ""
"The ``hash`` built-in now has dedicated node and code generation too. "
"This is mostly intended to represent the side effects of dictionary look-"
"up, but gives more compact and faster code too."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:143
msgid "Type ``type`` built-in cannot raise and has no side effect."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:145
msgid ""
"Speed improvement for in-place float operations for ``+=`` and ``*=``, as"
" these will be common cases."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:150
msgid "Tests"
msgstr ""

#: ../../posts/nuitka-release-0515.rst:152
msgid "Made the construct based testing executable with Python3."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:154
msgid ""
"Removed warnings using the new PyLint warnings plug-in for the reflected "
"test. Nuitka now uses the PyLint annotations to not warn. Also do not go "
"into PyQt for reflected test, not needed. Many Python3 improvements for "
"cases where there are differences to report."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:159
msgid ""
"The optimization tests no longer use 2to3 anymore, made the tests "
"portable to all versions."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:162
msgid "Checked more in-place operations for speed."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:166
msgid "Organisational"
msgstr ""

#: ../../posts/nuitka-release-0515.rst:168
msgid ""
"Many improvements to the coverage taking. We can hope to see public data "
"from this, some improvements were triggered from this already, but full "
"runs of the test suite with coverage data collection are yet to be done."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:175
msgid "Summary"
msgstr ""

#: ../../posts/nuitka-release-0515.rst:177
msgid ""
"The release includes many important new directions. Coverage analysis "
"will be important to remain certain of test coverage of Nuitka itself. "
"This is mostly done, but needs more work to complete."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:181
msgid ""
"Then the graphing surely will help us to debug and understand code "
"examples. So instead of tracing, and reading stuff, we should visualize "
"things, to more clearly see, how things evolve under optimization "
"iteration, and where exactly one thing goes wrong. This will be improved "
"as it proves necessary to do just that. So far, this has been rare. "
"Expect this to become end user capable with time. If only to allow you to"
" understand why Nuitka won't optimize code of yours, and what change of "
"Nuitka it will need to improve."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:190
msgid ""
"The comparative performance benchmarking is clearly the most important "
"thing to have for users. It deserves to be the top priority. Thanks to "
"the PyPy tool ``vmprof``, we may already be there on the data taking "
"side, but the presenting and correlation part, is still open and a fair "
"bit of work. It will be most important to empower users to make competent"
" performance bug reports, now that Nuitka enters the phase, where these "
"things matter."
msgstr ""

#: ../../posts/nuitka-release-0515.rst:198
msgid ""
"As this is a lot of ground to cover. More than ever. We can make this "
"compiler, but only if you help, it will arrive in your life time."
msgstr ""

