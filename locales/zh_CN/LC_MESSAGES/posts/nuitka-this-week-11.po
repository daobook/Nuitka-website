# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 15:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../posts/nuitka-this-week-11.rst:7
msgid "Nuitka this week #11"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:9
msgid "目录"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:13
msgid "Communication vs. Coding"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:15
msgid ""
"I continue to force myself to report more publicly, and it feels good. "
"This time things are in a stablizing period, and I feel I have a "
"consistent message."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:19
msgid ""
"Bear in mind, that this is supposed to be a quick, not too polished, and "
"straight from top of my head, even if really a lot of content. But I feel"
" that esp. the optimization parts are worth reading."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:25
msgid "Optimization Work"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:27
msgid ""
"So, the 0.6.1 optimization work has been a lot. And it's containing "
"improvements on every level. I think I will detail the levels in another "
"section."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:32
msgid "Levels of Optimization"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:34
msgid ""
"First level is of course node level optimization. Here 0.6.1 adds many "
"things, from better handling of closure variables not all as unknown "
"every time control flow escapes, to some operations ``+`` and comparisons"
" on known built-in type shapes to now be able to statically tell that "
"they do not raise. The opposite (does definitely raise) is prepared, but "
"not yet used."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:41
msgid ""
"This allows for type shapes to be longer known. Now ``a+b+c`` can be "
"known, but previously only ``a+b`` was sort of known, and little used "
"information."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:45
msgid ""
"The next level is picking the C target type. Here seeing more operations "
"and understanding more variables allows to more often pick the `C bool` "
"or `C void` types over the `PyObject *` C type. For 0.6.1 I have observed"
" that esp. more indicator variables make it to that stage, generating way"
" more efficient C code (for that indicator variable) for those in many "
"instances, esp. with loops, as these no longer loose type shape "
"information as badly as they did."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:53
msgid ""
"The, another level is when it is treated as an object, but known to be "
"`int`, there are way more helpers used for `+`/`+=` and a whole new set "
"of them for comparisons, that in these cases of full or partial type "
"knowledge operate faster."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:58
msgid ""
"And even if e.g. only one type is known, this still allows to not make a "
"lot of tests about it, and to avoid attempted shortcuts that cannot work."
" For 0.6.1 the `+` and `+=` are pretty well covered for these, but some "
"variants are not yet tuned to take all type knowledge advantage."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:63
msgid ""
"These will be also the building block, once the C type layer picks types "
"like \"C int or PyObject * known to be int\" with indicator flags which "
"values are currently valid to use, then these specialized calls still "
"make sense."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:68
msgid ""
"The most attrative level, \"C int\" has not been reached for 0.6.1 but "
"for my loop example and Python3, I can say that now would be a nice time "
"to start it, as type shape knowledge is all there. This was totally not "
"the case for 0.6.0, but it seems that this step will have to be postponed"
" to another release, maybe 0.6.2, maybe even later."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:76
msgid "Week of Bugfixing"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:78
msgid ""
"But something that bothers me is seeing the issue tracker pile up on "
"actionable items, where I just have not taken action. So as announced on "
"Twitter already, I am having and continue to have bug fixing time. I am "
"acting on issues that are relatively old and easy to act on, or where I "
"have no hope of this happening by anybody else anymore."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:84
msgid ""
"I have listed some interesting examples below. But basically these are "
"small, relatively unimportant, yet somewhat import for some use cases "
"things."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:90
msgid "Exec on Filehandles"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:92
msgid ""
"So when doing exec on a filehandle, Nuitka was at runtime reading the "
"source, then compiling it, but forgetting about the filename. This makes "
"things like `inspect.getsource()` fail on functions from there, and ugly "
"tracebacks not pointing to the filename. This was one of the things which"
" I had understood, but not did the actual work yet."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:100
msgid "pkgutil.iter_modules"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:102
msgid ""
"And another one, which seemed just not done, but turned out to be rather "
"complex, this one needs to populate a ``sys.path_importer_cache`` for "
"imported modules, and then to report the child modules. There was no "
"object to carry that information, so now instances of the meta path based"
" importer are associated for every import."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:108
msgid ""
"Turns out for Python3, my simplistic type building calling `type` "
"manually here does not work, as ``__init__`` and ``iter_modules`` do not "
"become anything but static methods ever. Needs a real type."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:112
msgid ""
"Plus, I had to disable it for now, because mixed packages, like the one "
"we do with ``multiprocessing\" where only part is compiled (the one "
"required) and part is pure Python from disk still, stopped to work. The "
"``iter_modules`` it seems will have to cover that case too."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:117
msgid ""
"So no luck, postponing this until next week of bug fixes. Frustrating a "
"bit, but such is life."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:121
msgid "When to release"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:123
msgid ""
"There are still some issues that I want to get to. Specicially the OpenGL"
" plugins which has been research ever since, and nobody stepped up, but "
"it's rather trivial. And the Tcl/Tk for Windows. People have provided "
"sufficient instructions for a plugin that I am going to write this week."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:129
msgid ""
"Once I feel the issue tracker is clean, I will release. As a matter of "
"experience, it is then going to grow a lot again."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:134
msgid "Google Summer of Code for Nuitka"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:136
msgid ""
"Finally somebody has stepped up, which means a lot to me. Now to the "
"actual work!"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:141
msgid "Twitter"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:143
msgid "I continue to be very active there."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:145
#, python-format
msgid "`Follow @kayhayen <https://twitter.com/kayhayen?ref_src=twsrc%5Etfw>`_"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:147
msgid "And lets not forget, having followers make me happy. So do re-tweets."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:149
msgid ""
"Adding Twitter more prominently to the web site is something that is also"
" going to happen."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:154
msgid "Help Wanted"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:156
#, python-format
msgid ""
"If you are interested, I am tagging issues `help wanted "
"<https://github.com/kayhayen/Nuitka/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22>`_"
" and there is a bunch, and very likely at least one *you* can help with."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:160
msgid "Nuitka definitely needs more people to work on it."
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:164
msgid "Donations"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:166
msgid ""
"If you want to help, but cannot spend the time, please consider to donate"
" to Nuitka, and go here:"
msgstr ""

#: ../../posts/nuitka-this-week-11.rst:169
msgid "`Donate to Nuitka </pages/donations.html>`_"
msgstr ""

