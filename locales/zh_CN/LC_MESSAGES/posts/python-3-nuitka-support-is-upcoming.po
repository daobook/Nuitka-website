# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 15:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:7
msgid "Python3 support by Nuitka is upcoming"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:9
msgid ""
"This is kind of semi-interesting news for you Python3 lovers. My "
"`\"Python compiler Nuitka\" </pages/overview.html>`_ has been supporting "
"the language somewhat, but in the next release it's going to be "
"*complete*."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:14
msgid ""
"Support for annotations, unicode variable names, keyword only arguments, "
"starred assignments, exception chaining plus causes, and full support for"
" new meta classes all have been added. So Python3.2 is covered now too "
"and passing the test suite on about the same level as with Python2.6 and "
"Python2.7 already."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:20
msgid ""
"I readied this while working on optimization, which is also seeing some "
"progress, that I will report on another day. Plus it's `\"available now "
"on PyPI\" <http://pypi.python.org/pypi/Nuitka/>`_ too. At the time of "
"this writing, there is pre-releases there, but after next release, there "
"will only stable releases published."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:26
msgid "My quick take on the Python3 that I saw:"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:30
msgid "Keyword Only Arguments"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:32
msgid ""
"Now seriously. I didn't miss that. And I am going to hate the extra "
"effort it causes to implement argument parsing. And when I looked into "
"default handling, I was just shocked:"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:40
msgid ""
"What would you expect the evaluation order to be for defaults? I raised a"
" CPython `\"bug report\" <http://bugs.python.org/issue16967>`_ about it. "
"And I am kind of shocked this could be wrong."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:46
msgid "Annotations"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:53
msgid ""
"That looks pretty promising. I had known about that already, and I guess,"
" whatever \"hints\" idea, we come up with Nuitka, it should at least "
"allow this notation. Unfortunately, evaluation order of annotations is "
"not that great either. I would expected them to come first, but they come"
" last. Coming last, they kind of come too late to accept do anything with"
" defaults."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:62
msgid "Unicode Variables"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:64
msgid ""
"Now great. While it's one step closer to \"you can't re-enter any "
"identifier without copy&paste\", it is also a whole lot more consistent, "
"if you come e.g. from German or French and need only a few extra letters."
" And there has to be at least one advantage to making everything unicode,"
" right?"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:72
msgid "Exception Chaining"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:74
msgid ""
"Gotta love that. Exception handlers are often subject to bit rot. They "
"will themselves contain errors, when they are actually used, hiding the "
"important thing that happened. No more. That's great."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:78
msgid ""
"The exception causes on the other hand, might be useful, but I didn't see"
" them a lot yet. That's probably because they are too new."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:83
msgid "Starred Assigns"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:85
msgid "I was wondering already, why that didn't work before."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:93
msgid "Metaclass __prepare__"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:95
msgid ""
"That's great stuff. Wish somebody had thought about meta classes that way"
" from the outset."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:100
msgid "nonlocal"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:102
msgid ""
"Yeah, big stuff. I love it. Also being able to write closure variables is"
" great for consistency."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:107
msgid "Conclusion"
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:109
msgid ""
"Nothing ground breaking. Nothing that makes me give up on Python2.7 yet, "
"but a bunch of surprises. And for Nuitka, this also found bugs and corner"
" cases, where things were not yet properly tested. The Python3 test "
"suite, inspired the finding of some obscure compatibility problems for "
"sure."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:115
msgid ""
"Overall, it's possible to think of Python2 and Python3 as still the same "
"language with only minor semantic differences. These can then be dealt "
"with re-formulations into the simpler Python that Nuitka optimization "
"deals with internally."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:120
msgid ""
"I for my part, am still missing the ``print`` statement. But well, now "
"Python3 finds them when I accidentally check them in. So that's kind of a"
" feature for as long as I develop in Python2.6/2.7 language."
msgstr ""

#: ../../posts/python-3-nuitka-support-is-upcoming.rst:124
msgid ""
"Now if one of you would help out with Python3.3, that would be great. It "
"would be about the new dictionary implementation mostly. And maybe "
"finding a proper re-formulation for \"yield from\" too."
msgstr ""

