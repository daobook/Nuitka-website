# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 15:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../posts/static-compilation-that-is-the-point.rst:7
msgid "Static Compilation - That is the point"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:9
msgid ""
"In a recent post, Stefan Behnel questioned the point of static "
"compilation and suggests that in order to be useful, a static compiler "
"**needs** to add something on top."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:13
msgid "This is going to be a rebuttal."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:17
msgid "Compatibility, I mean it"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:19
msgid ""
"First of all, let me start out, by saying that Nuitka is intended to be "
"the fully optimizing compiler of Python. The optimizing part is not yet "
"true. Right now, it's probably a correct compiler of Python. Correct in "
"the sense that it's compatible to CPython as far as possible."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:24
msgid "As examples of what I mean with compatibility:"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:26
msgid ""
"Nuitka will hold references to local variables of frames, when an "
"exception is raised, and will release them only once the next exception "
"is raised."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:30
msgid ""
"Nuitka will give the same error messages for all kinds of errors. For "
"example, the parameter parsing of functions will be the same."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:33
msgid ""
"Nuitka provides all language constructs no matter how absurd or unused "
"they are."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:38
msgid "Compatibility != Slower"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:40
msgid ""
"While generally Nuitka will have a hard time to be faster *and* "
"compatible to CPython, I don't have much concern about that. Using guards"
" between optimistic, and less optimistic variants of code, there is no "
"doubt in my head, that for programs, lots of code will only need very "
"minimal type annotation and still receive respectable speedups."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:46
msgid ""
"Of course, at this point, this is only speculation. But I somehow gather "
"that the sentiment is that incompatible and fast *need* to go along. I "
"totally dispute that."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:52
msgid "Language Extensions"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:54
msgid ""
"Now, the \"in addition\" stuff, that Stefan is talking about. I don't see"
" the point at all. It is quite obvious that everything you can say with "
"``cdef`` syntax, could also be said with a more Pythonic syntax. And if "
"it were missing, it could be added. And where it's a semantic change, it "
"should be frowned upon."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:60
msgid ""
"For the Nuitka project, I never considered an own parser of Python. No "
"matter how easy it would be, to roll your own, and I understand that "
"Cython did that, it's always going to be wrong and it's work. Work that "
"has no point. The CPython implementation exhibits and maintains the "
"module ``ast`` that works just fine."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:66
msgid ""
"For Python, if this were so really useful, such language extensions "
"should be added to Python itself. If there were missing meaningful "
"things, I contend they would best be added there, not in a fork of it. "
"Note how ``ctypes`` and ``cffi`` **have** been added. When I created "
"bindings for Ada code (C exports) to Python, it was so easy to do that in"
" pure Python with ctypes. I so much enjoyed that."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:73
msgid ""
"So, slow bindings are in my view really easy to create with plain Python "
"now. Somebody ought to make a \".h\" to ``ctypes``/``cffi`` declarations "
"converter, once they are really faster to use (possibly due to Nuitka). "
"For Nuitka it should be possible to accelerate these into direct calls "
"and accesses. At which point, mixing generated C code and C include "
"statements, will just be what it is, a source of bugs that Nuitka won't "
"have."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:83
msgid ""
"Further down, I will give examples of why I think that ``cdef`` is "
"inferior to plain Python, even from a practical point of view."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:88
msgid "Lack of Interpreter is bad"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:90
msgid ""
"Static compilation vs. interpretation as a discussion has little merits "
"to me. I find it totally obvious that you don't need static compilation, "
"but 2 other things:"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:94
msgid "You may need interpretation."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:95
msgid "And may need speed."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:97
msgid ""
"To me static code analysis and compilation are means to achieve that "
"speed, but not intended to remove interpretation, e.g. plugins need to "
"still work, no matter how deep the go."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:101
msgid ""
"For Cython syntax there is no interpreter, is there? That makes it loose "
"an important point. So it has to have another reason for using it, and "
"that would be speed and probably convenience. Now suppose Nuitka takes "
"over with these benefits, what would it be left with? Right. Nothing. At "
"all. Well, of course legacy users."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:107
msgid ""
"The orinal sin fall of PyRex - that is now Cython - is nothing that "
"Nuitka should repeat."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:112
msgid "No Lock-in"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:114
msgid ""
"The Cython language is so underspecified, I doubt anybody could make a "
"compatible implementation. Should you choose to use it, you will become "
"locked in. That means, if Cython breaks or won't work to begin with, you "
"are stuck."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:119
msgid ""
"That situation I totally despise. It seems an unnecessary risk to take. "
"Not only, if your program does not work, you can't just try another "
"compiler. You also will never really know, if it's either your fault or "
"Cython's fault until you do know, whose fault it is. Find yourself "
"playing with removing, adding, or re-phrasing ``cdef`` statements, until "
"things work."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:126
msgid ""
"Common. I would rather use PyPy or anything else, that can be checked "
"with CPython. Should I ever encounter a bug with it, I can try CPython, "
"and narrow down with it. Or I can try Jython, IronPython, or low and "
"behold, Nuitka."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:131
msgid ""
"I think, this totally makes it obvious, that static compilation of a non-"
"Python language has no point to people with Python code."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:134
msgid ""
"What I will always admit, is that Cython is (currently) the best way to "
"create fast bindings, because Nuitka is not ready yet. But from my point "
"of view, Cython has no point long term if a viable replacement that is "
"Pythonic exists."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:141
msgid "Python alone is a point"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:143
msgid ""
"So, if you leave out static compilation vs. interpretation and JIT "
"compilation, what would be the difference between PyPy and Nuitka? Well, "
"obviously PyPy people are a lot cooler and cleverer. Their design is "
"really inspiring and impressive. My design and whole approach to Nuitka "
"is totally boring in comparison."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:149
msgid ""
"But from a practical standpoint, is there any difference? What is the "
"difference between Jython and PyPy? The target VM it is. PyPy's or "
"Java's. And performance it is, of course."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:153
msgid ""
"So, with Python implementations all being similar, and just differing in "
"targets, and performances, do they all have no point? I believe taken to "
"the logical conclusion, that is what Stefan suggests. I of course think "
"that PyPy, Nuitka, and Jython have have as much of a point, as CPython "
"does."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:161
msgid "Type Annotations done right"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:163
msgid "And just for fun. This is making up a use cases of type annotations:"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:174
msgid ""
"Notice how ``plong`` depends on an expression, that may become known "
"during compile time or not. Should that turn out to be not possible, "
"Nuitka can always generate code for both branches and branch when called."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:179
msgid "Or more complex and useful like this:"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:226
msgid ""
"This is just a rough sketch, but hopefully you get the idea. Do this with"
" Cython, can you?"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:229
msgid ""
"The hints can be put into decorators, which may be discovered as "
"inlinable, which then see more inlines. For this to work best, the loop "
"over the compile time constant code object, needs to be unrolled, but "
"that appears quite possible."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:234
msgid ""
"The signatures can therefore be done fully automatic. One could use "
"prefix notation to indicate types."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:237
msgid ""
"Another way would put fixed types for certain variable names. In Nuitka "
"code, \"node\", \"code\", \"context\", etc. have always the same types. I"
" suspect many programs are the same, and it would be sweet, if you could "
"plug something in and check such types throughout all of the package."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:242
msgid ""
"And then, what do you do then? Well, you can inspect these hints at run "
"time as well, they work with CPython as well (though they won't make "
"things faster, only will that find errors in your program), they will "
"even work with PyPy, or at least not harm it. It will nicely JIT them "
"away I suppose."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:248
msgid ""
"Your IDE will like the code. syntax highlighting, auto indent will work. "
"With every Python IDE. PyLint will find the bugs I made in that code up "
"there. And Nuitka will compile it and benefit from the hints."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:252
msgid ""
"My point here really is, that ``cdef`` is not flexible, not standard, not"
" portable. It should die. It totally is anti-Pythonic to me."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:257
msgid "Elsewhere"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:259
msgid ""
"In Java land, people compile to machine code as well. They probably also "
"- like stupid me - didn't understand that static compilation would have "
"no point. Why do they do it? Why am I using compiled binaries done with "
"their compiler then?"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:264
msgid ""
"And why didn't they take the chance to introduce ubercool ``cdef`` "
"a-likes while doing it? They probably just didn't know better, did they?"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:267
msgid ""
"No seriously. A compiler is just a compiler. It takes a source code in a "
"language and turns it into a package to execute. That may be a required "
"or an optional step. I prefer optional for development turn around. It "
"should try and make code execute as fast as it can. But it should not "
"change the language. With Cython I have to compile. With Nuitka I could."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:273
msgid ""
"In fact, I would be hard pressed to find another example of a compiler "
"that extends the interpreted language compiled, just so there is a point "
"in having it."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:279
msgid "Conclusion"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:281
msgid ""
"Nuitka has a point. On top of that I enjoy doing it. It's great to have "
"the time to do this thing in the correct way."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:284
msgid ""
"So far, things worked out pretty well. My earlier experimentations with "
"type inference had shown some promise. The \"value friends\" thing, and "
"the whole plan, appears relatively sound, but likely is in need of an "
"update. I will work on it in december. Up to now, and even right now I "
"worked on re-formulations, that should have made it possible to get more "
"release ready effects from this."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:291
msgid ""
"When I say correct way, I mean this. When I noticed that type inference "
"was harder than it should be, I could take the time and re-architecture "
"things so that it will be simpler. To me that is fun. This being my spare"
" time allows me to do things this efficiently. That's not an excuse, it's"
" a fact that explains my approach. It doesn't mean it makes less sense, "
"not at all."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:298
msgid ""
"As for language compatibility, there is more progress with Python3. I am "
"currently changing the ``class`` re-formulations for Python2 and Python3 "
"(they need totally different ones due to ``metaclass`` changes) and then "
"\"test_desc.py\" should pass with it too, which will be a huge "
"achievement in that domain. I will do a post on that later."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:304
msgid ""
"Then infrastructure, should complete the valgrind based benchmark "
"automatism. Numbers will become more important from now on. It starts to "
"make sense to observe them. This is not entirely as fun. But with "
"improving numbers, it will be good to show off."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:309
msgid ""
"And of course, I am going to document some more. The testing strategy of "
"Nuitka is worth a look, because it's totally different from everything "
"else people normally do."
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:313
msgid ""
"Anyway. I am not a big fan of controversy. I respect Cython for all it "
"achieved. I do want to go where it fails to achieve. I should not have to"
" justify that, it's actually quite obvious, isn't it?"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:317
msgid "Yours,"
msgstr ""

#: ../../posts/static-compilation-that-is-the-point.rst:318
msgid "Kay"
msgstr ""

