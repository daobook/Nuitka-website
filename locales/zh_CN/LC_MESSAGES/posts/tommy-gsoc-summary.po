# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 15:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../posts/tommy-gsoc-summary.rst:7
msgid "Intro"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:9
msgid ""
"As Google Summer of Code (GSoC) is coming to an end, I am writing this "
"blog post as a final summary describing all the work I have done as well "
"as my experiences in this program."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:15
msgid "Summary of My Work"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:17
msgid ""
"`#314 run_all.py new special-comment mechanism & Urllib3Using.py "
"<https://github.com/Nuitka/Nuitka/pull/314>`__"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:20
msgid "Before GSoC started, I looked around for whatever work I could help with."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:23
msgid ""
"In this pull request, I added a ``checkRequirements`` function for the "
"Nuitka standalone test suite."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:26
msgid ""
"This function checks for special-comments at the top of standalone tests "
"in the format of ``# nuitka-skip-unless-expression: expression to be "
"evaluated`` OR ``# nuitka-skip-unless-imports: module1,module2,...`` and "
"will decide whether to skip a test depending on if its specified "
"requirements are met."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:32
msgid "In addition, standalone test ``Urllib3Using.py`` was created."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:34
msgid ""
"This pull request was soon merged and allowed me the lucky opportunity of"
" GSoC 2019 with Nuitka :)"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:37
msgid ""
"`#339 Standalone tests for botocore & boto3 + fix to Urllib3Using.py "
"<https://github.com/Nuitka/Nuitka/pull/339>`__"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:40
msgid "This PR was also created before the start of GSoC."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:42
msgid ""
"Standalone test ``Boto3Using.py`` was created using ``moto`` to mock AWS "
"calls which did not turn out well."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:45
msgid ""
"Changed ``Urllib3Using.py`` with the addition of python version checks as"
" a fix to `Issue #373 <https://github.com/Nuitka/Nuitka/issues/373>`__."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:49
msgid ""
"`Urllib3 Wheel with Nuitka Pytest Results "
"<https://nuitka.net/posts/urllib3-wheel-with-nuitka.html>`__ and `Python-"
"Dateutil Wheel with Nuitka Pytest Results <https://nuitka.net/posts"
"/dateutil-wheel-with-nuitka.html>`__"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:54
msgid ""
"At the start of GSoC, I performed manual pytest comparison for PyPI "
"packages ``urllib3`` and ``dateutil``."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:57
msgid "The findings of my testing were documented in these postings."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:59
msgid ""
"Manual testing compares the pytest results of an installed nuitka wheel "
"built using ``python setup.py bdist_nuitka`` to the regular pytest "
"results of each package."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:63
msgid "Testing is done to ensure that nuitka is building the wheel correctly."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:66
msgid ""
"If the pytests pass/fail in the same way, that means Nuitka built the "
"wheel properly."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:69
msgid "Else if the tests differ, then something is wrong."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:71
msgid ""
"Virtualenv is used to create a clean environment with no outside "
"pollution."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:74
msgid ""
"Over the course of performing manual testing, I became familiar with the "
"use of ``virtualenv``, ``wheel``, and ``pytest``."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:77
msgid ""
"A bug was found with the package ``urllib3`` bdist and I created `Issue "
"#413 <https://github.com/Nuitka/Nuitka/issues/413>`__ to document the "
"bug."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:81
msgid ""
"`#440 Automating PyPI Wheel Pytest "
"<https://github.com/Nuitka/Nuitka/pull/440>`__"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:84
msgid ""
"After familiarizing myself with how ``virtualenv``, ``wheel``, and "
"``pytest`` work, I started to work on a script which would automate the "
"pytest comparison for top PyPI packages."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:88
msgid ""
"The script first uses ``git`` to update each package if it is already "
"existing in the local cache, else it will ``git clone`` that package into"
" the local cache."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:92
msgid ""
"The script then uses calls to ``os.system`` to automate the creation of a"
" ``virtualenv`` which is then used to install ``pytest`` and ``pip "
"install`` the package's requirements (if any) for running pytest."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:97
msgid ""
"The script then handles each package depending on different needs before "
"building a regular wheel with ``python setup.py bdist_wheel``."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:101
msgid ""
"This wheel is then installed into the ``virtualenv``, after which "
"``subprocess.Popen`` is used to run and capture the output of ``python -m"
" pytest --disable-warnings`` into a string."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:105
msgid ""
"The script then resets the package to its original state and builds a "
"nuitka-compiled wheel using ``python setup.py bdist_nuitka``."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:109
msgid ""
"This compiled wheel is then installed into the ``virtualenv``, after "
"which ``subprocess.Popen`` is used to run and capture the output of "
"``python -m pytest --disable-warnings`` into another string."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:114
msgid ""
"The two strings containing pytest outputs are then compared to find "
"differences."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:117
msgid ""
"If no differences are found, this means ``bdist_nuitka`` worked properly."
" Else Nuitka compilation did something wrong."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:120
msgid ""
"The above process is repeated for each suitable PyPI package from the "
"PyPI top 50. (Some packages are left out if they do not contain a test "
"suite or if they do not need to be tested)"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:124
msgid "At the end, a colored summary is given for all the packages tested."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:127
msgid ""
"This automation script is meant to be run regularly to inform developers "
"of Nuitka regressions."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:130
msgid ""
"`Issue #477 Unable to compile modules listed under unworthy_namespaces "
"<https://github.com/Nuitka/Nuitka/issues/477>`__"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:133
msgid "Raised due to package ``pycparser`` failing in the automated test suite."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:135
msgid "This issue will be addressed in the future."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:137
msgid ""
"`Issue #479 bdist_nuitka fails for packages containing py_modules only "
"<https://github.com/Nuitka/Nuitka/issues/479>`__"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:140
msgid ""
"While I worked on `#440 <https://github.com/Nuitka/Nuitka/pull/440>`__, I"
" found a bug with ``bdist_nuitka`` failing on PyPI packages containing "
"py_modules only."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:145
msgid ""
"This bug occurs due to Nuitka making the assumption that a main package "
"always exists for all packages. However, some packages contain only a "
"main module and not a main package."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:149
msgid "Applies to PyPI packages ``decorator``, ``ipaddress``, and ``pyparsing``."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:152
msgid ""
"`#483 Add support for py_modules_only compilation "
"<https://github.com/Nuitka/Nuitka/pull/483>`__"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:155
msgid ""
"This pull request changes ``bdist_nuitka.py`` and various other files to "
"fix `Issue #479 <https://github.com/Nuitka/Nuitka/issues/479>`__."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:159
msgid ""
"Checks are added for the ``bdist_nuitka`` command to see if a main "
"package exists. If there is not a main package, it will set its compile "
"target to the main module instead."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:163
msgid ""
"This also addressed the case of a package with both a main package and a "
"main module, in which case both are included inside the resulting wheel."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:167
msgid ""
"In addition, ``distutils`` examples ``py_modules_only`` and "
"``package_and_module`` were created and added for future testing."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:170
msgid ""
"During this PR, I found an import bug in Nuitka and hotfixed it with "
"`#487 Fixup_import_module <https://github.com/Nuitka/Nuitka/pull/487>`__."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:174
msgid "`#484 PyPI Standalone Tests <https://github.com/Nuitka/Nuitka/pull/484>`__"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:177
msgid "This pull request adds more standalone tests for each top PyPI package."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:180
msgid ""
"`#495 Improve pypi automation "
"<https://github.com/Nuitka/Nuitka/pull/495>`__"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:183
msgid ""
"Improves the PyPI test suite created in `#440 "
"<https://github.com/Nuitka/Nuitka/pull/440>`__ with functional "
"improvements, readability improvements, and added documentation."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:189
msgid "Things I Learned"
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:191
msgid ""
"Before GSoC, I was very uncomfortable with working inside a terminal. I "
"was unfamiliar with many basic bash commands because I simply did not "
"have any prior professional industrial experiences. I was also very "
"unfamiliar with the Git flow, which is evident in the messy commit "
"histories of my earliest pull requests."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:197
msgid ""
"As I continued throughout my GSoC journey, however, I became much more "
"comfortable with working inside the terminal as well as using ``git`` as "
"a version-control system (shoutout to my mentor Kay Hayen for helping me "
"through all the annoying conflicts)."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:202
msgid ""
"Although I am still no expert, I can confidently say that I am now far "
"more proficient working with ``git`` and inside the terminal."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:205
msgid ""
"In addition, I became much more familiar with many of the most popular "
"PyPI packages as well as the inner workings of ``python``, which I "
"believe will help me go very far in my career as a software developer."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:209
msgid ""
"Overall, the GSoC experience was truly astounding and I am more than "
"thankful to my mentor Kay Hayen as well as Google for making this amazing"
" program possible."
msgstr ""

#: ../../posts/tommy-gsoc-summary.rst:213
msgid "Yours, `Tommy <https://github.com/tommyli3318>`__"
msgstr ""

